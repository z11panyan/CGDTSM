# 1 "src/generate.cpp"
# 1 "/home/pany/nezha/Fuzzer//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "src/generate.cpp"
# 37 "src/generate.cpp"
# 1 "src/generate.h" 1


# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 367 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 410 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 411 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 368 "/usr/include/features.h" 2 3 4
# 391 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 392 "/usr/include/features.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4


# 29 "/usr/include/stdio.h" 3 4
extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 216 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 121 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 122 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 36 "/usr/include/stdio.h" 2 3 4
# 44 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 64 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 31 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 82 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "/usr/include/libio.h" 2 3 4
# 49 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "/usr/include/libio.h" 2 3 4
# 144 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;





typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 173 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 241 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 289 "/usr/include/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 333 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 429 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 459 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 521 "/usr/include/libio.h" 3 4
}
# 75 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 90 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __ssize_t ssize_t;







typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 164 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 165 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();








extern FILE *tmpfile (void) ;
# 205 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;





extern char *tmpnam_r (char *__s) throw () ;
# 227 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 252 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 262 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 295 "/usr/include/stdio.h" 3 4


extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();








extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();
# 463 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 522 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 550 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 594 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 638 "/usr/include/stdio.h" 3 4
extern char *gets (char *__s) __attribute__ ((__deprecated__));


# 649 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 665 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 726 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 737 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 773 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 792 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 815 "/usr/include/stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;








extern void perror (const char *__s);






# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 854 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 872 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 942 "/usr/include/stdio.h" 3 4
}
# 4 "src/generate.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 32 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 33 "/usr/include/stdlib.h" 2 3 4

extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 42 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 43 "/usr/include/stdlib.h" 2 3 4
# 95 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 139 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;




extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

# 235 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/xlocale.h" 1 3 4
# 27 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 236 "/usr/include/stdlib.h" 2 3 4



extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 305 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 98 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 115 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 132 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 57 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 73 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 91 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 133 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 147 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 194 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
# 44 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 46 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 54 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 64 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 96 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 106 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 131 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 220 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
extern "C" {

__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw () __attribute__ ((__const__));
# 58 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
}
# 223 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 262 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4
# 60 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;





typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 90 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    short __spins;
    short __elision;
    __pthread_list_t __list;
# 125 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    signed char __rwelision;




    unsigned char __pad1[7];


    unsigned long int __pad2;


    unsigned int __flags;

  } __data;
# 220 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 315 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 493 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));









extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));







extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;





extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 619 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 629 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 641 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 651 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 662 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 673 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 683 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 693 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 705 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;









extern int system (const char *__command) ;






extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 733 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);





extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;

# 811 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));






extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();








extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 898 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 955 "/usr/include/stdlib.h" 2 3 4
# 967 "/usr/include/stdlib.h" 3 4
}
# 5 "src/generate.h" 2
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4
extern "C" {
# 205 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 206 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 210 "/usr/include/unistd.h" 2 3 4
# 229 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 230 "/usr/include/unistd.h" 2 3 4
# 270 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 290 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;
# 337 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 348 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 379 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 407 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) throw () ;




extern int pipe2 (int __pipedes[2], int __flags) throw () ;
# 435 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 447 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 472 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) throw () ;
# 514 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () ;





extern char *get_current_dir_name (void) throw ();







extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) throw () ;


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) throw () __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     throw () __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) throw () ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 613 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();


extern __pid_t getpgrp (void) throw ();


extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 663 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();






extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () ;



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw () ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw () ;




extern int seteuid (__uid_t __uid) throw () ;






extern int setgid (__gid_t __gid) throw () ;




extern int setregid (__gid_t __rgid, __gid_t __egid) throw () ;




extern int setegid (__gid_t __gid) throw () ;





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw () ;



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw () ;






extern __pid_t fork (void) throw ();







extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) throw ();





extern int ttyslot (void) throw ();




extern int link (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) throw () __attribute__ ((__nonnull__ (1)));
# 874 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/getopt.h" 1 3 4
# 48 "/usr/include/getopt.h" 3 4
extern "C" {
# 57 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 71 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 150 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw ();
# 185 "/usr/include/getopt.h" 3 4
}
# 875 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) throw () ;





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) throw ();


extern int revoke (const char *__file) throw () __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () ;






extern int chroot (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) throw ();






extern long int gethostid (void);


extern void sync (void) throw ();





extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();
# 996 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1008 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1019 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) throw () ;
# 1029 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () ;
# 1040 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () ;





extern void *sbrk (intptr_t __delta) throw ();
# 1061 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1084 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1094 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1115 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);







extern char *crypt (const char *__key, const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__glibc_block, int __edflag)
     throw () __attribute__ ((__nonnull__ (1)));






extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));
# 1154 "/usr/include/unistd.h" 3 4
}
# 6 "src/generate.h" 2
# 1 "/usr/include/fcntl.h" 1 3 4
# 28 "/usr/include/fcntl.h" 3 4
extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;

    __off_t l_start;
    __off_t l_len;




    __pid_t l_pid;
  };


struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };



# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uio.h" 1 3 4
# 43 "/usr/include/x86_64-linux-gnu/bits/uio.h" 3 4
struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 39 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4
# 258 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
enum __pid_type
  {
    F_OWNER_TID = 0,
    F_OWNER_PID,
    F_OWNER_PGRP,
    F_OWNER_GID = F_OWNER_PGRP
  };


struct f_owner_ex
  {
    enum __pid_type type;
    __pid_t pid;
  };
# 333 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
struct file_handle
{
  unsigned int handle_bytes;
  int handle_type;

  unsigned char f_handle[0];
};
# 363 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern "C" {




extern ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    throw ();






extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,
       unsigned int __flags);






extern ssize_t vmsplice (int __fdout, const struct iovec *__iov,
    size_t __count, unsigned int __flags);





extern ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,
         __off64_t *__offout, size_t __len,
         unsigned int __flags);





extern ssize_t tee (int __fdin, int __fdout, size_t __len,
      unsigned int __flags);






extern int fallocate (int __fd, int __mode, __off_t __offset, __off_t __len);
# 418 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern int fallocate64 (int __fd, int __mode, __off64_t __offset,
   __off64_t __len);




extern int name_to_handle_at (int __dfd, const char *__name,
         struct file_handle *__handle, int *__mnt_id,
         int __flags) throw ();





extern int open_by_handle_at (int __mountdirfd, struct file_handle *__handle,
         int __flags);



}
# 61 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 2 3 4
# 36 "/usr/include/fcntl.h" 2 3 4
# 76 "/usr/include/fcntl.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 77 "/usr/include/fcntl.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
  };



struct stat64
  {
    __dev_t st_dev;

    __ino64_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;






    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;





    __blksize_t st_blksize;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 164 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];



  };
# 78 "/usr/include/fcntl.h" 2 3 4
# 146 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...);
# 156 "/usr/include/fcntl.h" 3 4
extern int open (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 166 "/usr/include/fcntl.h" 3 4
extern int open64 (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 180 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 191 "/usr/include/fcntl.h" 3 4
extern int openat64 (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 202 "/usr/include/fcntl.h" 3 4
extern int creat (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 212 "/usr/include/fcntl.h" 3 4
extern int creat64 (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 248 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, off_t __offset, off_t __len,
     int __advise) throw ();
# 260 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise64 (int __fd, off64_t __offset, off64_t __len,
       int __advise) throw ();
# 270 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, off_t __offset, off_t __len);
# 281 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate64 (int __fd, off64_t __offset, off64_t __len);
# 292 "/usr/include/fcntl.h" 3 4
}
# 7 "src/generate.h" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/socket.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern "C" {

# 1 "/usr/include/x86_64-linux-gnu/sys/uio.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern "C" {


# 1 "/usr/include/x86_64-linux-gnu/bits/uio.h" 1 3 4
# 56 "/usr/include/x86_64-linux-gnu/bits/uio.h" 3 4
extern "C" {


extern ssize_t process_vm_readv (pid_t __pid, const struct iovec *__lvec,
     unsigned long int __liovcnt,
     const struct iovec *__rvec,
     unsigned long int __riovcnt,
     unsigned long int __flags)
  throw ();


extern ssize_t process_vm_writev (pid_t __pid, const struct iovec *__lvec,
      unsigned long int __liovcnt,
      const struct iovec *__rvec,
      unsigned long int __riovcnt,
      unsigned long int __flags)
  throw ();

}
# 29 "/usr/include/x86_64-linux-gnu/sys/uio.h" 2 3 4
# 39 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t readv (int __fd, const struct iovec *__iovec, int __count)
  ;
# 50 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t writev (int __fd, const struct iovec *__iovec, int __count)
  ;
# 65 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t preadv (int __fd, const struct iovec *__iovec, int __count,
         __off_t __offset) ;
# 77 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t pwritev (int __fd, const struct iovec *__iovec, int __count,
   __off_t __offset) ;
# 103 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t preadv64 (int __fd, const struct iovec *__iovec, int __count,
    __off64_t __offset) ;
# 115 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t pwritev64 (int __fd, const struct iovec *__iovec, int __count,
     __off64_t __offset) ;



}
# 27 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/socket.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/socket_type.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/socket_type.h" 3 4
enum __socket_type
{
  SOCK_STREAM = 1,


  SOCK_DGRAM = 2,


  SOCK_RAW = 3,

  SOCK_RDM = 4,

  SOCK_SEQPACKET = 5,


  SOCK_DCCP = 6,

  SOCK_PACKET = 10,







  SOCK_CLOEXEC = 02000000,


  SOCK_NONBLOCK = 00004000


};
# 39 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4
# 150 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sockaddr.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/sockaddr.h" 3 4
typedef unsigned short int sa_family_t;
# 151 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4


struct sockaddr
  {
    sa_family_t sa_family;
    char sa_data[14];
  };
# 166 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
struct sockaddr_storage
  {
    sa_family_t ss_family;
    char __ss_padding[(128 - (sizeof (unsigned short int)) - sizeof (unsigned long int))];
    unsigned long int __ss_align;
  };



enum
  {
    MSG_OOB = 0x01,

    MSG_PEEK = 0x02,

    MSG_DONTROUTE = 0x04,



    MSG_TRYHARD = MSG_DONTROUTE,


    MSG_CTRUNC = 0x08,

    MSG_PROXY = 0x10,

    MSG_TRUNC = 0x20,

    MSG_DONTWAIT = 0x40,

    MSG_EOR = 0x80,

    MSG_WAITALL = 0x100,

    MSG_FIN = 0x200,

    MSG_SYN = 0x400,

    MSG_CONFIRM = 0x800,

    MSG_RST = 0x1000,

    MSG_ERRQUEUE = 0x2000,

    MSG_NOSIGNAL = 0x4000,

    MSG_MORE = 0x8000,

    MSG_WAITFORONE = 0x10000,

    MSG_FASTOPEN = 0x20000000,


    MSG_CMSG_CLOEXEC = 0x40000000



  };




struct msghdr
  {
    void *msg_name;
    socklen_t msg_namelen;

    struct iovec *msg_iov;
    size_t msg_iovlen;

    void *msg_control;
    size_t msg_controllen;




    int msg_flags;
  };


struct cmsghdr
  {
    size_t cmsg_len;




    int cmsg_level;
    int cmsg_type;

    __extension__ unsigned char __cmsg_data [];

  };
# 276 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
extern struct cmsghdr *__cmsg_nxthdr (struct msghdr *__mhdr,
          struct cmsghdr *__cmsg) throw ();
# 303 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
enum
  {
    SCM_RIGHTS = 0x01


    , SCM_CREDENTIALS = 0x02


  };



struct ucred
{
  pid_t pid;
  uid_t uid;
  gid_t gid;
};
# 349 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/socket.h" 1 3 4
# 1 "/usr/include/asm-generic/socket.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/asm/sockios.h" 1 3 4
# 1 "/usr/include/asm-generic/sockios.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/sockios.h" 2 3 4
# 5 "/usr/include/asm-generic/socket.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/socket.h" 2 3 4
# 350 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4
# 383 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
struct linger
  {
    int l_onoff;
    int l_linger;
  };
# 39 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4




struct osockaddr
  {
    unsigned short int sa_family;
    unsigned char sa_data[14];
  };




enum
{
  SHUT_RD = 0,

  SHUT_WR,

  SHUT_RDWR

};
# 101 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
struct mmsghdr
  {
    struct msghdr msg_hdr;
    unsigned int msg_len;

  };






extern int socket (int __domain, int __type, int __protocol) throw ();





extern int socketpair (int __domain, int __type, int __protocol,
         int __fds[2]) throw ();


extern int bind (int __fd, const struct sockaddr * __addr, socklen_t __len)
     throw ();


extern int getsockname (int __fd, struct sockaddr *__restrict __addr,
   socklen_t *__restrict __len) throw ();
# 137 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int connect (int __fd, const struct sockaddr * __addr, socklen_t __len);



extern int getpeername (int __fd, struct sockaddr *__restrict __addr,
   socklen_t *__restrict __len) throw ();






extern ssize_t send (int __fd, const void *__buf, size_t __n, int __flags);






extern ssize_t recv (int __fd, void *__buf, size_t __n, int __flags);






extern ssize_t sendto (int __fd, const void *__buf, size_t __n,
         int __flags, const struct sockaddr * __addr,
         socklen_t __addr_len);
# 174 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern ssize_t recvfrom (int __fd, void *__restrict __buf, size_t __n,
    int __flags, struct sockaddr *__restrict __addr,
    socklen_t *__restrict __addr_len);







extern ssize_t sendmsg (int __fd, const struct msghdr *__message,
   int __flags);







extern int sendmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags);







extern ssize_t recvmsg (int __fd, struct msghdr *__message, int __flags);







extern int recvmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags,
       struct timespec *__tmo);






extern int getsockopt (int __fd, int __level, int __optname,
         void *__restrict __optval,
         socklen_t *__restrict __optlen) throw ();




extern int setsockopt (int __fd, int __level, int __optname,
         const void *__optval, socklen_t __optlen) throw ();





extern int listen (int __fd, int __n) throw ();
# 243 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int accept (int __fd, struct sockaddr *__restrict __addr,
     socklen_t *__restrict __addr_len);






extern int accept4 (int __fd, struct sockaddr *__restrict __addr,
      socklen_t *__restrict __addr_len, int __flags);
# 261 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int shutdown (int __fd, int __how) throw ();




extern int sockatmark (int __fd) throw ();







extern int isfdtype (int __fd, int __fdtype) throw ();
# 283 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
}
# 8 "src/generate.h" 2
# 1 "/usr/include/netinet/in.h" 1 3 4
# 22 "/usr/include/netinet/in.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 48 "/usr/include/stdint.h" 3 4
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;



typedef unsigned long int uint64_t;
# 65 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 90 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 103 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 122 "/usr/include/stdint.h" 3 4
typedef unsigned long int uintptr_t;
# 134 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdint.h" 2 3 4
# 23 "/usr/include/netinet/in.h" 2 3 4




extern "C" {


typedef uint32_t in_addr_t;
struct in_addr
  {
    in_addr_t s_addr;
  };


# 1 "/usr/include/x86_64-linux-gnu/bits/in.h" 1 3 4
# 133 "/usr/include/x86_64-linux-gnu/bits/in.h" 3 4
struct ip_opts
  {
    struct in_addr ip_dst;
    char ip_opts[40];
  };


struct ip_mreqn
  {
    struct in_addr imr_multiaddr;
    struct in_addr imr_address;
    int imr_ifindex;
  };


struct in_pktinfo
  {
    int ipi_ifindex;
    struct in_addr ipi_spec_dst;
    struct in_addr ipi_addr;
  };
# 38 "/usr/include/netinet/in.h" 2 3 4


enum
  {
    IPPROTO_IP = 0,

    IPPROTO_ICMP = 1,

    IPPROTO_IGMP = 2,

    IPPROTO_IPIP = 4,

    IPPROTO_TCP = 6,

    IPPROTO_EGP = 8,

    IPPROTO_PUP = 12,

    IPPROTO_UDP = 17,

    IPPROTO_IDP = 22,

    IPPROTO_TP = 29,

    IPPROTO_DCCP = 33,

    IPPROTO_IPV6 = 41,

    IPPROTO_RSVP = 46,

    IPPROTO_GRE = 47,

    IPPROTO_ESP = 50,

    IPPROTO_AH = 51,

    IPPROTO_MTP = 92,

    IPPROTO_BEETPH = 94,

    IPPROTO_ENCAP = 98,

    IPPROTO_PIM = 103,

    IPPROTO_COMP = 108,

    IPPROTO_SCTP = 132,

    IPPROTO_UDPLITE = 136,

    IPPROTO_MPLS = 137,

    IPPROTO_RAW = 255,

    IPPROTO_MAX
  };





enum
  {
    IPPROTO_HOPOPTS = 0,

    IPPROTO_ROUTING = 43,

    IPPROTO_FRAGMENT = 44,

    IPPROTO_ICMPV6 = 58,

    IPPROTO_NONE = 59,

    IPPROTO_DSTOPTS = 60,

    IPPROTO_MH = 135

  };



typedef uint16_t in_port_t;


enum
  {
    IPPORT_ECHO = 7,
    IPPORT_DISCARD = 9,
    IPPORT_SYSTAT = 11,
    IPPORT_DAYTIME = 13,
    IPPORT_NETSTAT = 15,
    IPPORT_FTP = 21,
    IPPORT_TELNET = 23,
    IPPORT_SMTP = 25,
    IPPORT_TIMESERVER = 37,
    IPPORT_NAMESERVER = 42,
    IPPORT_WHOIS = 43,
    IPPORT_MTP = 57,

    IPPORT_TFTP = 69,
    IPPORT_RJE = 77,
    IPPORT_FINGER = 79,
    IPPORT_TTYLINK = 87,
    IPPORT_SUPDUP = 95,


    IPPORT_EXECSERVER = 512,
    IPPORT_LOGINSERVER = 513,
    IPPORT_CMDSERVER = 514,
    IPPORT_EFSSERVER = 520,


    IPPORT_BIFFUDP = 512,
    IPPORT_WHOSERVER = 513,
    IPPORT_ROUTESERVER = 520,


    IPPORT_RESERVED = 1024,


    IPPORT_USERRESERVED = 5000
  };
# 211 "/usr/include/netinet/in.h" 3 4
struct in6_addr
  {
    union
      {
 uint8_t __u6_addr8[16];

 uint16_t __u6_addr16[8];
 uint32_t __u6_addr32[4];

      } __in6_u;





  };


extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;
# 239 "/usr/include/netinet/in.h" 3 4
struct sockaddr_in
  {
    sa_family_t sin_family;
    in_port_t sin_port;
    struct in_addr sin_addr;


    unsigned char sin_zero[sizeof (struct sockaddr) -
      (sizeof (unsigned short int)) -
      sizeof (in_port_t) -
      sizeof (struct in_addr)];
  };



struct sockaddr_in6
  {
    sa_family_t sin6_family;
    in_port_t sin6_port;
    uint32_t sin6_flowinfo;
    struct in6_addr sin6_addr;
    uint32_t sin6_scope_id;
  };




struct ip_mreq
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;
  };

struct ip_mreq_source
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;


    struct in_addr imr_sourceaddr;
  };




struct ipv6_mreq
  {

    struct in6_addr ipv6mr_multiaddr;


    unsigned int ipv6mr_interface;
  };




struct group_req
  {

    uint32_t gr_interface;


    struct sockaddr_storage gr_group;
  };

struct group_source_req
  {

    uint32_t gsr_interface;


    struct sockaddr_storage gsr_group;


    struct sockaddr_storage gsr_source;
  };



struct ip_msfilter
  {

    struct in_addr imsf_multiaddr;


    struct in_addr imsf_interface;


    uint32_t imsf_fmode;


    uint32_t imsf_numsrc;

    struct in_addr imsf_slist[1];
  };





struct group_filter
  {

    uint32_t gf_interface;


    struct sockaddr_storage gf_group;


    uint32_t gf_fmode;


    uint32_t gf_numsrc;

    struct sockaddr_storage gf_slist[1];
};
# 376 "/usr/include/netinet/in.h" 3 4
extern uint32_t ntohl (uint32_t __netlong) throw () __attribute__ ((__const__));
extern uint16_t ntohs (uint16_t __netshort)
     throw () __attribute__ ((__const__));
extern uint32_t htonl (uint32_t __hostlong)
     throw () __attribute__ ((__const__));
extern uint16_t htons (uint16_t __hostshort)
     throw () __attribute__ ((__const__));




# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 388 "/usr/include/netinet/in.h" 2 3 4
# 503 "/usr/include/netinet/in.h" 3 4
extern int bindresvport (int __sockfd, struct sockaddr_in *__sock_in) throw ();


extern int bindresvport6 (int __sockfd, struct sockaddr_in6 *__sock_in)
     throw ();
# 533 "/usr/include/netinet/in.h" 3 4
struct cmsghdr;



struct in6_pktinfo
  {
    struct in6_addr ipi6_addr;
    unsigned int ipi6_ifindex;
  };


struct ip6_mtuinfo
  {
    struct sockaddr_in6 ip6m_addr;
    uint32_t ip6m_mtu;
  };



extern int inet6_option_space (int __nbytes)
     throw () __attribute__ ((__deprecated__));
extern int inet6_option_init (void *__bp, struct cmsghdr **__cmsgp,
         int __type) throw () __attribute__ ((__deprecated__));
extern int inet6_option_append (struct cmsghdr *__cmsg,
    const uint8_t *__typep, int __multx,
    int __plusy) throw () __attribute__ ((__deprecated__));
extern uint8_t *inet6_option_alloc (struct cmsghdr *__cmsg, int __datalen,
        int __multx, int __plusy)
     throw () __attribute__ ((__deprecated__));
extern int inet6_option_next (const struct cmsghdr *__cmsg,
         uint8_t **__tptrp)
     throw () __attribute__ ((__deprecated__));
extern int inet6_option_find (const struct cmsghdr *__cmsg,
         uint8_t **__tptrp, int __type)
     throw () __attribute__ ((__deprecated__));



extern int inet6_opt_init (void *__extbuf, socklen_t __extlen) throw ();
extern int inet6_opt_append (void *__extbuf, socklen_t __extlen, int __offset,
        uint8_t __type, socklen_t __len, uint8_t __align,
        void **__databufp) throw ();
extern int inet6_opt_finish (void *__extbuf, socklen_t __extlen, int __offset)
     throw ();
extern int inet6_opt_set_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) throw ();
extern int inet6_opt_next (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t *__typep, socklen_t *__lenp,
      void **__databufp) throw ();
extern int inet6_opt_find (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t __type, socklen_t *__lenp,
      void **__databufp) throw ();
extern int inet6_opt_get_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) throw ();



extern socklen_t inet6_rth_space (int __type, int __segments) throw ();
extern void *inet6_rth_init (void *__bp, socklen_t __bp_len, int __type,
        int __segments) throw ();
extern int inet6_rth_add (void *__bp, const struct in6_addr *__addr) throw ();
extern int inet6_rth_reverse (const void *__in, void *__out) throw ();
extern int inet6_rth_segments (const void *__bp) throw ();
extern struct in6_addr *inet6_rth_getaddr (const void *__bp, int __index)
     throw ();





extern int getipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t *__fmode,
    uint32_t *__numsrc, struct in_addr *__slist)
     throw ();


extern int setipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t __fmode,
    uint32_t __numsrc,
    const struct in_addr *__slist)
     throw ();



extern int getsourcefilter (int __s, uint32_t __interface_addr,
       const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t *__fmode,
       uint32_t *__numsrc,
       struct sockaddr_storage *__slist) throw ();


extern int setsourcefilter (int __s, uint32_t __interface_addr,
       const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t __fmode,
       uint32_t __numsrc,
       const struct sockaddr_storage *__slist) throw ();


}
# 9 "src/generate.h" 2
# 1 "/usr/include/arpa/inet.h" 1 3 4
# 30 "/usr/include/arpa/inet.h" 3 4
extern "C" {



extern in_addr_t inet_addr (const char *__cp) throw ();


extern in_addr_t inet_lnaof (struct in_addr __in) throw ();



extern struct in_addr inet_makeaddr (in_addr_t __net, in_addr_t __host)
     throw ();


extern in_addr_t inet_netof (struct in_addr __in) throw ();



extern in_addr_t inet_network (const char *__cp) throw ();



extern char *inet_ntoa (struct in_addr __in) throw ();




extern int inet_pton (int __af, const char *__restrict __cp,
        void *__restrict __buf) throw ();




extern const char *inet_ntop (int __af, const void *__restrict __cp,
         char *__restrict __buf, socklen_t __len)
     throw ();






extern int inet_aton (const char *__cp, struct in_addr *__inp) throw ();



extern char *inet_neta (in_addr_t __net, char *__buf, size_t __len) throw ();




extern char *inet_net_ntop (int __af, const void *__cp, int __bits,
       char *__buf, size_t __len) throw ();




extern int inet_net_pton (int __af, const char *__cp,
     void *__buf, size_t __len) throw ();




extern unsigned int inet_nsap_addr (const char *__cp,
        unsigned char *__buf, int __len) throw ();



extern char *inet_nsap_ntoa (int __len, const unsigned char *__cp,
        char *__buf) throw ();


}
# 10 "src/generate.h" 2
# 1 "/usr/include/c++/5/iostream" 1 3
# 36 "/usr/include/c++/5/iostream" 3
       
# 37 "/usr/include/c++/5/iostream" 3

# 1 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 1 3
# 194 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;




}
# 216 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 482 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/5/bits/os_defines.h" 1 3
# 483 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/5/bits/cpu_defines.h" 1 3
# 486 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 2 3
# 39 "/usr/include/c++/5/iostream" 2 3
# 1 "/usr/include/c++/5/ostream" 1 3
# 36 "/usr/include/c++/5/ostream" 3
       
# 37 "/usr/include/c++/5/ostream" 3

# 1 "/usr/include/c++/5/ios" 1 3
# 36 "/usr/include/c++/5/ios" 3
       
# 37 "/usr/include/c++/5/ios" 3

# 1 "/usr/include/c++/5/iosfwd" 1 3
# 36 "/usr/include/c++/5/iosfwd" 3
       
# 37 "/usr/include/c++/5/iosfwd" 3


# 1 "/usr/include/c++/5/bits/stringfwd.h" 1 3
# 37 "/usr/include/c++/5/bits/stringfwd.h" 3
       
# 38 "/usr/include/c++/5/bits/stringfwd.h" 3


# 1 "/usr/include/c++/5/bits/memoryfwd.h" 1 3
# 46 "/usr/include/c++/5/bits/memoryfwd.h" 3
       
# 47 "/usr/include/c++/5/bits/memoryfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{

# 63 "/usr/include/c++/5/bits/memoryfwd.h" 3
  template<typename>
    class allocator;

  template<>
    class allocator<void>;


  template<typename, typename>
    struct uses_allocator;




}
# 41 "/usr/include/c++/5/bits/stringfwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{








  template<class _CharT>
    struct char_traits;

  template<> struct char_traits<char>;


  template<> struct char_traits<wchar_t>;
# 67 "/usr/include/c++/5/bits/stringfwd.h" 3
namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;


  typedef basic_string<char> string;



  typedef basic_string<wchar_t> wstring;
# 90 "/usr/include/c++/5/bits/stringfwd.h" 3
}




}
# 40 "/usr/include/c++/5/iosfwd" 2 3
# 1 "/usr/include/c++/5/bits/postypes.h" 1 3
# 38 "/usr/include/c++/5/bits/postypes.h" 3
       
# 39 "/usr/include/c++/5/bits/postypes.h" 3

# 1 "/usr/include/c++/5/cwchar" 1 3
# 39 "/usr/include/c++/5/cwchar" 3
       
# 40 "/usr/include/c++/5/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 39 "/usr/include/wchar.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h" 1 3 4
# 40 "/usr/include/wchar.h" 2 3 4
# 51 "/usr/include/wchar.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 357 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 52 "/usr/include/wchar.h" 2 3 4
# 104 "/usr/include/wchar.h" 3 4


typedef __mbstate_t mbstate_t;






# 132 "/usr/include/wchar.h" 3 4
extern "C" {




struct tm;









extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) throw ();


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) throw ();





extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    __locale_t __loc) throw ();

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, __locale_t __loc) throw ();





extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) throw ();








extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        __locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, __locale_t __loc) throw ();


extern wchar_t *wcsdup (const wchar_t *__s) throw () __attribute__ ((__malloc__));





extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));









extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));





extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));


extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcspbrk (const wchar_t *__wcs,
         const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsstr (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsstr (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));






extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (const wchar_t *__s) throw () __attribute__ ((__pure__));





extern "C++" wchar_t *wcswcs (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcswcs (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
# 309 "/usr/include/wchar.h" 3 4
extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));






extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wmemchr (const wchar_t *__s, wchar_t __c,
         size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));






extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();





extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     throw ();






extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();

# 408 "/usr/include/wchar.h" 3 4



extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();






extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (const wchar_t *__s, size_t __n) throw ();






extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();





extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();







extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();






__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();






__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();
# 533 "/usr/include/wchar.h" 3 4
extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     __locale_t __loc) throw ();

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, __locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, __locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, __locale_t __loc)
     throw ();

extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         __locale_t __loc) throw ();






extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) throw ();



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw ();






extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();






extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     throw () ;
# 683 "/usr/include/wchar.h" 3 4









extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;
# 739 "/usr/include/wchar.h" 3 4









extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);

# 804 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 830 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 840 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);







extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) throw ();







extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) throw ();
# 894 "/usr/include/wchar.h" 3 4
}
# 45 "/usr/include/c++/5/cwchar" 2 3
# 62 "/usr/include/c++/5/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 135 "/usr/include/c++/5/cwchar" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;
# 232 "/usr/include/c++/5/cwchar" 3

}







namespace __gnu_cxx
{





  using ::wcstold;
# 257 "/usr/include/c++/5/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 41 "/usr/include/c++/5/bits/postypes.h" 2 3
# 68 "/usr/include/c++/5/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 88 "/usr/include/c++/5/bits/postypes.h" 3
  typedef long streamoff;
# 98 "/usr/include/c++/5/bits/postypes.h" 3
  typedef ptrdiff_t streamsize;
# 111 "/usr/include/c++/5/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 133 "/usr/include/c++/5/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;
# 239 "/usr/include/c++/5/bits/postypes.h" 3

}
# 41 "/usr/include/c++/5/iosfwd" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 74 "/usr/include/c++/5/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

}

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 39 "/usr/include/c++/5/ios" 2 3
# 1 "/usr/include/c++/5/exception" 1 3
# 33 "/usr/include/c++/5/exception" 3
       
# 34 "/usr/include/c++/5/exception" 3

#pragma GCC visibility push(default)


# 1 "/usr/include/c++/5/bits/atomic_lockfree_defines.h" 1 3
# 33 "/usr/include/c++/5/bits/atomic_lockfree_defines.h" 3
       
# 34 "/usr/include/c++/5/bits/atomic_lockfree_defines.h" 3
# 39 "/usr/include/c++/5/exception" 2 3

extern "C++" {

namespace std
{
# 60 "/usr/include/c++/5/exception" 3
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();



    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }



    virtual ~bad_exception() throw();


    virtual const char* what() const throw();
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();
# 102 "/usr/include/c++/5/exception" 3
  void terminate() throw() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();
# 114 "/usr/include/c++/5/exception" 3
  void unexpected() __attribute__ ((__noreturn__));
# 127 "/usr/include/c++/5/exception" 3
  bool uncaught_exception() throw() __attribute__ ((__pure__));


}

namespace __gnu_cxx
{

# 152 "/usr/include/c++/5/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop
# 40 "/usr/include/c++/5/ios" 2 3
# 1 "/usr/include/c++/5/bits/char_traits.h" 1 3
# 37 "/usr/include/c++/5/bits/char_traits.h" 3
       
# 38 "/usr/include/c++/5/bits/char_traits.h" 3

# 1 "/usr/include/c++/5/bits/stl_algobase.h" 1 3
# 60 "/usr/include/c++/5/bits/stl_algobase.h" 3
# 1 "/usr/include/c++/5/bits/functexcept.h" 1 3
# 40 "/usr/include/c++/5/bits/functexcept.h" 3
# 1 "/usr/include/c++/5/bits/exception_defines.h" 1 3
# 41 "/usr/include/c++/5/bits/functexcept.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__))
    __attribute__((__format__(__gnu_printf__, 1, 2)));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 61 "/usr/include/c++/5/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/5/bits/cpp_type_traits.h" 1 3
# 35 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
       
# 36 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
# 68 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
    class __normal_iterator;


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 199 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 270 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };
# 287 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };
# 443 "/usr/include/c++/5/bits/cpp_type_traits.h" 3

}
# 62 "/usr/include/c++/5/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/5/ext/type_traits.h" 1 3
# 32 "/usr/include/c++/5/ext/type_traits.h" 3
       
# 33 "/usr/include/c++/5/ext/type_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }
# 165 "/usr/include/c++/5/ext/type_traits.h" 3
  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
# 63 "/usr/include/c++/5/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/5/ext/numeric_traits.h" 1 3
# 32 "/usr/include/c++/5/ext/numeric_traits.h" 3
       
# 33 "/usr/include/c++/5/ext/numeric_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 54 "/usr/include/c++/5/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 99 "/usr/include/c++/5/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 64 "/usr/include/c++/5/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/5/bits/stl_pair.h" 1 3
# 59 "/usr/include/c++/5/bits/stl_pair.h" 3
# 1 "/usr/include/c++/5/bits/move.h" 1 3
# 34 "/usr/include/c++/5/bits/move.h" 3
# 1 "/usr/include/c++/5/bits/concept_check.h" 1 3
# 33 "/usr/include/c++/5/bits/concept_check.h" 3
       
# 34 "/usr/include/c++/5/bits/concept_check.h" 3
# 35 "/usr/include/c++/5/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r)
    {
      return reinterpret_cast<_Tp*>
 (&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
    }


}
# 159 "/usr/include/c++/5/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 174 "/usr/include/c++/5/bits/move.h" 3
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)




    {

     

      _Tp __tmp = (__a);
      __a = (__b);
      __b = (__tmp);
    }




  template<typename _Tp, size_t _Nm>
    inline void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])



    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 60 "/usr/include/c++/5/bits/stl_pair.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 95 "/usr/include/c++/5/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      pair()
      : first(), second() { }


      pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }



      template<class _U1, class _U2>
 pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }
# 209 "/usr/include/c++/5/bits/stl_pair.h" 3
    };


  template<class _T1, class _T2>
    inline bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<class _T1, class _T2>
    inline bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<class _T1, class _T2>
    inline bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<class _T1, class _T2>
    inline bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<class _T1, class _T2>
    inline bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<class _T1, class _T2>
    inline bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }
# 284 "/usr/include/c++/5/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    inline pair<_T1, _T2>
    make_pair(_T1 __x, _T2 __y)
    { return pair<_T1, _T2>(__x, __y); }





}
# 65 "/usr/include/c++/5/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 1 3
# 62 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
       
# 63 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{

# 89 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 116 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 165 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
  template<typename _Iterator>
    struct iterator_traits
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };



  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }





  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it; }
    };

  template<typename _Iterator>
    struct _Iter_base<_Iterator, true>
    {
      typedef typename _Iterator::iterator_type iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it.base(); }
    };
# 235 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3

}
# 66 "/usr/include/c++/5/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 1 3
# 62 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
       
# 63 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3


# 1 "/usr/include/c++/5/debug/debug.h" 1 3
# 46 "/usr/include/c++/5/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 66 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {

     

      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {

     

      return __last - __first;
    }
# 112 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {

     
      ;
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {

     

      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {

     

      __i += __n;
    }
# 171 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }
# 202 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3

}
# 67 "/usr/include/c++/5/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/5/bits/stl_iterator.h" 1 3
# 66 "/usr/include/c++/5/bits/stl_iterator.h" 3
# 1 "/usr/include/c++/5/bits/ptr_traits.h" 1 3
# 67 "/usr/include/c++/5/bits/stl_iterator.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 96 "/usr/include/c++/5/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;







      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>
        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }
# 160 "/usr/include/c++/5/bits/stl_iterator.h" 3
      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }







      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }







      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 290 "/usr/include/c++/5/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline typename reverse_iterator<_Iterator>::difference_type
    operator-(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() - __x.base(); }

  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _IteratorL, typename _IteratorR>







    inline typename reverse_iterator<_IteratorL>::difference_type
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)

    { return __y.base() - __x.base(); }
# 414 "/usr/include/c++/5/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x) : container(&__x) { }
# 441 "/usr/include/c++/5/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_back(__value);
 return *this;
      }
# 464 "/usr/include/c++/5/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 490 "/usr/include/c++/5/bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 505 "/usr/include/c++/5/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x) : container(&__x) { }
# 531 "/usr/include/c++/5/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_front(__value);
 return *this;
      }
# 554 "/usr/include/c++/5/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 580 "/usr/include/c++/5/bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 599 "/usr/include/c++/5/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x), iter(__i) {}
# 642 "/usr/include/c++/5/bits/stl_iterator.h" 3
      insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }
# 668 "/usr/include/c++/5/bits/stl_iterator.h" 3
      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 694 "/usr/include/c++/5/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }




}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 718 "/usr/include/c++/5/bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      __normal_iterator()
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i)
      : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i)
        : _M_current(__i.base()) { }


      reference
      operator*() const
      { return *_M_current; }

      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int)
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int)
      { return __normal_iterator(_M_current--); }


      reference
      operator[](difference_type __n) const
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(difference_type __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(difference_type __n)
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(difference_type __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
      { return _M_current; }
    };
# 818 "/usr/include/c++/5/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
   
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
   
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
   
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
   
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
   
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
   
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
   
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
   
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
   
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
   
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
   
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
   
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>







    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)

    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
   
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
   
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}
# 68 "/usr/include/c++/5/bits/stl_algobase.h" 2 3



# 1 "/usr/include/c++/5/bits/predefined_ops.h" 1 3
# 33 "/usr/include/c++/5/bits/predefined_ops.h" 3
namespace __gnu_cxx
{
namespace __ops
{
  struct _Iter_less_iter
  {
    template<typename _Iterator1, typename _Iterator2>
     
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
  };
 
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }

  struct _Iter_less_val
  {
    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
    };

  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }

  inline _Iter_less_val
  __iter_comp_val(_Iter_less_iter)
  { return _Iter_less_val(); }

  struct _Val_less_iter
  {
    template<typename _Value, typename _Iterator>
      bool
      operator()(_Value& __val, _Iterator __it) const
      { return __val < *__it; }
    };

  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }

  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }

  struct _Iter_equal_to_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 == *__it2; }
    };

  inline _Iter_equal_to_iter
  __iter_equal_to_iter()
  { return _Iter_equal_to_iter(); }

  struct _Iter_equal_to_val
  {
    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it == __val; }
    };

  inline _Iter_equal_to_val
  __iter_equal_to_val()
  { return _Iter_equal_to_val(); }

  inline _Iter_equal_to_val
  __iter_comp_val(_Iter_equal_to_iter)
  { return _Iter_equal_to_val(); }

  template<typename _Compare>
    struct _Iter_comp_iter
    {
      _Compare _M_comp;
     
      _Iter_comp_iter(_Compare __comp)
 : _M_comp(__comp)
      { }

      template<typename _Iterator1, typename _Iterator2>
       
        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
        { return bool(_M_comp(*__it1, *__it2)); }
    };

  template<typename _Compare>
   
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
    { return _Iter_comp_iter<_Compare>(__comp); }

  template<typename _Compare>
    struct _Iter_comp_val
    {
      _Compare _M_comp;

      _Iter_comp_val(_Compare __comp)
 : _M_comp(__comp)
      { }

      template<typename _Iterator, typename _Value>
 bool
 operator()(_Iterator __it, _Value& __val)
 { return bool(_M_comp(*__it, __val)); }
    };

  template<typename _Compare>
   inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Compare __comp)
    { return _Iter_comp_val<_Compare>(__comp); }

  template<typename _Compare>
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)
    { return _Iter_comp_val<_Compare>(__comp._M_comp); }

  template<typename _Compare>
    struct _Val_comp_iter
    {
      _Compare _M_comp;

      _Val_comp_iter(_Compare __comp)
 : _M_comp(__comp)
      { }

      template<typename _Value, typename _Iterator>
 bool
 operator()(_Value& __val, _Iterator __it)
 { return bool(_M_comp(__val, *__it)); }
    };

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(__comp); }

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
    { return _Val_comp_iter<_Compare>(__comp._M_comp); }

  template<typename _Value>
    struct _Iter_equals_val
    {
      _Value& _M_value;

      _Iter_equals_val(_Value& __value)
 : _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return *__it == _M_value; }
    };

  template<typename _Value>
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
    { return _Iter_equals_val<_Value>(__val); }

  template<typename _Iterator1>
    struct _Iter_equals_iter
    {
      typename std::iterator_traits<_Iterator1>::reference _M_ref;

      _Iter_equals_iter(_Iterator1 __it1)
 : _M_ref(*__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return *__it2 == _M_ref; }
    };

  template<typename _Iterator>
    inline _Iter_equals_iter<_Iterator>
    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)
    { return _Iter_equals_iter<_Iterator>(__it); }

  template<typename _Predicate>
    struct _Iter_pred
    {
      _Predicate _M_pred;

      _Iter_pred(_Predicate __pred)
 : _M_pred(__pred)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
    { return _Iter_pred<_Predicate>(__pred); }

  template<typename _Compare, typename _Value>
    struct _Iter_comp_to_val
    {
      _Compare _M_comp;
      _Value& _M_value;

      _Iter_comp_to_val(_Compare __comp, _Value& __value)
 : _M_comp(__comp), _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_comp(*__it, _M_value)); }
    };

  template<typename _Compare, typename _Value>
    _Iter_comp_to_val<_Compare, _Value>
    __iter_comp_val(_Compare __comp, _Value &__val)
    { return _Iter_comp_to_val<_Compare, _Value>(__comp, __val); }

  template<typename _Compare, typename _Iterator1>
    struct _Iter_comp_to_iter
    {
      _Compare _M_comp;
      typename std::iterator_traits<_Iterator1>::reference _M_ref;

      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)
 : _M_comp(__comp), _M_ref(*__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return bool(_M_comp(*__it2, _M_ref)); }
    };

  template<typename _Compare, typename _Iterator>
    inline _Iter_comp_to_iter<_Compare, _Iterator>
    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)
    { return _Iter_comp_to_iter<_Compare, _Iterator>(__comp._M_comp, __it); }

  template<typename _Predicate>
    struct _Iter_negate
    {
      _Predicate _M_pred;

      _Iter_negate(_Predicate __pred)
 : _M_pred(__pred)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return !bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
    { return _Iter_negate<_Predicate>(__pred._M_pred); }

}
}
# 72 "/usr/include/c++/5/bits/stl_algobase.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  template<bool _BoolType>
    struct __iter_swap
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          typedef typename iterator_traits<_ForwardIterator1>::value_type
            _ValueType1;
          _ValueType1 __tmp = (*__a);
          *__a = (*__b);
          *__b = (__tmp);
 }
    };

  template<>
    struct __iter_swap<true>
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          swap(*__a, *__b);
        }
    };
# 118 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {

     

     



      typedef typename iterator_traits<_ForwardIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator2>::value_type
 _ValueType2;

     

     


      typedef typename iterator_traits<_ForwardIterator1>::reference
 _ReferenceType1;
      typedef typename iterator_traits<_ForwardIterator2>::reference
 _ReferenceType2;
      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 && __are_same<_ValueType1&, _ReferenceType1>::__value
 && __are_same<_ValueType2&, _ReferenceType2>::__value>::
 iter_swap(__a, __b);



    }
# 164 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {

     

     

      ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 192 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<typename _Tp>
   
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {

     

      if (__b < __a)
 return __b;
      return __a;
    }
# 216 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<typename _Tp>
   
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {

     

      if (__a < __b)
 return __b;
      return __a;
    }
# 240 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
   
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 262 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
   
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
    struct _Niter_base
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
    { return std::_Niter_base<_Iterator>::_S_base(__it); }


  template<typename _Iterator>
    struct _Miter_base
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
    { return std::_Miter_base<_Iterator>::_S_base(__it); }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = *__first;
   return __result;
 }
    };
# 330 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };
# 368 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {







   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
                       _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 460 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 512 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };
# 540 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };
# 570 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {







   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
                                _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 636 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     


      ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 694 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      if (const size_t __len = __last - __first)
 __builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
    }
# 738 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {

     

      ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 798 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {

     

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
        static bool
        equal(_II1 __first1, _II1 __last1, _II2 __first2)
        {
   for (; __first1 != __last1; ++__first1, ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
   if (const size_t __len = (__last1 - __first1))
     return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
   return true;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = ((__is_integer<_ValueType1>::__value
         || __is_pointer<_ValueType1>::__value)
                      && __is_pointer<_II1>::__value
                      && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }

  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
        static _II1
        __newlast1(_II1, _II1 __last1, _II2, _II2)
        { return __last1; }

      template<typename _II>
        static bool
        __cnd2(_II __first, _II __last)
        { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
        static _RAI1
        __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
        {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
        static bool
        __cnd2(_RAI, _RAI)
        { return true; }
    };

  template<typename _II1, typename _II2, typename _Compare>
    bool
    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2,
       _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, ++__first2)
 {
   if (__comp(__first1, __first2))
     return true;
   if (__comp(__first2, __first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
        static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 return std::__lexicographical_compare_impl(__first1, __last1,
         __first2, __last2,
     __gnu_cxx::__ops::__iter_less_iter());
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
        static bool
        __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   if (const size_t __len = std::min(__len1, __len2))
     if (int __result = __builtin_memcmp(__first1, __first2, __len))
       return __result < 0;
   return __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 998 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {

     
     

      ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val());
    }



  inline int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline unsigned
  __lg(unsigned __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline unsigned long
  __lg(unsigned long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }

  inline unsigned long long
  __lg(unsigned long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }




# 1055 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {

     
     
     


      ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1087 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }
# 1215 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {





     
     
     
     
      ;
      ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1251 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {

     
     
      ;
      ;

      return std::__lexicographical_compare_impl
 (__first1, __last1, __first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __binary_pred(__first1, __first2))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1294 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {

     
     
     


      ;

      return std::__mismatch(__first1, __last1, __first2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1327 "/usr/include/c++/5/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      return std::__mismatch(__first1, __last1, __first2,
 __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }
# 1427 "/usr/include/c++/5/bits/stl_algobase.h" 3

}
# 40 "/usr/include/c++/5/bits/char_traits.h" 2 3

# 1 "/usr/include/c++/5/cwchar" 1 3
# 39 "/usr/include/c++/5/cwchar" 3
       
# 40 "/usr/include/c++/5/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 45 "/usr/include/c++/5/cwchar" 2 3
# 42 "/usr/include/c++/5/bits/char_traits.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 57 "/usr/include/c++/5/bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 82 "/usr/include/c++/5/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static std::size_t
      length(const char_type* __s);

      static const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>(-1); }

      static int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{

# 226 "/usr/include/c++/5/bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      {

 return (static_cast<unsigned char>(__c1)
  < static_cast<unsigned char>(__c2));
      }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return 0;
 return __builtin_memcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      { return __builtin_strlen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 if (__n == 0)
   return 0;
 return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;
 return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
      }

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }



      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>(-1); }

      static int_type
      not_eof(const int_type& __c)
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return 0;
 return wmemcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      { return wcslen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 if (__n == 0)
   return 0;
 return wmemchr(__s, __a, __n);
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return wmemmove(__s1, __s2, __n);
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return wmemcpy(__s1, __s2, __n);
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;
 return wmemset(__s, __a, __n);
      }

      static char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>((0xffffffffu)); }

      static int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };



}
# 41 "/usr/include/c++/5/ios" 2 3
# 1 "/usr/include/c++/5/bits/localefwd.h" 1 3
# 37 "/usr/include/c++/5/bits/localefwd.h" 3
       
# 38 "/usr/include/c++/5/bits/localefwd.h" 3


# 1 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++locale.h" 1 3
# 39 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++locale.h" 3
       
# 40 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++locale.h" 3

# 1 "/usr/include/c++/5/clocale" 1 3
# 39 "/usr/include/c++/5/clocale" 3
       
# 40 "/usr/include/c++/5/clocale" 3


# 1 "/usr/include/locale.h" 1 3 4
# 28 "/usr/include/locale.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/locale.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4

extern "C" {
# 50 "/usr/include/locale.h" 3 4



struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 120 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) throw ();


extern struct lconv *localeconv (void) throw ();


# 151 "/usr/include/locale.h" 3 4
extern __locale_t newlocale (int __category_mask, const char *__locale,
        __locale_t __base) throw ();
# 186 "/usr/include/locale.h" 3 4
extern __locale_t duplocale (__locale_t __dataset) throw ();



extern void freelocale (__locale_t __dataset) throw ();






extern __locale_t uselocale (__locale_t __dataset) throw ();







}
# 43 "/usr/include/c++/5/clocale" 2 3
# 51 "/usr/include/c++/5/clocale" 3
namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 42 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++locale.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  extern "C" __typeof(uselocale) __uselocale;


}


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __locale_t __c_locale;





  inline int
  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),
     char* __out,
     const int __size __attribute__ ((__unused__)),
     const char* __fmt, ...)
  {

    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 88 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++locale.h" 3
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);


    __gnu_cxx::__uselocale(__old);







    return __ret;
  }


}
# 41 "/usr/include/c++/5/bits/localefwd.h" 2 3

# 1 "/usr/include/c++/5/cctype" 1 3
# 39 "/usr/include/c++/5/cctype" 3
       
# 40 "/usr/include/c++/5/cctype" 3


# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4
extern "C" {
# 46 "/usr/include/ctype.h" 3 4
enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const__));
# 104 "/usr/include/ctype.h" 3 4






extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();








extern int isblank (int) throw ();






extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 271 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, __locale_t) throw ();
extern int isalpha_l (int, __locale_t) throw ();
extern int iscntrl_l (int, __locale_t) throw ();
extern int isdigit_l (int, __locale_t) throw ();
extern int islower_l (int, __locale_t) throw ();
extern int isgraph_l (int, __locale_t) throw ();
extern int isprint_l (int, __locale_t) throw ();
extern int ispunct_l (int, __locale_t) throw ();
extern int isspace_l (int, __locale_t) throw ();
extern int isupper_l (int, __locale_t) throw ();
extern int isxdigit_l (int, __locale_t) throw ();

extern int isblank_l (int, __locale_t) throw ();



extern int __tolower_l (int __c, __locale_t __l) throw ();
extern int tolower_l (int __c, __locale_t __l) throw ();


extern int __toupper_l (int __c, __locale_t __l) throw ();
extern int toupper_l (int __c, __locale_t __l) throw ();
# 347 "/usr/include/ctype.h" 3 4
}
# 43 "/usr/include/c++/5/cctype" 2 3
# 62 "/usr/include/c++/5/cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}
# 43 "/usr/include/c++/5/bits/localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 55 "/usr/include/c++/5/bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);







  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

namespace __cxx11 {
  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;
}

namespace __cxx11 {

  template<typename _CharT>
    class collate;
  template<typename _CharT>
    class collate_byname;
}


  class time_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
}
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;
}
namespace __cxx11 {
  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;
}


  class messages_base;
namespace __cxx11 {
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;
}


}
# 42 "/usr/include/c++/5/ios" 2 3
# 1 "/usr/include/c++/5/bits/ios_base.h" 1 3
# 37 "/usr/include/c++/5/bits/ios_base.h" 3
       
# 38 "/usr/include/c++/5/bits/ios_base.h" 3

# 1 "/usr/include/c++/5/ext/atomicity.h" 1 3
# 32 "/usr/include/c++/5/ext/atomicity.h" 3
       
# 33 "/usr/include/c++/5/ext/atomicity.h" 3


# 1 "/usr/include/x86_64-linux-gnu/c++/5/bits/gthr.h" 1 3
# 30 "/usr/include/x86_64-linux-gnu/c++/5/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 148 "/usr/include/x86_64-linux-gnu/c++/5/bits/gthr.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/5/bits/gthr-default.h" 1 3
# 35 "/usr/include/x86_64-linux-gnu/c++/5/bits/gthr-default.h" 3
# 1 "/usr/include/pthread.h" 1 3 4
# 23 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 28 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 29 "/usr/include/sched.h" 2 3 4





# 1 "/usr/include/time.h" 1 3 4
# 35 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 72 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
struct sched_param
  {
    int __sched_priority;
  };

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


extern int setns (int __fd, int __nstype) throw ();



}







struct __sched_param
  {
    int __sched_priority;
  };
# 118 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 201 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
  throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () ;
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 44 "/usr/include/sched.h" 2 3 4




extern "C" {


extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 118 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 24 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
extern "C" {







# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 38 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 88 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 89 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 42 "/usr/include/time.h" 2 3 4
# 131 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 186 "/usr/include/time.h" 3 4



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();





extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();







extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) throw ();






extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();





extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();





extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();







extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) throw ();
# 319 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 334 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 403 "/usr/include/time.h" 3 4
extern int getdate_err;
# 412 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 426 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 25 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 114 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 155 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 190 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 228 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  throw () __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     throw () __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 494 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 506 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 540 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};




class __pthread_cleanup_class
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;

 public:
  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)
    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (1) { }
  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }
  void __setdoit (int __newval) { __do_it = __newval; }
  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,
        &__cancel_type); }
  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }
};
# 742 "/usr/include/pthread.h" 3 4
struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 806 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 888 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1000 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1044 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1111 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1145 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();
# 1159 "/usr/include/pthread.h" 3 4
}
# 36 "/usr/include/x86_64-linux-gnu/c++/5/bits/gthr-default.h" 2 3
# 47 "/usr/include/x86_64-linux-gnu/c++/5/bits/gthr-default.h" 3
typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 101 "/usr/include/x86_64-linux-gnu/c++/5/bits/gthr-default.h" 3
static __typeof(pthread_once) __gthrw_pthread_once __attribute__ ((__weakref__("pthread_once")));
static __typeof(pthread_getspecific) __gthrw_pthread_getspecific __attribute__ ((__weakref__("pthread_getspecific")));
static __typeof(pthread_setspecific) __gthrw_pthread_setspecific __attribute__ ((__weakref__("pthread_setspecific")));

static __typeof(pthread_create) __gthrw_pthread_create __attribute__ ((__weakref__("pthread_create")));
static __typeof(pthread_join) __gthrw_pthread_join __attribute__ ((__weakref__("pthread_join")));
static __typeof(pthread_equal) __gthrw_pthread_equal __attribute__ ((__weakref__("pthread_equal")));
static __typeof(pthread_self) __gthrw_pthread_self __attribute__ ((__weakref__("pthread_self")));
static __typeof(pthread_detach) __gthrw_pthread_detach __attribute__ ((__weakref__("pthread_detach")));

static __typeof(pthread_cancel) __gthrw_pthread_cancel __attribute__ ((__weakref__("pthread_cancel")));

static __typeof(sched_yield) __gthrw_sched_yield __attribute__ ((__weakref__("sched_yield")));

static __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__ ((__weakref__("pthread_mutex_lock")));
static __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__ ((__weakref__("pthread_mutex_trylock")));

static __typeof(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute__ ((__weakref__("pthread_mutex_timedlock")));

static __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__ ((__weakref__("pthread_mutex_unlock")));
static __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__ ((__weakref__("pthread_mutex_init")));
static __typeof(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute__ ((__weakref__("pthread_mutex_destroy")));

static __typeof(pthread_cond_init) __gthrw_pthread_cond_init __attribute__ ((__weakref__("pthread_cond_init")));
static __typeof(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__ ((__weakref__("pthread_cond_broadcast")));
static __typeof(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute__ ((__weakref__("pthread_cond_signal")));
static __typeof(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__ ((__weakref__("pthread_cond_wait")));
static __typeof(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute__ ((__weakref__("pthread_cond_timedwait")));
static __typeof(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute__ ((__weakref__("pthread_cond_destroy")));

static __typeof(pthread_key_create) __gthrw_pthread_key_create __attribute__ ((__weakref__("pthread_key_create")));
static __typeof(pthread_key_delete) __gthrw_pthread_key_delete __attribute__ ((__weakref__("pthread_key_delete")));
static __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__ ((__weakref__("pthread_mutexattr_init")));
static __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__ ((__weakref__("pthread_mutexattr_settype")));
static __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__ ((__weakref__("pthread_mutexattr_destroy")));
# 236 "/usr/include/x86_64-linux-gnu/c++/5/bits/gthr-default.h" 3
static __typeof(pthread_key_create) __gthrw___pthread_key_create __attribute__ ((__weakref__("__pthread_key_create")));
# 246 "/usr/include/x86_64-linux-gnu/c++/5/bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  static void *const __gthread_active_ptr
    = __extension__ (void *) &__gthrw___pthread_key_create;
  return __gthread_active_ptr != 0;
}
# 658 "/usr/include/x86_64-linux-gnu/c++/5/bits/gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return __gthrw_pthread_create (__threadid, __null, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return __gthrw_pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return __gthrw_pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return __gthrw_pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return __gthrw_pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return __gthrw_sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthrw_pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthrw_pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthrw_pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthrw_pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthrw_pthread_setspecific (__key, __ptr);
}

static inline void
__gthread_mutex_init_function (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    __gthrw_pthread_mutex_init (__mutex, __null);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_trylock (__mutex);
  else
    return 0;
}


static inline int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}


static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 807 "/usr/include/x86_64-linux-gnu/c++/5/bits/gthr-default.h" 3
static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}


static inline int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}


static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_destroy (__mutex);
}
# 849 "/usr/include/x86_64-linux-gnu/c++/5/bits/gthr-default.h" 3
static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return __gthrw_pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_destroy (__cond);
}
# 149 "/usr/include/x86_64-linux-gnu/c++/5/bits/gthr.h" 2 3


#pragma GCC visibility pop
# 36 "/usr/include/c++/5/ext/atomicity.h" 2 3
# 1 "/usr/include/x86_64-linux-gnu/c++/5/bits/atomic_word.h" 1 3
# 32 "/usr/include/x86_64-linux-gnu/c++/5/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 37 "/usr/include/c++/5/ext/atomicity.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __atomic_fetch_add(__mem, __val, 4); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __atomic_fetch_add(__mem, __val, 4); }
# 64 "/usr/include/c++/5/ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }


}
# 40 "/usr/include/c++/5/bits/ios_base.h" 2 3

# 1 "/usr/include/c++/5/bits/locale_classes.h" 1 3
# 37 "/usr/include/c++/5/bits/locale_classes.h" 3
       
# 38 "/usr/include/c++/5/bits/locale_classes.h" 3


# 1 "/usr/include/c++/5/string" 1 3
# 36 "/usr/include/c++/5/string" 3
       
# 37 "/usr/include/c++/5/string" 3




# 1 "/usr/include/c++/5/bits/allocator.h" 1 3
# 46 "/usr/include/c++/5/bits/allocator.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++allocator.h" 1 3
# 33 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++allocator.h" 3
# 1 "/usr/include/c++/5/ext/new_allocator.h" 1 3
# 33 "/usr/include/c++/5/ext/new_allocator.h" 3
# 1 "/usr/include/c++/5/new" 1 3
# 37 "/usr/include/c++/5/new" 3
       
# 38 "/usr/include/c++/5/new" 3




#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };
# 82 "/usr/include/c++/5/new" 3
  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();





}
# 111 "/usr/include/c++/5/new" 3
void* operator new(std::size_t) throw(std::bad_alloc)
  __attribute__((__externally_visible__));
void* operator new[](std::size_t) throw(std::bad_alloc)
  __attribute__((__externally_visible__));
void operator delete(void*) throw()
  __attribute__((__externally_visible__));
void operator delete[](void*) throw()
  __attribute__((__externally_visible__));
void* operator new(std::size_t, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));
void* operator new[](std::size_t, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));
void operator delete(void*, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));


inline void* operator new(std::size_t, void* __p) throw()
{ return __p; }
inline void* operator new[](std::size_t, void* __p) throw()
{ return __p; }


inline void operator delete (void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}

#pragma GCC visibility pop
# 34 "/usr/include/c++/5/ext/new_allocator.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  using std::size_t;
  using std::ptrdiff_t;
# 57 "/usr/include/c++/5/ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };







      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }

      pointer
      address(reference __x) const
      { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const
      { return std::__addressof(__x); }



      pointer
      allocate(size_type __n, const void* = 0)
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();

 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw()
      { return size_t(-1) / sizeof(_Tp); }
# 128 "/usr/include/c++/5/ext/new_allocator.h" 3
      void
      construct(pointer __p, const _Tp& __val)
      { ::new((void *)__p) _Tp(__val); }

      void
      destroy(pointer __p) { __p->~_Tp(); }

    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }


}
# 34 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++allocator.h" 2 3
# 47 "/usr/include/c++/5/bits/allocator.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{








  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };






    };
# 91 "/usr/include/c++/5/bits/allocator.h" 3
  template<typename _Tp>
    class allocator: public __gnu_cxx::new_allocator<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };







      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __gnu_cxx::new_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    throw()
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    throw()
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    throw()
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    throw()
    { return false; }






  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two)
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };
# 226 "/usr/include/c++/5/bits/allocator.h" 3

}
# 42 "/usr/include/c++/5/string" 2 3


# 1 "/usr/include/c++/5/bits/ostream_insert.h" 1 3
# 33 "/usr/include/c++/5/bits/ostream_insert.h" 3
       
# 34 "/usr/include/c++/5/bits/ostream_insert.h" 3


# 1 "/usr/include/c++/5/bits/cxxabi_forced.h" 1 3
# 34 "/usr/include/c++/5/bits/cxxabi_forced.h" 3
       
# 35 "/usr/include/c++/5/bits/cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 37 "/usr/include/c++/5/bits/ostream_insert.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   try
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




}
# 45 "/usr/include/c++/5/string" 2 3



# 1 "/usr/include/c++/5/bits/stl_function.h" 1 3
# 63 "/usr/include/c++/5/bits/stl_function.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 104 "/usr/include/c++/5/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 166 "/usr/include/c++/5/bits/stl_function.h" 3
  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };
# 351 "/usr/include/c++/5/bits/stl_function.h" 3
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };
# 524 "/usr/include/c++/5/bits/stl_function.h" 3
  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };
# 617 "/usr/include/c++/5/bits/stl_function.h" 3
  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };

  template<typename _Tp>
    struct bit_not : public unary_function<_Tp, _Tp>
    {
   
      _Tp
      operator()(const _Tp& __x) const
      { return ~__x; }
    };
# 741 "/usr/include/c++/5/bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
     
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

     
      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
   
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
     
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

     
      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
   
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 818 "/usr/include/c++/5/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity
    : public unary_function<_Tp,_Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };

  template<typename _Pair>
    struct _Select1st
    : public unary_function<_Pair, typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
# 905 "/usr/include/c++/5/bits/stl_function.h" 3
    };

  template<typename _Pair>
    struct _Select2nd
    : public unary_function<_Pair, typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 938 "/usr/include/c++/5/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}


# 1 "/usr/include/c++/5/backward/binders.h" 1 3
# 60 "/usr/include/c++/5/backward/binders.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

namespace std __attribute__ ((__visibility__ ("default")))
{

# 107 "/usr/include/c++/5/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } ;


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } ;


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}

#pragma GCC diagnostic pop
# 1129 "/usr/include/c++/5/bits/stl_function.h" 2 3
# 49 "/usr/include/c++/5/string" 2 3


# 1 "/usr/include/c++/5/bits/range_access.h" 1 3
# 33 "/usr/include/c++/5/bits/range_access.h" 3
       
# 34 "/usr/include/c++/5/bits/range_access.h" 3
# 52 "/usr/include/c++/5/string" 2 3
# 1 "/usr/include/c++/5/bits/basic_string.h" 1 3
# 37 "/usr/include/c++/5/bits/basic_string.h" 3
       
# 38 "/usr/include/c++/5/bits/basic_string.h" 3


# 1 "/usr/include/c++/5/ext/alloc_traits.h" 1 3
# 32 "/usr/include/c++/5/ext/alloc_traits.h" 3
       
# 33 "/usr/include/c++/5/ext/alloc_traits.h" 3
# 41 "/usr/include/c++/5/ext/alloc_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 94 "/usr/include/c++/5/ext/alloc_traits.h" 3
template<typename _Alloc>
  struct __alloc_traits



  {
    typedef _Alloc allocator_type;
# 172 "/usr/include/c++/5/ext/alloc_traits.h" 3
    typedef typename _Alloc::pointer pointer;
    typedef typename _Alloc::const_pointer const_pointer;
    typedef typename _Alloc::value_type value_type;
    typedef typename _Alloc::reference reference;
    typedef typename _Alloc::const_reference const_reference;
    typedef typename _Alloc::size_type size_type;
    typedef typename _Alloc::difference_type difference_type;

    static pointer
    allocate(_Alloc& __a, size_type __n)
    { return __a.allocate(__n); }

    static void deallocate(_Alloc& __a, pointer __p, size_type __n)
    { __a.deallocate(__p, __n); }

    template<typename _Tp>
      static void construct(_Alloc& __a, pointer __p, const _Tp& __arg)
      { __a.construct(__p, __arg); }

    static void destroy(_Alloc& __a, pointer __p)
    { __a.destroy(__p); }

    static size_type max_size(const _Alloc& __a)
    { return __a.max_size(); }

    static const _Alloc& _S_select_on_copy(const _Alloc& __a) { return __a; }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    {


      std::__alloc_swap<_Alloc>::_S_do_it(__a, __b);
    }

    template<typename _Tp>
      struct rebind
      { typedef typename _Alloc::template rebind<_Tp>::other other; };

  };


}
# 41 "/usr/include/c++/5/bits/basic_string.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{



namespace __cxx11 {
# 70 "/usr/include/c++/5/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Char_alloc_type allocator_type;
      typedef typename _Alloc_traits::size_type size_type;
      typedef typename _Alloc_traits::difference_type difference_type;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
       const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;


      static const size_type npos = static_cast<size_type>(-1);

    private:


      typedef iterator __const_iterator;





      struct _Alloc_hider : allocator_type
      {
 _Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
 : allocator_type(__a), _M_p(__dat) { }

 pointer _M_p;
      };

      _Alloc_hider _M_dataplus;
      size_type _M_string_length;

      enum { _S_local_capacity = 15 / sizeof(_CharT) };

      union
      {
 _CharT _M_local_buf[_S_local_capacity + 1];
 size_type _M_allocated_capacity;
      };

      void
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }

      pointer
      _M_data() const
      { return _M_dataplus._M_p; }

      pointer
      _M_local_data()
      {



 return pointer(_M_local_buf);

      }

      const_pointer
      _M_local_data() const
      {



 return const_pointer(_M_local_buf);

      }

      void
      _M_capacity(size_type __capacity)
      { _M_allocated_capacity = __capacity; }

      void
      _M_set_length(size_type __n)
      {
 _M_length(__n);
 traits_type::assign(_M_data()[__n], _CharT());
      }

      bool
      _M_is_local() const
      { return _M_data() == _M_local_data(); }


      pointer
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
 if (!_M_is_local())
   _M_destroy(_M_allocated_capacity);
      }

      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }



      template<typename _InIterator>
        void
        _M_construct_aux(_InIterator __beg, _InIterator __end,
    std::__false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          _M_construct(__beg, __end, _Tag());
 }



      template<typename _Integer>
        void
        _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 { _M_construct_aux_2(static_cast<size_type>(__beg), __end); }

      void
      _M_construct_aux_2(size_type __req, _CharT __c)
      { _M_construct(__req, __c); }

      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   _M_construct_aux(__beg, __end, _Integral());
        }


      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end,
       std::input_iterator_tag);



      template<typename _FwdIterator>
        void
        _M_construct(_FwdIterator __beg, _FwdIterator __end,
       std::forward_iterator_tag);

      void
      _M_construct(size_type __req, _CharT __c);

      allocator_type&
      _M_get_allocator()
      { return _M_dataplus; }

      const allocator_type&
      _M_get_allocator() const
      { return _M_dataplus; }

    private:
# 257 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range_fmt(("%s: __pos (which is %zu) > " "this->size() (which is %zu)")
                                         ,
       __s, __pos, this->size());
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }



      size_type
      _M_limit(size_type __pos, size_type __off) const
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _S_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, ++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
     
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)
      { _S_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
     
      { _S_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2)
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_assign(const basic_string& __rcs);

      void
      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
  size_type __len2);

      void
      _M_erase(size_type __pos, size_type __n);

    public:







      basic_string()



      : _M_dataplus(_M_local_data())
      { _M_set_length(0); }




      explicit
      basic_string(const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      { _M_set_length(0); }





      basic_string(const basic_string& __str)
      : _M_dataplus(_M_local_data(), __str._M_get_allocator())
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
# 410 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     size_type __n = npos)
      : _M_dataplus(_M_local_data())
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 426 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start
   = __str._M_data() + __str._M_check(__pos, "string::string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 444 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s + __n); }






      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }







      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__n, __c); }
# 532 "/usr/include/c++/5/bits/basic_string.h" 3
      template<typename _InputIterator>

        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc())
 : _M_dataplus(_M_local_data(), __a)
 { _M_construct(__beg, __end); }




      ~basic_string()
      { _M_dispose(); }





      basic_string&
      operator=(const basic_string& __str)
      { return this->assign(__str); }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 568 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 610 "/usr/include/c++/5/bits/basic_string.h" 3
      iterator
      begin()
      { return iterator(_M_data()); }





      const_iterator
      begin() const
      { return const_iterator(_M_data()); }





      iterator
      end()
      { return iterator(_M_data() + this->size()); }





      const_iterator
      end() const
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(this->begin()); }
# 710 "/usr/include/c++/5/bits/basic_string.h" 3
    public:



      size_type
      size() const
      { return _M_string_length; }



      size_type
      length() const
      { return _M_string_length; }


      size_type
      max_size() const
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
# 739 "/usr/include/c++/5/bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 752 "/usr/include/c++/5/bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }
# 777 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      capacity() const
      {
 return _M_is_local() ? size_type(_S_local_capacity)
                      : _M_allocated_capacity;
      }
# 801 "/usr/include/c++/5/bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear()
      { _M_set_length(0); }





      bool
      empty() const
      { return this->size() == 0; }
# 830 "/usr/include/c++/5/bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const
      {
 ;
 return _M_data()[__pos];
      }
# 847 "/usr/include/c++/5/bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {


 ;

 ;
 return _M_data()[__pos];
      }
# 868 "/usr/include/c++/5/bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
 return _M_data()[__n];
      }
# 889 "/usr/include/c++/5/bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
 return _M_data()[__n];
      }
# 940 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }
# 981 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str)
      { return _M_append(__str._M_data(), __str.size()); }
# 998 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n)
      { return _M_append(__str._M_data()
    + __str._M_check(__pos, "basic_string::append"),
    __str._M_limit(__pos, __n)); }







      basic_string&
      append(const _CharT* __s, size_type __n)
      {
 ;
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }






      basic_string&
      append(const _CharT* __s)
      {
 ;
 const size_type __n = traits_type::length(__s);
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }
# 1040 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c)
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
# 1067 "/usr/include/c++/5/bits/basic_string.h" 3
      template<class _InputIterator>

        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(end(), end(), __first, __last); }





      void
      push_back(_CharT __c)
      {
 const size_type __size = this->size();
 if (__size + 1 > this->capacity())
   this->_M_mutate(__size, size_type(0), 0, size_type(1));
 traits_type::assign(this->_M_data()[__size], __c);
 this->_M_set_length(__size + 1);
      }






      basic_string&
      assign(const basic_string& __str)
      {
 this->_M_assign(__str);
 return *this;
      }
# 1130 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n)
      { return _M_replace(size_type(0), this->size(), __str._M_data()
     + __str._M_check(__pos, "basic_string::assign"),
     __str._M_limit(__pos, __n)); }
# 1146 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n)
      {
 ;
 return _M_replace(size_type(0), this->size(), __s, __n);
      }
# 1162 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
 ;
 return _M_replace(size_type(0), this->size(), __s,
     traits_type::length(__s));
      }
# 1179 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1195 "/usr/include/c++/5/bits/basic_string.h" 3
      template<class _InputIterator>

        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(begin(), end(), __first, __last); }
# 1250 "/usr/include/c++/5/bits/basic_string.h" 3
      void
      insert(iterator __p, size_type __n, _CharT __c)
      { this->replace(__p, __p, __n, __c); }
# 1293 "/usr/include/c++/5/bits/basic_string.h" 3
      template<class _InputIterator>
        void
        insert(iterator __p, _InputIterator __beg, _InputIterator __end)
        { this->replace(__p, __p, __beg, __end); }
# 1326 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->replace(__pos1, size_type(0),
        __str._M_data(), __str.size()); }
# 1349 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n)
      { return this->replace(__pos1, size_type(0), __str._M_data()
        + __str._M_check(__pos2, "basic_string::insert"),
        __str._M_limit(__pos2, __n)); }
# 1372 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n)
      { return this->replace(__pos, size_type(0), __s, __n); }
# 1391 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
 ;
 return this->replace(__pos, size_type(0), __s,
        traits_type::length(__s));
      }
# 1415 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1433 "/usr/include/c++/5/bits/basic_string.h" 3
      iterator
      insert(__const_iterator __p, _CharT __c)
      {
 ;
 const size_type __pos = __p - begin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 return iterator(_M_data() + __pos);
      }
# 1457 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 this->_M_erase(_M_check(__pos, "basic_string::erase"),
         _M_limit(__pos, __n));
 return *this;
      }
# 1473 "/usr/include/c++/5/bits/basic_string.h" 3
      iterator
      erase(__const_iterator __position)
      {

                           ;
 const size_type __pos = __position - begin();
 this->_M_erase(__pos, size_type(1));
 return iterator(_M_data() + __pos);
      }
# 1492 "/usr/include/c++/5/bits/basic_string.h" 3
      iterator
      erase(__const_iterator __first, __const_iterator __last)
      {

                        ;
        const size_type __pos = __first - begin();
 this->_M_erase(__pos, __last - __first);
 return iterator(this->_M_data() + __pos);
      }
# 1530 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1552 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1577 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2)
      {
 ;
 return _M_replace(_M_check(__pos, "basic_string::replace"),
     _M_limit(__pos, __n1), __s, __n2);
      }
# 1602 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
 ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1626 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1644 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 1664 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __s, size_type __n)
      {

                      ;
 return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
      }
# 1686 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
      {
 ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 1707 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
       _CharT __c)
      {

                      ;
 return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
      }
# 1745 "/usr/include/c++/5/bits/basic_string.h" 3
      template<class _InputIterator>



        basic_string&

        replace(iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {
  
                        ;
   ;
   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
 }




      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       _CharT* __k1, _CharT* __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       iterator __k1, iterator __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 1828 "/usr/include/c++/5/bits/basic_string.h" 3
    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _Integer __n, _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _InputIterator __k1, _InputIterator __k2,
       __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
   const size_type __len2);

      basic_string&
      _M_append(const _CharT* __s, size_type __n);

    public:
# 1866 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 1876 "/usr/include/c++/5/bits/basic_string.h" 3
      void
      swap(basic_string& __s) ;
# 1886 "/usr/include/c++/5/bits/basic_string.h" 3
      const _CharT*
      c_str() const
      { return _M_data(); }







      const _CharT*
      data() const
      { return _M_data(); }




      allocator_type
      get_allocator() const
      { return _M_get_allocator(); }
# 1919 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const;
# 1932 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const

      { return this->find(__str.data(), __pos, __str.size()); }
# 1947 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 1964 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const ;
# 1977 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const

      { return this->rfind(__str.data(), __pos, __str.size()); }
# 1994 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const;
# 2007 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 2024 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const ;
# 2038 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const

      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 2055 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 2068 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 2087 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const
      { return this->find(__c, __pos); }
# 2102 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const

      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 2119 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 2132 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 2151 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const
      { return this->rfind(__c, __pos); }
# 2165 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const

      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2182 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const;
# 2196 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2213 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const
 ;
# 2228 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const

      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2245 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const;
# 2259 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2276 "/usr/include/c++/5/bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const
 ;
# 2292 "/usr/include/c++/5/bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2311 "/usr/include/c++/5/bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2343 "/usr/include/c++/5/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2369 "/usr/include/c++/5/bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2) const;
# 2387 "/usr/include/c++/5/bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const;
# 2411 "/usr/include/c++/5/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 2438 "/usr/include/c++/5/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
  };
}
# 4781 "/usr/include/c++/5/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }
# 4902 "/usr/include/c++/5/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs)
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 4948 "/usr/include/c++/5/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 4985 "/usr/include/c++/5/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 5022 "/usr/include/c++/5/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 5059 "/usr/include/c++/5/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 5096 "/usr/include/c++/5/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 5133 "/usr/include/c++/5/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { __lhs.swap(__rhs); }
# 5152 "/usr/include/c++/5/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 5170 "/usr/include/c++/5/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 5193 "/usr/include/c++/5/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 5210 "/usr/include/c++/5/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str, __is.widen('\n')); }
# 5232 "/usr/include/c++/5/bits/basic_string.h" 3
  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}
# 53 "/usr/include/c++/5/string" 2 3
# 1 "/usr/include/c++/5/bits/basic_string.tcc" 1 3
# 42 "/usr/include/c++/5/bits/basic_string.tcc" 3
       
# 43 "/usr/include/c++/5/bits/basic_string.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s)
    {
      if (this == &__s)
 return;




      std::__alloc_swap<allocator_type>::_S_do_it(_M_get_allocator(),
        __s._M_get_allocator());

      if (_M_is_local())
 if (__s._M_is_local())
   {
     if (length() && __s.length())
       {
  _CharT __tmp_data[_S_local_capacity + 1];
  traits_type::copy(__tmp_data, __s._M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(_M_local_buf, __tmp_data,
      _S_local_capacity + 1);
       }
     else if (__s.length())
       {
  traits_type::copy(_M_local_buf, __s._M_local_buf,
      _S_local_capacity + 1);
  _M_length(__s.length());
  __s._M_set_length(0);
  return;
       }
     else if (length())
       {
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  __s._M_length(length());
  _M_set_length(0);
  return;
       }
   }
 else
   {
     const size_type __tmp_capacity = __s._M_allocated_capacity;
     traits_type::copy(__s._M_local_buf, _M_local_buf,
         _S_local_capacity + 1);
     _M_data(__s._M_data());
     __s._M_data(__s._M_local_buf);
     _M_capacity(__tmp_capacity);
   }
      else
 {
   const size_type __tmp_capacity = _M_allocated_capacity;
   if (__s._M_is_local())
     {
       traits_type::copy(_M_local_buf, __s._M_local_buf,
    _S_local_capacity + 1);
       __s._M_data(_M_data());
       _M_data(_M_local_buf);
     }
   else
     {
       pointer __tmp_ptr = _M_data();
       _M_data(__s._M_data());
       __s._M_data(__tmp_ptr);
       _M_capacity(__s._M_allocated_capacity);
     }
   __s._M_capacity(__tmp_capacity);
 }

      const size_type __tmp_length = length();
      _M_length(__s.length());
      __s._M_length(__tmp_length);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::pointer
    basic_string<_CharT, _Traits, _Alloc>::
    _M_create(size_type& __capacity, size_type __old_capacity)
    {


      if (__capacity > max_size())
 std::__throw_length_error(("basic_string::_M_create"));




      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 {
   __capacity = 2 * __old_capacity;

   if (__capacity > max_size())
     __capacity = max_size();
 }



      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
    }





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::input_iterator_tag)
      {
 size_type __len = 0;
 size_type __capacity = size_type(_S_local_capacity);

 while (__beg != __end && __len < __capacity)
   {
     _M_data()[__len++] = *__beg;
     ++__beg;
   }

 try
   {
     while (__beg != __end)
       {
  if (__len == __capacity)
    {

      __capacity = __len + 1;
      pointer __another = _M_create(__capacity, __len);
      this->_S_copy(__another, _M_data(), __len);
      _M_dispose();
      _M_data(__another);
      _M_capacity(__capacity);
    }
  _M_data()[__len++] = *__beg;
  ++__beg;
       }
   }
 catch(...)
   {
     _M_dispose();
     throw;
   }

 _M_set_length(__len);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::forward_iterator_tag)
      {

 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   std::__throw_logic_error(("basic_string::" "_M_construct null not valid")
                                         );

 size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

 if (__dnew > size_type(_S_local_capacity))
   {
     _M_data(_M_create(__dnew, size_type(0)));
     _M_capacity(__dnew);
   }


 try
   { this->_S_copy_chars(_M_data(), __beg, __end); }
 catch(...)
   {
     _M_dispose();
     throw;
   }

 _M_set_length(__dnew);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_construct(size_type __n, _CharT __c)
    {
      if (__n > size_type(_S_local_capacity))
 {
   _M_data(_M_create(__n, size_type(0)));
   _M_capacity(__n);
 }

      if (__n)
 this->_S_assign(_M_data(), __n, __c);

      _M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_assign(const basic_string& __str)
    {
      if (this != &__str)
 {
   const size_type __rsize = __str.length();
   const size_type __capacity = capacity();

   if (__rsize > __capacity)
     {
       size_type __new_capacity = __rsize;
       pointer __tmp = _M_create(__new_capacity, __capacity);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__new_capacity);
     }

   if (__rsize)
     this->_S_copy(_M_data(), __str._M_data(), __rsize);

   _M_set_length(__rsize);
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {

      if (__res < length())
 __res = length();

      const size_type __capacity = capacity();
      if (__res != __capacity)
 {
   if (__res > __capacity
       || __res > size_type(_S_local_capacity))
     {
       pointer __tmp = _M_create(__res, __capacity);
       this->_S_copy(__tmp, _M_data(), length() + 1);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__res);
     }
   else if (!_M_is_local())
     {
       this->_S_copy(_M_local_data(), _M_data(), length() + 1);
       _M_destroy(__capacity);
       _M_data(_M_local_data());
     }
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
       size_type __len2)
    {
      const size_type __how_much = length() - __pos - __len1;

      size_type __new_capacity = length() + __len2 - __len1;
      pointer __r = _M_create(__new_capacity, capacity());

      if (__pos)
 this->_S_copy(__r, _M_data(), __pos);
      if (__s && __len2)
 this->_S_copy(__r + __pos, __s, __len2);
      if (__how_much)
 this->_S_copy(__r + __pos + __len2,
        _M_data() + __pos + __len1, __how_much);

      _M_dispose();
      _M_data(__r);
      _M_capacity(__new_capacity);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_erase(size_type __pos, size_type __n)
    {
      const size_type __how_much = length() - __pos - __n;

      if (__how_much && __n)
 this->_S_move(_M_data() + __pos, _M_data() + __pos + __n, __how_much);

      _M_set_length(length() - __n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->_M_erase(__n, __size - __n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_append(const _CharT* __s, size_type __n)
    {
      const size_type __len = __n + this->size();

      if (__len <= this->capacity())
 {
   if (__n)
     this->_S_copy(this->_M_data() + this->size(), __s, __n);
 }
      else
 this->_M_mutate(this->size(), size_type(0), __s, __n);

      this->_M_set_length(__len);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
     _InputIterator __k1, _InputIterator __k2,
     std::__false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 return _M_replace(__i1 - begin(), __n1, __s._M_data(),
     __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __n2 - __n1;

      if (__new_size <= this->capacity())
 {
   _CharT* __p = this->_M_data() + __pos1;

   const size_type __how_much = __old_size - __pos1 - __n1;
   if (__how_much && __n1 != __n2)
     this->_S_move(__p + __n2, __p + __n1, __how_much);
 }
      else
 this->_M_mutate(__pos1, __n1, 0, __n2);

      if (__n2)
 this->_S_assign(this->_M_data() + __pos1, __n2, __c);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
        const size_type __len2)
    {
      _M_check_length(__len1, __len2, "basic_string::_M_replace");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;

      if (__new_size <= this->capacity())
 {
   _CharT* __p = this->_M_data() + __pos;

   const size_type __how_much = __old_size - __pos - __len1;
   if (_M_disjunct(__s))
     {
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2)
  this->_S_copy(__p, __s, __len2);
     }
   else
     {

       if (__len2 && __len2 <= __len1)
  this->_S_move(__p, __s, __len2);
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2 > __len1)
  {
    if (__s + __len2 <= __p + __len1)
      this->_S_move(__p, __s, __len2);
    else if (__s >= __p + __len1)
      this->_S_copy(__p, __s + __len2 - __len1, __len2);
    else
      {
        const size_type __nleft = (__p + __len1) - __s;
        this->_S_move(__p, __s, __nleft);
        this->_S_copy(__p + __nleft, __p + __len2,
        __len2 - __nleft);
      }
  }
     }
 }
      else
 this->_M_mutate(__pos, __len1, __s, __len2);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
      ;
      if (__n)
 _S_copy(__s, _M_data() + __pos, __n);

      return __n;
    }
# 1149 "/usr/include/c++/5/bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      const size_type __size = this->size();
      const _CharT* __data = _M_data();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;

      if (__n <= __size)
 {
   for (; __pos <= __size - __n; ++__pos)
     if (traits_type::eq(__data[__pos], __s[0])
  && traits_type::compare(__data + __pos + 1,
     __s + 1, __n - 1) == 0)
       return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const
    {
      ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   try
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }




  extern template class basic_string<char>;
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);


  extern template class basic_string<wchar_t>;
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}
# 54 "/usr/include/c++/5/string" 2 3
# 41 "/usr/include/c++/5/bits/locale_classes.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{

# 62 "/usr/include/c++/5/bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 98 "/usr/include/c++/5/bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 117 "/usr/include/c++/5/bits/locale_classes.h" 3
    locale() throw();
# 126 "/usr/include/c++/5/bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 136 "/usr/include/c++/5/bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 151 "/usr/include/c++/5/bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 192 "/usr/include/c++/5/bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 205 "/usr/include/c++/5/bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 219 "/usr/include/c++/5/bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 234 "/usr/include/c++/5/bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    __attribute ((__abi_tag__ ("cxx11")))
    string
    name() const;
# 254 "/usr/include/c++/5/bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw();







    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 282 "/usr/include/c++/5/bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 298 "/usr/include/c++/5/bits/locale_classes.h" 3
    static locale
    global(const locale& __loc);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 333 "/usr/include/c++/5/bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 6 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);


    static const id* const _S_twinned_facets[];

  };
# 371 "/usr/include/c++/5/bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 402 "/usr/include/c++/5/bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();

  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
          ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    facet(const facet&);

    facet&
    operator=(const facet&);

    class __shim;

    const facet* _M_sso_shim(const id*) const;
    const facet* _M_cow_shim(const id*) const;
  };
# 474 "/usr/include/c++/5/bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
          ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    template<typename _Facet>
      void
      _M_init_facet_unchecked(_Facet* __facet)
      {
 __facet->_M_add_reference();
 _M_facets[_Facet::id._M_id()] = __facet;
      }

    void
    _M_install_cache(const facet*, size_t);

    void _M_init_extra(facet**);
    void _M_init_extra(void*, void*, const char*, const char*);
  };
# 632 "/usr/include/c++/5/bits/locale_classes.h" 3
  template<typename _CharT>
    class __cxx11:: collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 659 "/usr/include/c++/5/bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 673 "/usr/include/c++/5/bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 690 "/usr/include/c++/5/bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 709 "/usr/include/c++/5/bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 723 "/usr/include/c++/5/bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 752 "/usr/include/c++/5/bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 766 "/usr/include/c++/5/bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 779 "/usr/include/c++/5/bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class __cxx11:: collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }







    protected:
      virtual
      ~collate_byname() { }
    };


}

# 1 "/usr/include/c++/5/bits/locale_classes.tcc" 1 3
# 37 "/usr/include/c++/5/bits/locale_classes.tcc" 3
       
# 38 "/usr/include/c++/5/bits/locale_classes.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      try
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      catch(...)
 {
   _M_impl->_M_remove_reference();
   throw;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      try
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      catch(...)
 {
   __tmp->_M_remove_reference();
   throw;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }
# 102 "/usr/include/c++/5/bits/locale_classes.tcc" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }
# 130 "/usr/include/c++/5/bits/locale_classes.tcc" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      try
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      catch(...)
 {
   delete [] __c;
   throw;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }




  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);




}
# 843 "/usr/include/c++/5/bits/locale_classes.h" 2 3
# 42 "/usr/include/c++/5/bits/ios_base.h" 2 3


# 1 "/usr/include/c++/5/stdexcept" 1 3
# 36 "/usr/include/c++/5/stdexcept" 3
       
# 37 "/usr/include/c++/5/stdexcept" 3




namespace std __attribute__ ((__visibility__ ("default")))
{





  struct __cow_string
  {
    union {
      const char* _M_p;
      char _M_bytes[sizeof(const char*)];
    };

    __cow_string();
    __cow_string(const std::string&);
    __cow_string(const char*, size_t);
    __cow_string(const __cow_string&) throw();
    __cow_string& operator=(const __cow_string&) throw();
    ~__cow_string();




  };

  typedef basic_string<char> __sso_string;
# 113 "/usr/include/c++/5/stdexcept" 3
  class logic_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    logic_error(const string& __arg);







    logic_error(const logic_error&) throw();
    logic_error& operator=(const logic_error&) throw();


    virtual ~logic_error() throw();



    virtual const char*
    what() const throw();
  };



  class domain_error : public logic_error
  {
  public:
    explicit domain_error(const string& __arg);



    virtual ~domain_error() throw();
  };


  class invalid_argument : public logic_error
  {
  public:
    explicit invalid_argument(const string& __arg);



    virtual ~invalid_argument() throw();
  };



  class length_error : public logic_error
  {
  public:
    explicit length_error(const string& __arg);



    virtual ~length_error() throw();
  };



  class out_of_range : public logic_error
  {
  public:
    explicit out_of_range(const string& __arg);



    virtual ~out_of_range() throw();
  };






  class runtime_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    runtime_error(const string& __arg);







    runtime_error(const runtime_error&) throw();
    runtime_error& operator=(const runtime_error&) throw();


    virtual ~runtime_error() throw();



    virtual const char*
    what() const throw();
  };


  class range_error : public runtime_error
  {
  public:
    explicit range_error(const string& __arg);



    virtual ~range_error() throw();
  };


  class overflow_error : public runtime_error
  {
  public:
    explicit overflow_error(const string& __arg);



    virtual ~overflow_error() throw();
  };


  class underflow_error : public runtime_error
  {
  public:
    explicit underflow_error(const string& __arg);



    virtual ~underflow_error() throw();
  };




}
# 45 "/usr/include/c++/5/bits/ios_base.h" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{






  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16,
      _S_ios_fmtflags_max = 0x7fffffff,
      _S_ios_fmtflags_min = ~0x7fffffff
    };

  inline _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline const _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16,
      _S_ios_openmode_max = 0x7fffffff,
      _S_ios_openmode_min = ~0x7fffffff
    };

  inline _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }

  inline const _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline const _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline const _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16,
      _S_ios_iostate_max = 0x7fffffff,
      _S_ios_iostate_min = ~0x7fffffff
    };

  inline _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  inline const _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline const _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline const _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }


  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };
# 228 "/usr/include/c++/5/bits/ios_base.h" 3
  class ios_base
  {



    struct system_error : std::runtime_error
    {

      struct error_code
      {
 error_code() { }
      private:
 int _M_value;
 const void* _M_cat;
      } _M_code;
    };


  public:
# 255 "/usr/include/c++/5/bits/ios_base.h" 3
    class __attribute ((__abi_tag__ ("cxx11"))) failure : public system_error
    {
    public:
      explicit
      failure(const string& __str);
# 269 "/usr/include/c++/5/bits/ios_base.h" 3
      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();
    };
# 323 "/usr/include/c++/5/bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 398 "/usr/include/c++/5/bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 429 "/usr/include/c++/5/bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 461 "/usr/include/c++/5/bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;


    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 487 "/usr/include/c++/5/bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 504 "/usr/include/c++/5/bits/ios_base.h" 3
    typedef void (*event_callback) (event __e, ios_base& __b, int __i);
# 516 "/usr/include/c++/5/bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      {

        ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
          {
            ;
          }
        return __res;
      }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 629 "/usr/include/c++/5/bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 645 "/usr/include/c++/5/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 662 "/usr/include/c++/5/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 688 "/usr/include/c++/5/bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 739 "/usr/include/c++/5/bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 751 "/usr/include/c++/5/bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 762 "/usr/include/c++/5/bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 773 "/usr/include/c++/5/bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 792 "/usr/include/c++/5/bits/ios_base.h" 3
    static int
    xalloc() throw();
# 808 "/usr/include/c++/5/bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 829 "/usr/include/c++/5/bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 846 "/usr/include/c++/5/bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();




  private:
    ios_base(const ios_base&);

    ios_base&
    operator=(const ios_base&);
# 873 "/usr/include/c++/5/bits/ios_base.h" 3
  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }
# 1076 "/usr/include/c++/5/bits/ios_base.h" 3

}
# 43 "/usr/include/c++/5/ios" 2 3
# 1 "/usr/include/c++/5/streambuf" 1 3
# 36 "/usr/include/c++/5/streambuf" 3
       
# 37 "/usr/include/c++/5/streambuf" 3
# 45 "/usr/include/c++/5/streambuf" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 119 "/usr/include/c++/5/streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(basic_streambuf*, basic_streambuf*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:







      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 208 "/usr/include/c++/5/streambuf" 3
      locale
      pubimbue(const locale& __loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 225 "/usr/include/c++/5/streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 238 "/usr/include/c++/5/streambuf" 3
      basic_streambuf*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }
# 250 "/usr/include/c++/5/streambuf" 3
      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }
# 262 "/usr/include/c++/5/streambuf" 3
      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }




      int
      pubsync() { return this->sync(); }
# 283 "/usr/include/c++/5/streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 297 "/usr/include/c++/5/streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 315 "/usr/include/c++/5/streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 337 "/usr/include/c++/5/streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 356 "/usr/include/c++/5/streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 371 "/usr/include/c++/5/streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 396 "/usr/include/c++/5/streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 423 "/usr/include/c++/5/streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 449 "/usr/include/c++/5/streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 463 "/usr/include/c++/5/streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 481 "/usr/include/c++/5/streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 497 "/usr/include/c++/5/streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 508 "/usr/include/c++/5/streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 528 "/usr/include/c++/5/streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 544 "/usr/include/c++/5/streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 554 "/usr/include/c++/5/streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 575 "/usr/include/c++/5/streambuf" 3
      virtual void
      imbue(const locale& __loc)
      { }
# 590 "/usr/include/c++/5/streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 601 "/usr/include/c++/5/streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 613 "/usr/include/c++/5/streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 626 "/usr/include/c++/5/streambuf" 3
      virtual int
      sync() { return 0; }
# 648 "/usr/include/c++/5/streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 664 "/usr/include/c++/5/streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 686 "/usr/include/c++/5/streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 699 "/usr/include/c++/5/streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 723 "/usr/include/c++/5/streambuf" 3
      virtual int_type
      pbackfail(int_type __c = traits_type::eof())
      { return traits_type::eof(); }
# 741 "/usr/include/c++/5/streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 767 "/usr/include/c++/5/streambuf" 3
      virtual int_type
      overflow(int_type __c = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 782 "/usr/include/c++/5/streambuf" 3
      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }



      void
      __safe_gbump(streamsize __n) { _M_in_cur += __n; }

      void
      __safe_pbump(streamsize __n) { _M_out_cur += __n; }


    private:



      basic_streambuf(const basic_streambuf&);

      basic_streambuf&
      operator=(const basic_streambuf&);
# 822 "/usr/include/c++/5/streambuf" 3
    };
# 836 "/usr/include/c++/5/streambuf" 3
  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);



}

# 1 "/usr/include/c++/5/bits/streambuf.tcc" 1 3
# 37 "/usr/include/c++/5/bits/streambuf.tcc" 3
       
# 38 "/usr/include/c++/5/bits/streambuf.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->__safe_gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->__safe_pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }




  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);




}
# 851 "/usr/include/c++/5/streambuf" 2 3
# 44 "/usr/include/c++/5/ios" 2 3
# 1 "/usr/include/c++/5/bits/basic_ios.h" 1 3
# 33 "/usr/include/c++/5/bits/basic_ios.h" 3
       
# 34 "/usr/include/c++/5/bits/basic_ios.h" 3



# 1 "/usr/include/c++/5/bits/locale_facets.h" 1 3
# 37 "/usr/include/c++/5/bits/locale_facets.h" 3
       
# 38 "/usr/include/c++/5/bits/locale_facets.h" 3

# 1 "/usr/include/c++/5/cwctype" 1 3
# 39 "/usr/include/c++/5/cwctype" 3
       
# 40 "/usr/include/c++/5/cwctype" 3
# 50 "/usr/include/c++/5/cwctype" 3
# 1 "/usr/include/wctype.h" 1 3 4
# 33 "/usr/include/wctype.h" 3 4
# 1 "/usr/include/wchar.h" 1 3 4
# 34 "/usr/include/wctype.h" 2 3 4
# 49 "/usr/include/wctype.h" 3 4



typedef unsigned long int wctype_t;

# 71 "/usr/include/wctype.h" 3 4
enum
{
  __ISwupper = 0,
  __ISwlower = 1,
  __ISwalpha = 2,
  __ISwdigit = 3,
  __ISwxdigit = 4,
  __ISwspace = 5,
  __ISwprint = 6,
  __ISwgraph = 7,
  __ISwblank = 8,
  __ISwcntrl = 9,
  __ISwpunct = 10,
  __ISwalnum = 11,

  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),
  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),
  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),
  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),
  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),
  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),
  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),
  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),
  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),
  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),
  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),
  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))
};



extern "C" {








extern int iswalnum (wint_t __wc) throw ();





extern int iswalpha (wint_t __wc) throw ();


extern int iswcntrl (wint_t __wc) throw ();



extern int iswdigit (wint_t __wc) throw ();



extern int iswgraph (wint_t __wc) throw ();




extern int iswlower (wint_t __wc) throw ();


extern int iswprint (wint_t __wc) throw ();




extern int iswpunct (wint_t __wc) throw ();




extern int iswspace (wint_t __wc) throw ();




extern int iswupper (wint_t __wc) throw ();




extern int iswxdigit (wint_t __wc) throw ();





extern int iswblank (wint_t __wc) throw ();
# 171 "/usr/include/wctype.h" 3 4
extern wctype_t wctype (const char *__property) throw ();



extern int iswctype (wint_t __wc, wctype_t __desc) throw ();










typedef const __int32_t *wctrans_t;







extern wint_t towlower (wint_t __wc) throw ();


extern wint_t towupper (wint_t __wc) throw ();


}
# 213 "/usr/include/wctype.h" 3 4
extern "C" {




extern wctrans_t wctrans (const char *__property) throw ();


extern wint_t towctrans (wint_t __wc, wctrans_t __desc) throw ();








extern int iswalnum_l (wint_t __wc, __locale_t __locale) throw ();





extern int iswalpha_l (wint_t __wc, __locale_t __locale) throw ();


extern int iswcntrl_l (wint_t __wc, __locale_t __locale) throw ();



extern int iswdigit_l (wint_t __wc, __locale_t __locale) throw ();



extern int iswgraph_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswlower_l (wint_t __wc, __locale_t __locale) throw ();


extern int iswprint_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswpunct_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswspace_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswupper_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswxdigit_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswblank_l (wint_t __wc, __locale_t __locale) throw ();



extern wctype_t wctype_l (const char *__property, __locale_t __locale)
     throw ();



extern int iswctype_l (wint_t __wc, wctype_t __desc, __locale_t __locale)
     throw ();







extern wint_t towlower_l (wint_t __wc, __locale_t __locale) throw ();


extern wint_t towupper_l (wint_t __wc, __locale_t __locale) throw ();



extern wctrans_t wctrans_l (const char *__property, __locale_t __locale)
     throw ();


extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,
      __locale_t __locale) throw ();



}
# 51 "/usr/include/c++/5/cwctype" 2 3
# 80 "/usr/include/c++/5/cwctype" 3
namespace std
{
  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}
# 40 "/usr/include/c++/5/bits/locale_facets.h" 2 3
# 1 "/usr/include/c++/5/cctype" 1 3
# 39 "/usr/include/c++/5/cctype" 3
       
# 40 "/usr/include/c++/5/cctype" 3
# 41 "/usr/include/c++/5/bits/locale_facets.h" 2 3
# 1 "/usr/include/x86_64-linux-gnu/c++/5/bits/ctype_base.h" 1 3
# 36 "/usr/include/x86_64-linux-gnu/c++/5/bits/ctype_base.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = _ISupper;
    static const mask lower = _ISlower;
    static const mask alpha = _ISalpha;
    static const mask digit = _ISdigit;
    static const mask xdigit = _ISxdigit;
    static const mask space = _ISspace;
    static const mask print = _ISprint;
    static const mask graph = _ISalpha | _ISdigit | _ISpunct;
    static const mask cntrl = _IScntrl;
    static const mask punct = _ISpunct;
    static const mask alnum = _ISalpha | _ISdigit;



  };


}
# 42 "/usr/include/c++/5/bits/locale_facets.h" 2 3






# 1 "/usr/include/c++/5/bits/streambuf_iterator.h" 1 3
# 33 "/usr/include/c++/5/bits/streambuf_iterator.h" 3
       
# 34 "/usr/include/c++/5/bits/streambuf_iterator.h" 3




namespace std __attribute__ ((__visibility__ ("default")))
{

# 49 "/usr/include/c++/5/bits/streambuf_iterator.h" 3
  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
                      _CharT*,




        _CharT&>

    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
               istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

    private:







      mutable streambuf_type* _M_sbuf;
      mutable int_type _M_c;

    public:

      istreambuf_iterator() throw()
      : _M_sbuf(0), _M_c(traits_type::eof()) { }
# 112 "/usr/include/c++/5/bits/streambuf_iterator.h" 3
      istreambuf_iterator(istream_type& __s) throw()
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) throw()
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {







 return traits_type::to_char_type(_M_get());
      }


      istreambuf_iterator&
      operator++()
      {


                        ;
 if (_M_sbuf)
   {
     _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {


                        ;

 istreambuf_iterator __old = *this;
 if (_M_sbuf)
   {
     __old._M_c = _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 const int_type __eof = traits_type::eof();
 int_type __ret = __eof;
 if (_M_sbuf)
   {
     if (!traits_type::eq_int_type(_M_c, __eof))
       __ret = _M_c;
     else if (!traits_type::eq_int_type((__ret = _M_sbuf->sgetc()),
            __eof))
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof() const
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(_M_get(), __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) throw()
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) throw()
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const throw()
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
                           ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->__safe_gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof())
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->__safe_gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   if (!traits_type::eq_int_type(__c, traits_type::eof()))
     __first._M_c = __c;
   else
     __first._M_sbuf = 0;
 }
      return __first;
    }




}
# 49 "/usr/include/c++/5/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 71 "/usr/include/c++/5/bits/locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 149 "/usr/include/c++/5/bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 168 "/usr/include/c++/5/bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 185 "/usr/include/c++/5/bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 201 "/usr/include/c++/5/bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 217 "/usr/include/c++/5/bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 231 "/usr/include/c++/5/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 246 "/usr/include/c++/5/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 260 "/usr/include/c++/5/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 275 "/usr/include/c++/5/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 292 "/usr/include/c++/5/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 311 "/usr/include/c++/5/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 330 "/usr/include/c++/5/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 352 "/usr/include/c++/5/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char* __to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 377 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 396 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 415 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 434 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 452 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const = 0;
# 469 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 485 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const = 0;
# 502 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 521 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const = 0;
# 542 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;
# 563 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const = 0;
# 588 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const = 0;
    };
# 611 "/usr/include/c++/5/bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 680 "/usr/include/c++/5/bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 717 "/usr/include/c++/5/bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 730 "/usr/include/c++/5/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 743 "/usr/include/c++/5/bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 758 "/usr/include/c++/5/bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 772 "/usr/include/c++/5/bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 786 "/usr/include/c++/5/bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 801 "/usr/include/c++/5/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 818 "/usr/include/c++/5/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 834 "/usr/include/c++/5/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 851 "/usr/include/c++/5/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 871 "/usr/include/c++/5/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 898 "/usr/include/c++/5/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 929 "/usr/include/c++/5/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 962 "/usr/include/c++/5/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char* __to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1011 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1028 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1044 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1061 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1081 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1104 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }
# 1130 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const
      { return __c; }
# 1156 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const
      {
 __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1181 "/usr/include/c++/5/bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1214 "/usr/include/c++/5/bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1225 "/usr/include/c++/5/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1249 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1268 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1286 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1304 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1321 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1338 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1354 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1371 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1391 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const;
# 1413 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const;
# 1436 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const;
# 1462 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);







    protected:
      virtual
      ~ctype_byname() { };
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);






    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);






    protected:
      virtual
      ~ctype_byname();
    };



}


# 1 "/usr/include/x86_64-linux-gnu/c++/5/bits/ctype_inline.h" 1 3
# 37 "/usr/include/x86_64-linux-gnu/c++/5/bits/ctype_inline.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return _M_table[static_cast<unsigned char>(__c)] & __m; }

  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && !(_M_table[static_cast<unsigned char>(*__low)] & __m))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)
      ++__low;
    return __low;
  }


}
# 1535 "/usr/include/c++/5/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class __num_base
  {
  public:


    enum
      {
 _S_ominus,
 _S_oplus,
 _S_ox,
 _S_oX,
 _S_odigits,
 _S_odigits_end = _S_odigits + 16,
 _S_oudigits = _S_odigits_end,
 _S_oudigits_end = _S_oudigits + 16,
 _S_oe = _S_odigits + 14,
 _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0)
      : facet(__refs), _M_grouping(0), _M_grouping_size(0),
 _M_use_grouping(false),
 _M_truename(0), _M_truename_size(0), _M_falsename(0),
 _M_falsename_size(0), _M_decimal_point(_CharT()),
 _M_thousands_sep(_CharT()), _M_allocated(false)
 { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }

namespace __cxx11 {
# 1665 "/usr/include/c++/5/bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(); }
# 1703 "/usr/include/c++/5/bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1717 "/usr/include/c++/5/bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(__cloc); }
# 1731 "/usr/include/c++/5/bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1744 "/usr/include/c++/5/bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1775 "/usr/include/c++/5/bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1788 "/usr/include/c++/5/bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1801 "/usr/include/c++/5/bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1818 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1830 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1843 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1856 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1869 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }







    protected:
      virtual
      ~numpunct_byname() { }
    };

}


# 1947 "/usr/include/c++/5/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1968 "/usr/include/c++/5/bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1994 "/usr/include/c++/5/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2031 "/usr/include/c++/5/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2091 "/usr/include/c++/5/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2134 "/usr/include/c++/5/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      __attribute ((__abi_tag__ ("cxx11")))
      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
 __attribute ((__abi_tag__ ("cxx11")))
 iter_type
 _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
 _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
 _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2207 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;
# 2270 "/usr/include/c++/5/bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2288 "/usr/include/c++/5/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2309 "/usr/include/c++/5/bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2327 "/usr/include/c++/5/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2369 "/usr/include/c++/5/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __io, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2432 "/usr/include/c++/5/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2457 "/usr/include/c++/5/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __io, __fill, __v); }

    protected:
      template<typename _ValueT>
 iter_type
 _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
 iter_type
 _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { };
# 2505 "/usr/include/c++/5/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, double) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type, long double) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, const void*) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;









  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }
# 2637 "/usr/include/c++/5/bits/locale_facets.h" 3
  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }


}

# 1 "/usr/include/c++/5/bits/locale_facets.tcc" 1 3
# 33 "/usr/include/c++/5/bits/locale_facets.tcc" 3
       
# 34 "/usr/include/c++/5/bits/locale_facets.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = 0;
     try
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     catch(...)
       {
  delete __tmp;
  throw;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      try
 {
   const string& __g = __np.grouping();
   _M_grouping_size = __g.size();
   __grouping = new char[_M_grouping_size];
   __g.copy(__grouping, _M_grouping_size);
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(__grouping[0]) > 0
        && (__grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   const basic_string<_CharT>& __tn = __np.truename();
   _M_truename_size = __tn.size();
   __truename = new _CharT[_M_truename_size];
   __tn.copy(__truename, _M_truename_size);

   const basic_string<_CharT>& __fn = __np.falsename();
   _M_falsename_size = __fn.size();
   __falsename = new _CharT[_M_falsename_size];
   __fn.copy(__falsename, _M_falsename_size);

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);

   _M_grouping = __grouping;
   _M_truename = __truename;
   _M_falsename = __falsename;
   _M_allocated = true;
 }
      catch(...)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
   throw;
 }
    }
# 139 "/usr/include/c++/5/bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    __attribute ((__abi_tag__ ("cxx11")))
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      __attribute ((__abi_tag__ ("cxx11")))
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
   ? -__gnu_cxx::__numeric_traits<_ValueT>::__min
   : __gnu_cxx::__numeric_traits<_ValueT>::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative
  && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__min;
     else
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 735 "/usr/include/c++/5/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 971 "/usr/include/c++/5/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);



 const bool __use_prec =
   (__io.flags() & ios_base::floatfield) != ios_base::floatfield;



 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 if (__use_prec)
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __prec, __v);
 else
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     if (__use_prec)
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __prec, __v);
     else
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __v);
   }
# 1044 "/usr/include/c++/5/bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1169 "/usr/include/c++/5/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }


# 1206 "/usr/include/c++/5/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }




  extern template class __cxx11:: numpunct<char>;
  extern template class __cxx11:: numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class __cxx11:: numpunct<wchar_t>;
  extern template class __cxx11:: numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);




}
# 2652 "/usr/include/c++/5/bits/locale_facets.h" 2 3
# 38 "/usr/include/c++/5/bits/basic_ios.h" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 66 "/usr/include/c++/5/bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:
# 120 "/usr/include/c++/5/bits/basic_ios.h" 3
      operator void*() const
      { return this->fail() ? 0 : const_cast<basic_ios*>(this); }


      bool
      operator!() const
      { return this->fail(); }
# 136 "/usr/include/c++/5/bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 147 "/usr/include/c++/5/bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
   throw;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 200 "/usr/include/c++/5/bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 221 "/usr/include/c++/5/bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 256 "/usr/include/c++/5/bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 294 "/usr/include/c++/5/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 306 "/usr/include/c++/5/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 346 "/usr/include/c++/5/bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 360 "/usr/include/c++/5/bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 389 "/usr/include/c++/5/bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 409 "/usr/include/c++/5/bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 429 "/usr/include/c++/5/bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 448 "/usr/include/c++/5/bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);
# 509 "/usr/include/c++/5/bits/basic_ios.h" 3
      void
      _M_cache_locale(const locale& __loc);
    };


}

# 1 "/usr/include/c++/5/bits/basic_ios.tcc" 1 3
# 33 "/usr/include/c++/5/bits/basic_ios.tcc" 3
       
# 34 "/usr/include/c++/5/bits/basic_ios.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 146 "/usr/include/c++/5/bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = &use_facet<__ctype_type>(__loc);
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = &use_facet<__num_put_type>(__loc);
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = &use_facet<__num_get_type>(__loc);
      else
 _M_num_get = 0;
    }




  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;




}
# 517 "/usr/include/c++/5/bits/basic_ios.h" 2 3
# 45 "/usr/include/c++/5/ios" 2 3
# 39 "/usr/include/c++/5/ostream" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{

# 57 "/usr/include/c++/5/ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 83 "/usr/include/c++/5/ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 107 "/usr/include/c++/5/ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 165 "/usr/include/c++/5/ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }
# 219 "/usr/include/c++/5/ostream" 3
      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }
# 244 "/usr/include/c++/5/ostream" 3
      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 269 "/usr/include/c++/5/ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 302 "/usr/include/c++/5/ostream" 3
      __ostream_type&
      put(char_type __c);






      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 334 "/usr/include/c++/5/ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 347 "/usr/include/c++/5/ostream" 3
      __ostream_type&
      flush();
# 357 "/usr/include/c++/5/ostream" 3
      pos_type
      tellp();
# 368 "/usr/include/c++/5/ostream" 3
      __ostream_type&
      seekp(pos_type);
# 380 "/usr/include/c++/5/ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }
# 413 "/usr/include/c++/5/ostream" 3
      template<typename _ValueT>
 __ostream_type&
 _M_insert(_ValueT __v);
    };
# 425 "/usr/include/c++/5/ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 444 "/usr/include/c++/5/ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 454 "/usr/include/c++/5/ostream" 3
      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 475 "/usr/include/c++/5/ostream" 3
      operator bool() const
      { return _M_ok; }
    };
# 495 "/usr/include/c++/5/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 537 "/usr/include/c++/5/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 588 "/usr/include/c++/5/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
# 600 "/usr/include/c++/5/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
# 635 "/usr/include/c++/5/ostream" 3

}

# 1 "/usr/include/c++/5/bits/ostream.tcc" 1 3
# 37 "/usr/include/c++/5/bits/ostream.tcc" 3
       
# 38 "/usr/include/c++/5/bits/ostream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   try
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   try
     { _M_write(__s, __n); }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      try
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   try
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }




  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);




}
# 639 "/usr/include/c++/5/ostream" 2 3
# 40 "/usr/include/c++/5/iostream" 2 3
# 1 "/usr/include/c++/5/istream" 1 3
# 36 "/usr/include/c++/5/istream" 3
       
# 37 "/usr/include/c++/5/istream" 3




namespace std __attribute__ ((__visibility__ ("default")))
{

# 57 "/usr/include/c++/5/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:







      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 119 "/usr/include/c++/5/istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 167 "/usr/include/c++/5/istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }
# 213 "/usr/include/c++/5/istream" 3
      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }
# 234 "/usr/include/c++/5/istream" 3
      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 258 "/usr/include/c++/5/istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 268 "/usr/include/c++/5/istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 301 "/usr/include/c++/5/istream" 3
      int_type
      get();
# 315 "/usr/include/c++/5/istream" 3
      __istream_type&
      get(char_type& __c);
# 342 "/usr/include/c++/5/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 353 "/usr/include/c++/5/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 376 "/usr/include/c++/5/istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 386 "/usr/include/c++/5/istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 415 "/usr/include/c++/5/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 426 "/usr/include/c++/5/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 450 "/usr/include/c++/5/istream" 3
      __istream_type&
      ignore(streamsize __n, int_type __delim);

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore();
# 467 "/usr/include/c++/5/istream" 3
      int_type
      peek();
# 485 "/usr/include/c++/5/istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 504 "/usr/include/c++/5/istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 521 "/usr/include/c++/5/istream" 3
      __istream_type&
      putback(char_type __c);
# 537 "/usr/include/c++/5/istream" 3
      __istream_type&
      unget();
# 555 "/usr/include/c++/5/istream" 3
      int
      sync();
# 570 "/usr/include/c++/5/istream" 3
      pos_type
      tellg();
# 585 "/usr/include/c++/5/istream" 3
      __istream_type&
      seekg(pos_type);
# 601 "/usr/include/c++/5/istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }
# 639 "/usr/include/c++/5/istream" 3
      template<typename _ValueT>
 __istream_type&
 _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 685 "/usr/include/c++/5/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 721 "/usr/include/c++/5/istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 734 "/usr/include/c++/5/istream" 3
      operator bool() const
      { return _M_ok; }
    };
# 750 "/usr/include/c++/5/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 792 "/usr/include/c++/5/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 823 "/usr/include/c++/5/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }
# 884 "/usr/include/c++/5/istream" 3
    };
# 906 "/usr/include/c++/5/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);
# 931 "/usr/include/c++/5/istream" 3

}

# 1 "/usr/include/c++/5/bits/istream.tcc" 1 3
# 37 "/usr/include/c++/5/bits/istream.tcc" 3
       
# 38 "/usr/include/c++/5/bits/istream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 {
   if (__in.tie())
     __in.tie()->flush();
   if (!__noskip && bool(__in.flags() & ios_base::skipws))
     {
       const __int_type __eof = traits_type::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       const __ctype_type& __ct = __check_facet(__in._M_ctype);
       while (!traits_type::eq_int_type(__c, __eof)
       && __ct.is(ctype_base::space,
    traits_type::to_char_type(__c)))
  __c = __sb->snextc();




       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
 }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   try
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::failbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          try
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 513 "/usr/include/c++/5/bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       if (!this->fail())
  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
        ios_base::in);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekpos(__pos,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }




  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;




}
# 935 "/usr/include/c++/5/istream" 2 3
# 41 "/usr/include/c++/5/iostream" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 60 "/usr/include/c++/5/iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;


}
# 11 "src/generate.h" 2
# 1 "/usr/include/c++/5/fstream" 1 3
# 36 "/usr/include/c++/5/fstream" 3
       
# 37 "/usr/include/c++/5/fstream" 3



# 1 "/usr/include/c++/5/bits/codecvt.h" 1 3
# 39 "/usr/include/c++/5/bits/codecvt.h" 3
       
# 40 "/usr/include/c++/5/bits/codecvt.h" 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class codecvt_base
  {
  public:
    enum result
    {
      ok,
      partial,
      error,
      noconv
    };
  };
# 67 "/usr/include/c++/5/bits/codecvt.h" 3
  template<typename _InternT, typename _ExternT, typename _StateT>
    class __codecvt_abstract_base
    : public locale::facet, public codecvt_base
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;
# 115 "/usr/include/c++/5/bits/codecvt.h" 3
      result
      out(state_type& __state, const intern_type* __from,
   const intern_type* __from_end, const intern_type*& __from_next,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const
      {
 return this->do_out(__state, __from, __from_end, __from_next,
       __to, __to_end, __to_next);
      }
# 154 "/usr/include/c++/5/bits/codecvt.h" 3
      result
      unshift(state_type& __state, extern_type* __to, extern_type* __to_end,
       extern_type*& __to_next) const
      { return this->do_unshift(__state, __to,__to_end,__to_next); }
# 195 "/usr/include/c++/5/bits/codecvt.h" 3
      result
      in(state_type& __state, const extern_type* __from,
  const extern_type* __from_end, const extern_type*& __from_next,
  intern_type* __to, intern_type* __to_end,
  intern_type*& __to_next) const
      {
 return this->do_in(__state, __from, __from_end, __from_next,
      __to, __to_end, __to_next);
      }

      int
      encoding() const throw()
      { return this->do_encoding(); }

      bool
      always_noconv() const throw()
      { return this->do_always_noconv(); }

      int
      length(state_type& __state, const extern_type* __from,
      const extern_type* __end, size_t __max) const
      { return this->do_length(__state, __from, __end, __max); }

      int
      max_length() const throw()
      { return this->do_max_length(); }

    protected:
      explicit
      __codecvt_abstract_base(size_t __refs = 0) : locale::facet(__refs) { }

      virtual
      ~__codecvt_abstract_base() { }
# 236 "/usr/include/c++/5/bits/codecvt.h" 3
      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const = 0;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const = 0;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const = 0;

      virtual int
      do_encoding() const throw() = 0;

      virtual bool
      do_always_noconv() const throw() = 0;

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const = 0;

      virtual int
      do_max_length() const throw() = 0;
    };
# 273 "/usr/include/c++/5/bits/codecvt.h" 3
   template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt
    : public __codecvt_abstract_base<_InternT, _ExternT, _StateT>
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<_InternT, _ExternT, _StateT> (__refs),
 _M_c_locale_codecvt(0)
      { }

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt() { }

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };

  template<typename _InternT, typename _ExternT, typename _StateT>
    locale::id codecvt<_InternT, _ExternT, _StateT>::id;


  template<>
    class codecvt<char, char, mbstate_t>
    : public __codecvt_abstract_base<char, char, mbstate_t>
    {
      friend class messages<char>;

    public:

      typedef char intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
  };






  template<>
    class codecvt<wchar_t, char, mbstate_t>
    : public __codecvt_abstract_base<wchar_t, char, mbstate_t>
    {
      friend class messages<wchar_t>;

    public:

      typedef wchar_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };
# 581 "/usr/include/c++/5/bits/codecvt.h" 3
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT>
    {
    public:
      explicit
      codecvt_byname(const char* __s, size_t __refs = 0)
      : codecvt<_InternT, _ExternT, _StateT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_codecvt);
     this->_S_create_c_locale(this->_M_c_locale_codecvt, __s);
   }
      }







    protected:
      virtual
      ~codecvt_byname() { }
    };
# 649 "/usr/include/c++/5/bits/codecvt.h" 3
  extern template class codecvt_byname<char, char, mbstate_t>;

  extern template
    const codecvt<char, char, mbstate_t>&
    use_facet<codecvt<char, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<char, char, mbstate_t> >(const locale&);


  extern template class codecvt_byname<wchar_t, char, mbstate_t>;

  extern template
    const codecvt<wchar_t, char, mbstate_t>&
    use_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);
# 678 "/usr/include/c++/5/bits/codecvt.h" 3

}
# 41 "/usr/include/c++/5/fstream" 2 3
# 1 "/usr/include/c++/5/cstdio" 1 3
# 39 "/usr/include/c++/5/cstdio" 3
       
# 40 "/usr/include/c++/5/cstdio" 3
# 96 "/usr/include/c++/5/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;


  using ::gets;

  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;

  using ::tmpnam;

  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 157 "/usr/include/c++/5/cstdio" 3
namespace __gnu_cxx
{
# 175 "/usr/include/c++/5/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 42 "/usr/include/c++/5/fstream" 2 3
# 1 "/usr/include/x86_64-linux-gnu/c++/5/bits/basic_file.h" 1 3
# 37 "/usr/include/x86_64-linux-gnu/c++/5/bits/basic_file.h" 3
       
# 38 "/usr/include/x86_64-linux-gnu/c++/5/bits/basic_file.h" 3


# 1 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++io.h" 1 3
# 35 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++io.h" 3
# 1 "/usr/include/c++/5/cstdio" 1 3
# 39 "/usr/include/c++/5/cstdio" 3
       
# 40 "/usr/include/c++/5/cstdio" 3
# 36 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++io.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __gthread_mutex_t __c_lock;


  typedef FILE __c_file;


}
# 41 "/usr/include/x86_64-linux-gnu/c++/5/bits/basic_file.h" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _CharT>
    class __basic_file;


  template<>
    class __basic_file<char>
    {

      __c_file* _M_cfile;


      bool _M_cfile_created;

    public:
      __basic_file(__c_lock* __lock = 0) throw ();
# 84 "/usr/include/x86_64-linux-gnu/c++/5/bits/basic_file.h" 3
      __basic_file*
      open(const char* __name, ios_base::openmode __mode, int __prot = 0664);

      __basic_file*
      sys_open(__c_file* __file, ios_base::openmode);

      __basic_file*
      sys_open(int __fd, ios_base::openmode __mode) throw ();

      __basic_file*
      close();

      __attribute__ ((__pure__)) bool
      is_open() const throw ();

      __attribute__ ((__pure__)) int
      fd() throw ();

      __attribute__ ((__pure__)) __c_file*
      file() throw ();

      ~__basic_file();

      streamsize
      xsputn(const char* __s, streamsize __n);

      streamsize
      xsputn_2(const char* __s1, streamsize __n1,
        const char* __s2, streamsize __n2);

      streamsize
      xsgetn(char* __s, streamsize __n);

      streamoff
      seekoff(streamoff __off, ios_base::seekdir __way) throw ();

      int
      sync();

      streamsize
      showmanyc();
    };


}
# 43 "/usr/include/c++/5/fstream" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{

# 71 "/usr/include/c++/5/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_filebuf : public basic_streambuf<_CharT, _Traits>
    {
# 88 "/usr/include/c++/5/fstream" 3
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef __basic_file<char> __file_type;
      typedef typename traits_type::state_type __state_type;
      typedef codecvt<char_type, char, __state_type> __codecvt_type;

      friend class ios_base;

    protected:


      __c_lock _M_lock;


      __file_type _M_file;


      ios_base::openmode _M_mode;


      __state_type _M_state_beg;




      __state_type _M_state_cur;



      __state_type _M_state_last;


      char_type* _M_buf;






      size_t _M_buf_size;


      bool _M_buf_allocated;
# 147 "/usr/include/c++/5/fstream" 3
      bool _M_reading;
      bool _M_writing;







      char_type _M_pback;
      char_type* _M_pback_cur_save;
      char_type* _M_pback_end_save;
      bool _M_pback_init;



      const __codecvt_type* _M_codecvt;






      char* _M_ext_buf;




      streamsize _M_ext_buf_size;






      const char* _M_ext_next;
      char* _M_ext_end;






      void
      _M_create_pback()
      {
 if (!_M_pback_init)
   {
     _M_pback_cur_save = this->gptr();
     _M_pback_end_save = this->egptr();
     this->setg(&_M_pback, &_M_pback, &_M_pback + 1);
     _M_pback_init = true;
   }
      }






      void
      _M_destroy_pback() throw()
      {
 if (_M_pback_init)
   {

     _M_pback_cur_save += this->gptr() != this->eback();
     this->setg(_M_buf, _M_pback_cur_save, _M_pback_end_save);
     _M_pback_init = false;
   }
      }

    public:







      basic_filebuf();
# 237 "/usr/include/c++/5/fstream" 3
      virtual
      ~basic_filebuf()
      { this->close(); }
# 251 "/usr/include/c++/5/fstream" 3
      bool
      is_open() const throw()
      { return _M_file.is_open(); }
# 296 "/usr/include/c++/5/fstream" 3
      __filebuf_type*
      open(const char* __s, ios_base::openmode __mode);
# 323 "/usr/include/c++/5/fstream" 3
      __filebuf_type*
      close();

    protected:
      void
      _M_allocate_internal_buffer();

      void
      _M_destroy_internal_buffer() throw();


      virtual streamsize
      showmanyc();






      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = _Traits::eof());
# 355 "/usr/include/c++/5/fstream" 3
      virtual int_type
      overflow(int_type __c = _Traits::eof());



      bool
      _M_convert_to_external(char_type*, streamsize);
# 375 "/usr/include/c++/5/fstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n);

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __pos,
       ios_base::openmode __mode = ios_base::in | ios_base::out);


      pos_type
      _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state);

      int
      _M_get_ext_pos(__state_type &__state);

      virtual int
      sync();

      virtual void
      imbue(const locale& __loc);

      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);

      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);


      bool
      _M_terminate_output();
# 421 "/usr/include/c++/5/fstream" 3
      void
      _M_set_buffer(streamsize __off)
      {
 const bool __testin = _M_mode & ios_base::in;
 const bool __testout = (_M_mode & ios_base::out
    || _M_mode & ios_base::app);

 if (__testin && __off > 0)
   this->setg(_M_buf, _M_buf, _M_buf + __off);
 else
   this->setg(_M_buf, _M_buf, _M_buf);

 if (__testout && __off == 0 && _M_buf_size > 1 )
   this->setp(_M_buf, _M_buf + _M_buf_size - 1);
 else
   this->setp(0, 0);
      }
    };
# 454 "/usr/include/c++/5/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ifstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 481 "/usr/include/c++/5/fstream" 3
      basic_ifstream() : __istream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 494 "/usr/include/c++/5/fstream" 3
      explicit
      basic_ifstream(const char* __s, ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 533 "/usr/include/c++/5/fstream" 3
      ~basic_ifstream()
      { }
# 565 "/usr/include/c++/5/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 594 "/usr/include/c++/5/fstream" 3
      void
      open(const char* __s, ios_base::openmode __mode = ios_base::in)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::in))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 632 "/usr/include/c++/5/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 655 "/usr/include/c++/5/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ofstream : public basic_ostream<_CharT,_Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 682 "/usr/include/c++/5/fstream" 3
      basic_ofstream(): __ostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 696 "/usr/include/c++/5/fstream" 3
      explicit
      basic_ofstream(const char* __s,
       ios_base::openmode __mode = ios_base::out|ios_base::trunc)
      : __ostream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 737 "/usr/include/c++/5/fstream" 3
      ~basic_ofstream()
      { }
# 769 "/usr/include/c++/5/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 798 "/usr/include/c++/5/fstream" 3
      void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::out | ios_base::trunc)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::out))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 838 "/usr/include/c++/5/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 861 "/usr/include/c++/5/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_fstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ios<char_type, traits_type> __ios_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 889 "/usr/include/c++/5/fstream" 3
      basic_fstream()
      : __iostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 901 "/usr/include/c++/5/fstream" 3
      explicit
      basic_fstream(const char* __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __iostream_type(0), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 939 "/usr/include/c++/5/fstream" 3
      ~basic_fstream()
      { }
# 971 "/usr/include/c++/5/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 1000 "/usr/include/c++/5/fstream" 3
      void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 1040 "/usr/include/c++/5/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 1078 "/usr/include/c++/5/fstream" 3

}

# 1 "/usr/include/c++/5/bits/fstream.tcc" 1 3
# 37 "/usr/include/c++/5/bits/fstream.tcc" 3
       
# 38 "/usr/include/c++/5/bits/fstream.tcc" 3




namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_allocate_internal_buffer()
    {


      if (!_M_buf_allocated && !_M_buf)
 {
   _M_buf = new char_type[_M_buf_size];
   _M_buf_allocated = true;
 }
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_destroy_internal_buffer() throw()
    {
      if (_M_buf_allocated)
 {
   delete [] _M_buf;
   _M_buf = 0;
   _M_buf_allocated = false;
 }
      delete [] _M_ext_buf;
      _M_ext_buf = 0;
      _M_ext_buf_size = 0;
      _M_ext_next = 0;
      _M_ext_end = 0;
    }

  template<typename _CharT, typename _Traits>
    basic_filebuf<_CharT, _Traits>::
    basic_filebuf() : __streambuf_type(), _M_lock(), _M_file(&_M_lock),
    _M_mode(ios_base::openmode(0)), _M_state_beg(), _M_state_cur(),
    _M_state_last(), _M_buf(0), _M_buf_size(8192),
    _M_buf_allocated(false), _M_reading(false), _M_writing(false), _M_pback(),
    _M_pback_cur_save(0), _M_pback_end_save(0), _M_pback_init(false),
    _M_codecvt(0), _M_ext_buf(0), _M_ext_buf_size(0), _M_ext_next(0),
    _M_ext_end(0)
    {
      if (has_facet<__codecvt_type>(this->_M_buf_locale))
 _M_codecvt = &use_facet<__codecvt_type>(this->_M_buf_locale);
    }
# 176 "/usr/include/c++/5/bits/fstream.tcc" 3
  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    open(const char* __s, ios_base::openmode __mode)
    {
      __filebuf_type *__ret = 0;
      if (!this->is_open())
 {
   _M_file.open(__s, __mode);
   if (this->is_open())
     {
       _M_allocate_internal_buffer();
       _M_mode = __mode;


       _M_reading = false;
       _M_writing = false;
       _M_set_buffer(-1);


       _M_state_last = _M_state_cur = _M_state_beg;


       if ((__mode & ios_base::ate)
    && this->seekoff(0, ios_base::end, __mode)
    == pos_type(off_type(-1)))
  this->close();
       else
  __ret = this;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    close()
    {
      if (!this->is_open())
 return 0;

      bool __testfail = false;
      {

 struct __close_sentry
 {
   basic_filebuf *__fb;
   __close_sentry (basic_filebuf *__fbi): __fb(__fbi) { }
   ~__close_sentry ()
   {
     __fb->_M_mode = ios_base::openmode(0);
     __fb->_M_pback_init = false;
     __fb->_M_destroy_internal_buffer();
     __fb->_M_reading = false;
     __fb->_M_writing = false;
     __fb->_M_set_buffer(-1);
     __fb->_M_state_last = __fb->_M_state_cur = __fb->_M_state_beg;
   }
 } __cs (this);

 try
   {
     if (!_M_terminate_output())
       __testfail = true;
   }
 catch(__cxxabiv1::__forced_unwind&)
   {
     _M_file.close();
     throw;
   }
 catch(...)
   { __testfail = true; }
      }

      if (!_M_file.close())
 __testfail = true;

      if (__testfail)
 return 0;
      else
 return this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    showmanyc()
    {
      streamsize __ret = -1;
      const bool __testin = _M_mode & ios_base::in;
      if (__testin && this->is_open())
 {


   __ret = this->egptr() - this->gptr();







   if (__check_facet(_M_codecvt).encoding() >= 0)

     __ret += _M_file.showmanyc() / _M_codecvt->max_length();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }



   _M_destroy_pback();

   if (this->gptr() < this->egptr())
     return traits_type::to_int_type(*this->gptr());


   const size_t __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;


   bool __got_eof = false;

   streamsize __ilen = 0;
   codecvt_base::result __r = codecvt_base::ok;
   if (__check_facet(_M_codecvt).always_noconv())
     {
       __ilen = _M_file.xsgetn(reinterpret_cast<char*>(this->eback()),
          __buflen);
       if (__ilen == 0)
  __got_eof = true;
     }
   else
     {


       const int __enc = _M_codecvt->encoding();
       streamsize __blen;
       streamsize __rlen;
       if (__enc > 0)
  __blen = __rlen = __buflen * __enc;
       else
  {
    __blen = __buflen + _M_codecvt->max_length() - 1;
    __rlen = __buflen;
  }
       const streamsize __remainder = _M_ext_end - _M_ext_next;
       __rlen = __rlen > __remainder ? __rlen - __remainder : 0;



       if (_M_reading && this->egptr() == this->eback() && __remainder)
  __rlen = 0;



       if (_M_ext_buf_size < __blen)
  {
    char* __buf = new char[__blen];
    if (__remainder)
      __builtin_memcpy(__buf, _M_ext_next, __remainder);

    delete [] _M_ext_buf;
    _M_ext_buf = __buf;
    _M_ext_buf_size = __blen;
  }
       else if (__remainder)
  __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

       _M_ext_next = _M_ext_buf;
       _M_ext_end = _M_ext_buf + __remainder;
       _M_state_last = _M_state_cur;

       do
  {
    if (__rlen > 0)
      {



        if (_M_ext_end - _M_ext_buf + __rlen > _M_ext_buf_size)
   {
     __throw_ios_failure(("basic_filebuf::underflow " "codecvt::max_length() " "is not valid")

                          );
   }
        streamsize __elen = _M_file.xsgetn(_M_ext_end, __rlen);
        if (__elen == 0)
   __got_eof = true;
        else if (__elen == -1)
   break;
        _M_ext_end += __elen;
      }

    char_type* __iend = this->eback();
    if (_M_ext_next < _M_ext_end)
      __r = _M_codecvt->in(_M_state_cur, _M_ext_next,
      _M_ext_end, _M_ext_next,
      this->eback(),
      this->eback() + __buflen, __iend);
    if (__r == codecvt_base::noconv)
      {
        size_t __avail = _M_ext_end - _M_ext_buf;
        __ilen = std::min(__avail, __buflen);
        traits_type::copy(this->eback(),
     reinterpret_cast<char_type*>
     (_M_ext_buf), __ilen);
        _M_ext_next = _M_ext_buf + __ilen;
      }
    else
      __ilen = __iend - this->eback();




    if (__r == codecvt_base::error)
      break;

    __rlen = 1;
  }
       while (__ilen == 0 && !__got_eof);
     }

   if (__ilen > 0)
     {
       _M_set_buffer(__ilen);
       _M_reading = true;
       __ret = traits_type::to_int_type(*this->gptr());
     }
   else if (__got_eof)
     {



       _M_set_buffer(-1);
       _M_reading = false;


       if (__r == codecvt_base::partial)
  __throw_ios_failure(("basic_filebuf::underflow " "incomplete character in file")
                                       );
     }
   else if (__r == codecvt_base::error)
     __throw_ios_failure(("basic_filebuf::underflow " "invalid byte sequence in file")
                                    );
   else
     __throw_ios_failure(("basic_filebuf::underflow " "error reading the file")
                             );
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    pbackfail(int_type __i)
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }


   const bool __testpb = _M_pback_init;
   const bool __testeof = traits_type::eq_int_type(__i, __ret);
   int_type __tmp;
   if (this->eback() < this->gptr())
     {
       this->gbump(-1);
       __tmp = traits_type::to_int_type(*this->gptr());
     }
   else if (this->seekoff(-1, ios_base::cur) != pos_type(off_type(-1)))
     {
       __tmp = this->underflow();
       if (traits_type::eq_int_type(__tmp, __ret))
  return __ret;
     }
   else
     {





       return __ret;
     }



   if (!__testeof && traits_type::eq_int_type(__i, __tmp))
     __ret = __i;
   else if (__testeof)
     __ret = traits_type::not_eof(__i);
   else if (!__testpb)
     {
       _M_create_pback();
       _M_reading = true;
       *this->gptr() = traits_type::to_char_type(__i);
       __ret = __i;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    overflow(int_type __c)
    {
      int_type __ret = traits_type::eof();
      const bool __testeof = traits_type::eq_int_type(__c, __ret);
      const bool __testout = (_M_mode & ios_base::out
         || _M_mode & ios_base::app);
      if (__testout)
 {
          if (_M_reading)
            {
              _M_destroy_pback();
              const int __gptr_off = _M_get_ext_pos(_M_state_last);
              if (_M_seek(__gptr_off, ios_base::cur, _M_state_last)
                  == pos_type(off_type(-1)))
                return __ret;
            }
   if (this->pbase() < this->pptr())
     {

       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }



       if (_M_convert_to_external(this->pbase(),
      this->pptr() - this->pbase()))
  {
    _M_set_buffer(0);
    __ret = traits_type::not_eof(__c);
  }
     }
   else if (_M_buf_size > 1)
     {



       _M_set_buffer(0);
       _M_writing = true;
       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }
       __ret = traits_type::not_eof(__c);
     }
   else
     {

       char_type __conv = traits_type::to_char_type(__c);
       if (__testeof || _M_convert_to_external(&__conv, 1))
  {
    _M_writing = true;
    __ret = traits_type::not_eof(__c);
  }
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_convert_to_external(_CharT* __ibuf, streamsize __ilen)
    {

      streamsize __elen;
      streamsize __plen;
      if (__check_facet(_M_codecvt).always_noconv())
 {
   __elen = _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen);
   __plen = __ilen;
 }
      else
 {


   streamsize __blen = __ilen * _M_codecvt->max_length();
   char* __buf = static_cast<char*>(__builtin_alloca(__blen));

   char* __bend;
   const char_type* __iend;
   codecvt_base::result __r;
   __r = _M_codecvt->out(_M_state_cur, __ibuf, __ibuf + __ilen,
    __iend, __buf, __buf + __blen, __bend);

   if (__r == codecvt_base::ok || __r == codecvt_base::partial)
     __blen = __bend - __buf;
   else if (__r == codecvt_base::noconv)
     {

       __buf = reinterpret_cast<char*>(__ibuf);
       __blen = __ilen;
     }
   else
     __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error")
                           );

   __elen = _M_file.xsputn(__buf, __blen);
   __plen = __blen;


   if (__r == codecvt_base::partial && __elen == __plen)
     {
       const char_type* __iresume = __iend;
       streamsize __rlen = this->pptr() - __iend;
       __r = _M_codecvt->out(_M_state_cur, __iresume,
        __iresume + __rlen, __iend, __buf,
        __buf + __blen, __bend);
       if (__r != codecvt_base::error)
  {
    __rlen = __bend - __buf;
    __elen = _M_file.xsputn(__buf, __rlen);
    __plen = __rlen;
  }
       else
  __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error")
                        );
     }
 }
      return __elen == __plen;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsgetn(_CharT* __s, streamsize __n)
    {

      streamsize __ret = 0;
      if (_M_pback_init)
 {
   if (__n > 0 && this->gptr() == this->eback())
     {
       *__s++ = *this->gptr();
       this->gbump(1);
       __ret = 1;
       --__n;
     }
   _M_destroy_pback();
 }
      else if (_M_writing)
 {
    if (overflow() == traits_type::eof())
      return __ret;
    _M_set_buffer(-1);
    _M_writing = false;
  }




      const bool __testin = _M_mode & ios_base::in;
      const streamsize __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;

      if (__n > __buflen && __check_facet(_M_codecvt).always_noconv()
     && __testin)
   {

     const streamsize __avail = this->egptr() - this->gptr();
     if (__avail != 0)
       {
        traits_type::copy(__s, this->gptr(), __avail);
         __s += __avail;
        this->setg(this->eback(), this->gptr() + __avail,
     this->egptr());
        __ret += __avail;
        __n -= __avail;
       }



     streamsize __len;
     for (;;)
       {
         __len = _M_file.xsgetn(reinterpret_cast<char*>(__s),
           __n);
         if (__len == -1)
    __throw_ios_failure(("basic_filebuf::xsgetn " "error reading the file")
                                );
         if (__len == 0)
    break;

         __n -= __len;
         __ret += __len;
         if (__n == 0)
    break;

         __s += __len;
       }

     if (__n == 0)
       {
         _M_set_buffer(0);
         _M_reading = true;
       }
     else if (__len == 0)
       {



         _M_set_buffer(-1);
         _M_reading = false;
       }
   }
      else
   __ret += __streambuf_type::xsgetn(__s, __n);

      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsputn(const _CharT* __s, streamsize __n)
    {
      streamsize __ret = 0;



      const bool __testout = (_M_mode & ios_base::out
         || _M_mode & ios_base::app);
      if (__check_facet(_M_codecvt).always_noconv()
     && __testout && !_M_reading)
 {

   const streamsize __chunk = 1ul << 10;
   streamsize __bufavail = this->epptr() - this->pptr();


   if (!_M_writing && _M_buf_size > 1)
     __bufavail = _M_buf_size - 1;

   const streamsize __limit = std::min(__chunk, __bufavail);
   if (__n >= __limit)
     {
       const streamsize __buffill = this->pptr() - this->pbase();
       const char* __buf = reinterpret_cast<const char*>(this->pbase());
       __ret = _M_file.xsputn_2(__buf, __buffill,
           reinterpret_cast<const char*>(__s),
           __n);
       if (__ret == __buffill + __n)
  {
    _M_set_buffer(0);
    _M_writing = true;
  }
       if (__ret > __buffill)
  __ret -= __buffill;
       else
  __ret = 0;
     }
   else
     __ret = __streambuf_type::xsputn(__s, __n);
 }
       else
  __ret = __streambuf_type::xsputn(__s, __n);
       return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__streambuf_type*
    basic_filebuf<_CharT, _Traits>::
    setbuf(char_type* __s, streamsize __n)
    {
      if (!this->is_open())
 {
   if (__s == 0 && __n == 0)
     _M_buf_size = 1;
   else if (__s && __n > 0)
     {
# 787 "/usr/include/c++/5/bits/fstream.tcc" 3
       _M_buf = __s;
       _M_buf_size = __n;
     }
 }
      return this;
    }




  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode)
    {
      int __width = 0;
      if (_M_codecvt)
 __width = _M_codecvt->encoding();
      if (__width < 0)
 __width = 0;

      pos_type __ret = pos_type(off_type(-1));
      const bool __testfail = __off != 0 && __width <= 0;
      if (this->is_open() && !__testfail)
 {




   bool __no_movement = __way == ios_base::cur && __off == 0
     && (!_M_writing || _M_codecvt->always_noconv());


   if (!__no_movement)
     _M_destroy_pback();






   __state_type __state = _M_state_beg;
   off_type __computed_off = __off * __width;
   if (_M_reading && __way == ios_base::cur)
     {
       __state = _M_state_last;
       __computed_off += _M_get_ext_pos(__state);
     }
   if (!__no_movement)
     __ret = _M_seek(__computed_off, __way, __state);
   else
     {
       if (_M_writing)
  __computed_off = this->pptr() - this->pbase();

        off_type __file_off = _M_file.seekoff(0, ios_base::cur);
        if (__file_off != off_type(-1))
  {
    __ret = __file_off + __computed_off;
    __ret.state(__state);
  }
     }
 }
      return __ret;
    }





  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekpos(pos_type __pos, ios_base::openmode)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (this->is_open())
 {

   _M_destroy_pback();
   __ret = _M_seek(off_type(__pos), ios_base::beg, __pos.state());
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (_M_terminate_output())
 {
   off_type __file_off = _M_file.seekoff(__off, __way);
   if (__file_off != off_type(-1))
     {
       _M_reading = false;
       _M_writing = false;
       _M_ext_next = _M_ext_end = _M_ext_buf;
       _M_set_buffer(-1);
       _M_state_cur = __state;
       __ret = __file_off;
       __ret.state(_M_state_cur);
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    int basic_filebuf<_CharT, _Traits>::
    _M_get_ext_pos(__state_type& __state)
    {
      if (_M_codecvt->always_noconv())
        return this->gptr() - this->egptr();
      else
        {



          const int __gptr_off =
            _M_codecvt->length(__state, _M_ext_buf, _M_ext_next,
                               this->gptr() - this->eback());
          return _M_ext_buf + __gptr_off - _M_ext_end;
        }
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_terminate_output()
    {

      bool __testvalid = true;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __testvalid = false;
 }


      if (_M_writing && !__check_facet(_M_codecvt).always_noconv()
   && __testvalid)
 {



   const size_t __blen = 128;
   char __buf[__blen];
   codecvt_base::result __r;
   streamsize __ilen = 0;

   do
     {
       char* __next;
       __r = _M_codecvt->unshift(_M_state_cur, __buf,
     __buf + __blen, __next);
       if (__r == codecvt_base::error)
  __testvalid = false;
       else if (__r == codecvt_base::ok ||
         __r == codecvt_base::partial)
  {
    __ilen = __next - __buf;
    if (__ilen > 0)
      {
        const streamsize __elen = _M_file.xsputn(__buf, __ilen);
        if (__elen != __ilen)
   __testvalid = false;
      }
  }
     }
   while (__r == codecvt_base::partial && __ilen > 0 && __testvalid);

   if (__testvalid)
     {




       const int_type __tmp = this->overflow();
       if (traits_type::eq_int_type(__tmp, traits_type::eof()))
  __testvalid = false;
     }
 }
      return __testvalid;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_filebuf<_CharT, _Traits>::
    sync()
    {


      int __ret = 0;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __ret = -1;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    imbue(const locale& __loc)
    {
      bool __testvalid = true;

      const __codecvt_type* _M_codecvt_tmp = 0;
      if (__builtin_expect(has_facet<__codecvt_type>(__loc), true))
 _M_codecvt_tmp = &use_facet<__codecvt_type>(__loc);

      if (this->is_open())
 {

   if ((_M_reading || _M_writing)
       && __check_facet(_M_codecvt).encoding() == -1)
     __testvalid = false;
   else
     {
       if (_M_reading)
  {
    if (__check_facet(_M_codecvt).always_noconv())
      {
        if (_M_codecvt_tmp
     && !__check_facet(_M_codecvt_tmp).always_noconv())
   __testvalid = this->seekoff(0, ios_base::cur, _M_mode)
                 != pos_type(off_type(-1));
      }
    else
      {

        _M_ext_next = _M_ext_buf
   + _M_codecvt->length(_M_state_last, _M_ext_buf,
          _M_ext_next,
          this->gptr() - this->eback());
        const streamsize __remainder = _M_ext_end - _M_ext_next;
        if (__remainder)
   __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

        _M_ext_next = _M_ext_buf;
        _M_ext_end = _M_ext_buf + __remainder;
        _M_set_buffer(-1);
        _M_state_last = _M_state_cur = _M_state_beg;
      }
  }
       else if (_M_writing && (__testvalid = _M_terminate_output()))
  _M_set_buffer(-1);
     }
 }

      if (__testvalid)
 _M_codecvt = _M_codecvt_tmp;
      else
 _M_codecvt = 0;
    }




  extern template class basic_filebuf<char>;
  extern template class basic_ifstream<char>;
  extern template class basic_ofstream<char>;
  extern template class basic_fstream<char>;


  extern template class basic_filebuf<wchar_t>;
  extern template class basic_ifstream<wchar_t>;
  extern template class basic_ofstream<wchar_t>;
  extern template class basic_fstream<wchar_t>;




}
# 1082 "/usr/include/c++/5/fstream" 2 3
# 12 "src/generate.h" 2


# 1 "/usr/include/c++/5/sstream" 1 3
# 36 "/usr/include/c++/5/sstream" 3
       
# 37 "/usr/include/c++/5/sstream" 3




namespace std __attribute__ ((__visibility__ ("default")))
{

namespace __cxx11 {
# 64 "/usr/include/c++/5/sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    {
      struct __xfer_bufptrs;
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_string<char_type, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;

    protected:

      ios_base::openmode _M_mode;


      __string_type _M_string;

    public:
# 99 "/usr/include/c++/5/sstream" 3
      explicit
      basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(__mode), _M_string()
      { }
# 112 "/usr/include/c++/5/sstream" 3
      explicit
      basic_stringbuf(const __string_type& __str,
        ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(), _M_string(__str.data(), __str.size())
      { _M_stringbuf_init(__mode); }
# 165 "/usr/include/c++/5/sstream" 3
      __string_type
      str() const
      {
 __string_type __ret;
 if (this->pptr())
   {

     if (this->pptr() > this->egptr())
       __ret = __string_type(this->pbase(), this->pptr());
     else
        __ret = __string_type(this->pbase(), this->egptr());
   }
 else
   __ret = _M_string;
 return __ret;
      }
# 189 "/usr/include/c++/5/sstream" 3
      void
      str(const __string_type& __s)
      {


 _M_string.assign(__s.data(), __s.size());
 _M_stringbuf_init(_M_mode);
      }

    protected:

      void
      _M_stringbuf_init(ios_base::openmode __mode)
      {
 _M_mode = __mode;
 __size_type __len = 0;
 if (_M_mode & (ios_base::ate | ios_base::app))
   __len = _M_string.size();
 _M_sync(const_cast<char_type*>(_M_string.data()), 0, __len);
      }

      virtual streamsize
      showmanyc()
      {
 streamsize __ret = -1;
 if (_M_mode & ios_base::in)
   {
     _M_update_egptr();
     __ret = this->egptr() - this->gptr();
   }
 return __ret;
      }

      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = traits_type::eof());

      virtual int_type
      overflow(int_type __c = traits_type::eof());
# 242 "/usr/include/c++/5/sstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n)
      {
 if (__s && __n >= 0)
   {






     _M_string.clear();


     _M_sync(__s, __n, 0);
   }
 return this;
      }

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __sp,
       ios_base::openmode __mode = ios_base::in | ios_base::out);




      void
      _M_sync(char_type* __base, __size_type __i, __size_type __o);



      void
      _M_update_egptr()
      {
 const bool __testin = _M_mode & ios_base::in;
 if (this->pptr() && this->pptr() > this->egptr())
   {
     if (__testin)
       this->setg(this->eback(), this->gptr(), this->pptr());
     else
       this->setg(this->pptr(), this->pptr(), this->pptr());
   }
      }



      void
      _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off);

    private:
# 348 "/usr/include/c++/5/sstream" 3
    };
# 366 "/usr/include/c++/5/sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_istringstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 402 "/usr/include/c++/5/sstream" 3
      explicit
      basic_istringstream(ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_stringbuf(__mode | ios_base::in)
      { this->init(&_M_stringbuf); }
# 420 "/usr/include/c++/5/sstream" 3
      explicit
      basic_istringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_stringbuf(__str, __mode | ios_base::in)
      { this->init(&_M_stringbuf); }







      ~basic_istringstream()
      { }
# 471 "/usr/include/c++/5/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };
# 510 "/usr/include/c++/5/sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_ostringstream : public basic_ostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 546 "/usr/include/c++/5/sstream" 3
      explicit
      basic_ostringstream(ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
      { this->init(&_M_stringbuf); }
# 564 "/usr/include/c++/5/sstream" 3
      explicit
      basic_ostringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_stringbuf(__str, __mode | ios_base::out)
      { this->init(&_M_stringbuf); }







      ~basic_ostringstream()
      { }
# 615 "/usr/include/c++/5/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };
# 654 "/usr/include/c++/5/sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 689 "/usr/include/c++/5/sstream" 3
      explicit
      basic_stringstream(ios_base::openmode __m = ios_base::out | ios_base::in)
      : __iostream_type(), _M_stringbuf(__m)
      { this->init(&_M_stringbuf); }
# 705 "/usr/include/c++/5/sstream" 3
      explicit
      basic_stringstream(const __string_type& __str,
    ios_base::openmode __m = ios_base::out | ios_base::in)
      : __iostream_type(), _M_stringbuf(__str, __m)
      { this->init(&_M_stringbuf); }







      ~basic_stringstream()
      { }
# 756 "/usr/include/c++/5/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };
# 809 "/usr/include/c++/5/sstream" 3
}

}

# 1 "/usr/include/c++/5/bits/sstream.tcc" 1 3
# 37 "/usr/include/c++/5/bits/sstream.tcc" 3
       
# 38 "/usr/include/c++/5/bits/sstream.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    pbackfail(int_type __c)
    {
      int_type __ret = traits_type::eof();
      if (this->eback() < this->gptr())
 {


   const bool __testeof = traits_type::eq_int_type(__c, __ret);
   if (!__testeof)
     {
       const bool __testeq = traits_type::eq(traits_type::
          to_char_type(__c),
          this->gptr()[-1]);
       const bool __testout = this->_M_mode & ios_base::out;
       if (__testeq || __testout)
  {
    this->gbump(-1);
    if (!__testeq)
      *this->gptr() = traits_type::to_char_type(__c);
    __ret = __c;
  }
     }
   else
     {
       this->gbump(-1);
       __ret = traits_type::not_eof(__c);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    overflow(int_type __c)
    {
      const bool __testout = this->_M_mode & ios_base::out;
      if (__builtin_expect(!__testout, false))
 return traits_type::eof();

      const bool __testeof = traits_type::eq_int_type(__c, traits_type::eof());
      if (__builtin_expect(__testeof, false))
 return traits_type::not_eof(__c);

      const __size_type __capacity = _M_string.capacity();
      const __size_type __max_size = _M_string.max_size();
      const bool __testput = this->pptr() < this->epptr();
      if (__builtin_expect(!__testput && __capacity == __max_size, false))
 return traits_type::eof();



      const char_type __conv = traits_type::to_char_type(__c);
      if (!__testput)
 {
# 110 "/usr/include/c++/5/bits/sstream.tcc" 3
   const __size_type __opt_len = std::max(__size_type(2 * __capacity),
       __size_type(512));
   const __size_type __len = std::min(__opt_len, __max_size);
   __string_type __tmp;
   __tmp.reserve(__len);
   if (this->pbase())
     __tmp.assign(this->pbase(), this->epptr() - this->pbase());
   __tmp.push_back(__conv);
   _M_string.swap(__tmp);
   _M_sync(const_cast<char_type*>(_M_string.data()),
    this->gptr() - this->eback(), this->pptr() - this->pbase());
 }
      else
 *this->pptr() = __conv;
      this->pbump(1);
      return __c;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = this->_M_mode & ios_base::in;
      if (__testin)
 {

   _M_update_egptr();

   if (this->gptr() < this->egptr())
     __ret = traits_type::to_int_type(*this->gptr());
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;
      const bool __testboth = __testin && __testout && __way != ios_base::cur;
      __testin &= !(__mode & ios_base::out);
      __testout &= !(__mode & ios_base::in);



      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !__off) && (__testin || __testout || __testboth))
 {
   _M_update_egptr();

   off_type __newoffi = __off;
   off_type __newoffo = __newoffi;
   if (__way == ios_base::cur)
     {
       __newoffi += this->gptr() - __beg;
       __newoffo += this->pptr() - __beg;
     }
   else if (__way == ios_base::end)
     __newoffo = __newoffi += this->egptr() - __beg;

   if ((__testin || __testboth)
       && __newoffi >= 0
       && this->egptr() - __beg >= __newoffi)
     {
       this->setg(this->eback(), this->eback() + __newoffi,
    this->egptr());
       __ret = pos_type(__newoffi);
     }
   if ((__testout || __testboth)
       && __newoffo >= 0
       && this->egptr() - __beg >= __newoffo)
     {
       _M_pbump(this->pbase(), this->epptr(), __newoffo);
       __ret = pos_type(__newoffo);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekpos(pos_type __sp, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      const bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      const bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;

      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !off_type(__sp)) && (__testin || __testout))
 {
   _M_update_egptr();

   const off_type __pos(__sp);
   const bool __testpos = (0 <= __pos
      && __pos <= this->egptr() - __beg);
   if (__testpos)
     {
       if (__testin)
  this->setg(this->eback(), this->eback() + __pos,
      this->egptr());
       if (__testout)
  _M_pbump(this->pbase(), this->epptr(), __pos);
       __ret = __sp;
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_sync(char_type* __base, __size_type __i, __size_type __o)
    {
      const bool __testin = _M_mode & ios_base::in;
      const bool __testout = _M_mode & ios_base::out;
      char_type* __endg = __base + _M_string.size();
      char_type* __endp = __base + _M_string.capacity();

      if (__base != _M_string.data())
 {

   __endg += __i;
   __i = 0;
   __endp = __endg;
 }

      if (__testin)
 this->setg(__base, __base + __i, __endg);
      if (__testout)
 {
   _M_pbump(__base, __endp, __o);



   if (!__testin)
     this->setg(__endg, __endg, __endg);
 }
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off)
    {
      this->setp(__pbeg, __pend);
      while (__off > __gnu_cxx::__numeric_traits<int>::__max)
 {
   this->pbump(__gnu_cxx::__numeric_traits<int>::__max);
   __off -= __gnu_cxx::__numeric_traits<int>::__max;
 }
      this->pbump(__off);
    }




  extern template class basic_stringbuf<char>;
  extern template class basic_istringstream<char>;
  extern template class basic_ostringstream<char>;
  extern template class basic_stringstream<char>;


  extern template class basic_stringbuf<wchar_t>;
  extern template class basic_istringstream<wchar_t>;
  extern template class basic_ostringstream<wchar_t>;
  extern template class basic_stringstream<wchar_t>;




}
# 814 "/usr/include/c++/5/sstream" 2 3
# 15 "src/generate.h" 2
# 1 "/usr/include/netdb.h" 1 3 4
# 32 "/usr/include/netdb.h" 3 4
# 1 "/usr/include/rpc/netdb.h" 1 3 4
# 42 "/usr/include/rpc/netdb.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 43 "/usr/include/rpc/netdb.h" 2 3 4

extern "C" {

struct rpcent
{
  char *r_name;
  char **r_aliases;
  int r_number;
};

extern void setrpcent (int __stayopen) throw ();
extern void endrpcent (void) throw ();
extern struct rpcent *getrpcbyname (const char *__name) throw ();
extern struct rpcent *getrpcbynumber (int __number) throw ();
extern struct rpcent *getrpcent (void) throw ();


extern int getrpcbyname_r (const char *__name, struct rpcent *__result_buf,
      char *__buffer, size_t __buflen,
      struct rpcent **__result) throw ();

extern int getrpcbynumber_r (int __number, struct rpcent *__result_buf,
        char *__buffer, size_t __buflen,
        struct rpcent **__result) throw ();

extern int getrpcent_r (struct rpcent *__result_buf, char *__buffer,
   size_t __buflen, struct rpcent **__result) throw ();


}
# 33 "/usr/include/netdb.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 2 3 4







typedef union sigval
  {
    int sival_int;
    void *sival_ptr;
  } sigval_t;
# 320 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
typedef struct sigevent
  {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;






enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4

};
# 38 "/usr/include/netdb.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/netdb.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/netdb.h" 3 4
struct netent
{
  char *n_name;
  char **n_aliases;
  int n_addrtype;
  uint32_t n_net;
};
# 43 "/usr/include/netdb.h" 2 3 4
# 53 "/usr/include/netdb.h" 3 4
extern "C" {







extern int *__h_errno_location (void) throw () __attribute__ ((__const__));
# 92 "/usr/include/netdb.h" 3 4
extern void herror (const char *__str) throw ();


extern const char *hstrerror (int __err_num) throw ();




struct hostent
{
  char *h_name;
  char **h_aliases;
  int h_addrtype;
  int h_length;
  char **h_addr_list;



};






extern void sethostent (int __stay_open);





extern void endhostent (void);






extern struct hostent *gethostent (void);






extern struct hostent *gethostbyaddr (const void *__addr, __socklen_t __len,
          int __type);





extern struct hostent *gethostbyname (const char *__name);
# 155 "/usr/include/netdb.h" 3 4
extern struct hostent *gethostbyname2 (const char *__name, int __af);
# 167 "/usr/include/netdb.h" 3 4
extern int gethostent_r (struct hostent *__restrict __result_buf,
    char *__restrict __buf, size_t __buflen,
    struct hostent **__restrict __result,
    int *__restrict __h_errnop);

extern int gethostbyaddr_r (const void *__restrict __addr, __socklen_t __len,
       int __type,
       struct hostent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct hostent **__restrict __result,
       int *__restrict __h_errnop);

extern int gethostbyname_r (const char *__restrict __name,
       struct hostent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct hostent **__restrict __result,
       int *__restrict __h_errnop);

extern int gethostbyname2_r (const char *__restrict __name, int __af,
        struct hostent *__restrict __result_buf,
        char *__restrict __buf, size_t __buflen,
        struct hostent **__restrict __result,
        int *__restrict __h_errnop);
# 198 "/usr/include/netdb.h" 3 4
extern void setnetent (int __stay_open);





extern void endnetent (void);






extern struct netent *getnetent (void);






extern struct netent *getnetbyaddr (uint32_t __net, int __type);





extern struct netent *getnetbyname (const char *__name);
# 237 "/usr/include/netdb.h" 3 4
extern int getnetent_r (struct netent *__restrict __result_buf,
   char *__restrict __buf, size_t __buflen,
   struct netent **__restrict __result,
   int *__restrict __h_errnop);

extern int getnetbyaddr_r (uint32_t __net, int __type,
      struct netent *__restrict __result_buf,
      char *__restrict __buf, size_t __buflen,
      struct netent **__restrict __result,
      int *__restrict __h_errnop);

extern int getnetbyname_r (const char *__restrict __name,
      struct netent *__restrict __result_buf,
      char *__restrict __buf, size_t __buflen,
      struct netent **__restrict __result,
      int *__restrict __h_errnop);




struct servent
{
  char *s_name;
  char **s_aliases;
  int s_port;
  char *s_proto;
};






extern void setservent (int __stay_open);





extern void endservent (void);






extern struct servent *getservent (void);






extern struct servent *getservbyname (const char *__name, const char *__proto);






extern struct servent *getservbyport (int __port, const char *__proto);
# 308 "/usr/include/netdb.h" 3 4
extern int getservent_r (struct servent *__restrict __result_buf,
    char *__restrict __buf, size_t __buflen,
    struct servent **__restrict __result);

extern int getservbyname_r (const char *__restrict __name,
       const char *__restrict __proto,
       struct servent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct servent **__restrict __result);

extern int getservbyport_r (int __port, const char *__restrict __proto,
       struct servent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct servent **__restrict __result);




struct protoent
{
  char *p_name;
  char **p_aliases;
  int p_proto;
};






extern void setprotoent (int __stay_open);





extern void endprotoent (void);






extern struct protoent *getprotoent (void);





extern struct protoent *getprotobyname (const char *__name);





extern struct protoent *getprotobynumber (int __proto);
# 374 "/usr/include/netdb.h" 3 4
extern int getprotoent_r (struct protoent *__restrict __result_buf,
     char *__restrict __buf, size_t __buflen,
     struct protoent **__restrict __result);

extern int getprotobyname_r (const char *__restrict __name,
        struct protoent *__restrict __result_buf,
        char *__restrict __buf, size_t __buflen,
        struct protoent **__restrict __result);

extern int getprotobynumber_r (int __proto,
          struct protoent *__restrict __result_buf,
          char *__restrict __buf, size_t __buflen,
          struct protoent **__restrict __result);
# 395 "/usr/include/netdb.h" 3 4
extern int setnetgrent (const char *__netgroup);







extern void endnetgrent (void);
# 412 "/usr/include/netdb.h" 3 4
extern int getnetgrent (char **__restrict __hostp,
   char **__restrict __userp,
   char **__restrict __domainp);
# 423 "/usr/include/netdb.h" 3 4
extern int innetgr (const char *__netgroup, const char *__host,
      const char *__user, const char *__domain);







extern int getnetgrent_r (char **__restrict __hostp,
     char **__restrict __userp,
     char **__restrict __domainp,
     char *__restrict __buffer, size_t __buflen);
# 451 "/usr/include/netdb.h" 3 4
extern int rcmd (char **__restrict __ahost, unsigned short int __rport,
   const char *__restrict __locuser,
   const char *__restrict __remuser,
   const char *__restrict __cmd, int *__restrict __fd2p);
# 463 "/usr/include/netdb.h" 3 4
extern int rcmd_af (char **__restrict __ahost, unsigned short int __rport,
      const char *__restrict __locuser,
      const char *__restrict __remuser,
      const char *__restrict __cmd, int *__restrict __fd2p,
      sa_family_t __af);
# 479 "/usr/include/netdb.h" 3 4
extern int rexec (char **__restrict __ahost, int __rport,
    const char *__restrict __name,
    const char *__restrict __pass,
    const char *__restrict __cmd, int *__restrict __fd2p);
# 491 "/usr/include/netdb.h" 3 4
extern int rexec_af (char **__restrict __ahost, int __rport,
       const char *__restrict __name,
       const char *__restrict __pass,
       const char *__restrict __cmd, int *__restrict __fd2p,
       sa_family_t __af);
# 505 "/usr/include/netdb.h" 3 4
extern int ruserok (const char *__rhost, int __suser,
      const char *__remuser, const char *__locuser);
# 515 "/usr/include/netdb.h" 3 4
extern int ruserok_af (const char *__rhost, int __suser,
         const char *__remuser, const char *__locuser,
         sa_family_t __af);
# 528 "/usr/include/netdb.h" 3 4
extern int iruserok (uint32_t __raddr, int __suser,
       const char *__remuser, const char *__locuser);
# 539 "/usr/include/netdb.h" 3 4
extern int iruserok_af (const void *__raddr, int __suser,
   const char *__remuser, const char *__locuser,
   sa_family_t __af);
# 551 "/usr/include/netdb.h" 3 4
extern int rresvport (int *__alport);
# 560 "/usr/include/netdb.h" 3 4
extern int rresvport_af (int *__alport, sa_family_t __af);






struct addrinfo
{
  int ai_flags;
  int ai_family;
  int ai_socktype;
  int ai_protocol;
  socklen_t ai_addrlen;
  struct sockaddr *ai_addr;
  char *ai_canonname;
  struct addrinfo *ai_next;
};



struct gaicb
{
  const char *ar_name;
  const char *ar_service;
  const struct addrinfo *ar_request;
  struct addrinfo *ar_result;

  int __return;
  int __glibc_reserved[5];
};
# 662 "/usr/include/netdb.h" 3 4
extern int getaddrinfo (const char *__restrict __name,
   const char *__restrict __service,
   const struct addrinfo *__restrict __req,
   struct addrinfo **__restrict __pai);


extern void freeaddrinfo (struct addrinfo *__ai) throw ();


extern const char *gai_strerror (int __ecode) throw ();





extern int getnameinfo (const struct sockaddr *__restrict __sa,
   socklen_t __salen, char *__restrict __host,
   socklen_t __hostlen, char *__restrict __serv,
   socklen_t __servlen, int __flags);
# 692 "/usr/include/netdb.h" 3 4
extern int getaddrinfo_a (int __mode, struct gaicb *__list[],
     int __ent, struct sigevent *__restrict __sig);
# 703 "/usr/include/netdb.h" 3 4
extern int gai_suspend (const struct gaicb *const __list[], int __ent,
   const struct timespec *__timeout);


extern int gai_error (struct gaicb *__req) throw ();


extern int gai_cancel (struct gaicb *__gaicbp) throw ();


}
# 16 "src/generate.h" 2
# 1 "/usr/include/c++/5/map" 1 3
# 58 "/usr/include/c++/5/map" 3
       
# 59 "/usr/include/c++/5/map" 3

# 1 "/usr/include/c++/5/bits/stl_tree.h" 1 3
# 61 "/usr/include/c++/5/bits/stl_tree.h" 3
       
# 62 "/usr/include/c++/5/bits/stl_tree.h" 3
# 72 "/usr/include/c++/5/bits/stl_tree.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 92 "/usr/include/c++/5/bits/stl_tree.h" 3
  enum _Rb_tree_color { _S_red = false, _S_black = true };

  struct _Rb_tree_node_base
  {
    typedef _Rb_tree_node_base* _Base_ptr;
    typedef const _Rb_tree_node_base* _Const_Base_ptr;

    _Rb_tree_color _M_color;
    _Base_ptr _M_parent;
    _Base_ptr _M_left;
    _Base_ptr _M_right;

    static _Base_ptr
    _S_minimum(_Base_ptr __x)
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Const_Base_ptr
    _S_minimum(_Const_Base_ptr __x)
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Base_ptr
    _S_maximum(_Base_ptr __x)
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }

    static _Const_Base_ptr
    _S_maximum(_Const_Base_ptr __x)
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }
  };

  template<typename _Val>
    struct _Rb_tree_node : public _Rb_tree_node_base
    {
      typedef _Rb_tree_node<_Val>* _Link_type;


      _Val _M_value_field;

      _Val*
      _M_valptr()
      { return std::__addressof(_M_value_field); }

      const _Val*
      _M_valptr() const
      { return std::__addressof(_M_value_field); }
# 159 "/usr/include/c++/5/bits/stl_tree.h" 3
    };

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_decrement(const _Rb_tree_node_base* __x) throw ();

  template<typename _Tp>
    struct _Rb_tree_iterator
    {
      typedef _Tp value_type;
      typedef _Tp& reference;
      typedef _Tp* pointer;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;
      typedef _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_iterator()
      : _M_node() { }

      explicit
      _Rb_tree_iterator(_Base_ptr __x)
      : _M_node(__x) { }

      reference
      operator*() const
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }

      pointer
      operator->() const
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }

      _Self&
      operator++()
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--()
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
  };

  template<typename _Tp>
    struct _Rb_tree_const_iterator
    {
      typedef _Tp value_type;
      typedef const _Tp& reference;
      typedef const _Tp* pointer;

      typedef _Rb_tree_iterator<_Tp> iterator;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_const_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;
      typedef const _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_const_iterator()
      : _M_node() { }

      explicit
      _Rb_tree_const_iterator(_Base_ptr __x)
      : _M_node(__x) { }

      _Rb_tree_const_iterator(const iterator& __it)
      : _M_node(__it._M_node) { }

      iterator
      _M_const_cast() const
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }

      reference
      operator*() const
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }

      pointer
      operator->() const
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }

      _Self&
      operator++()
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--()
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
    };

  template<typename _Val>
    inline bool
    operator==(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y)
    { return __x._M_node == __y._M_node; }

  template<typename _Val>
    inline bool
    operator!=(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y)
    { return __x._M_node != __y._M_node; }

  void
  _Rb_tree_insert_and_rebalance(const bool __insert_left,
                                _Rb_tree_node_base* __x,
                                _Rb_tree_node_base* __p,
                                _Rb_tree_node_base& __header) throw ();

  _Rb_tree_node_base*
  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,
          _Rb_tree_node_base& __header) throw ();


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc = allocator<_Val> >
    class _Rb_tree
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Rb_tree_node<_Val> >::other _Node_allocator;

      typedef __gnu_cxx::__alloc_traits<_Node_allocator> _Alloc_traits;

    protected:
      typedef _Rb_tree_node_base* _Base_ptr;
      typedef const _Rb_tree_node_base* _Const_Base_ptr;
      typedef _Rb_tree_node<_Val>* _Link_type;
      typedef const _Rb_tree_node<_Val>* _Const_Link_type;

    private:


      struct _Reuse_or_alloc_node
      {
 _Reuse_or_alloc_node(_Rb_tree& __t)
   : _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)
 {
   if (_M_root)
     {
       _M_root->_M_parent = 0;

       if (_M_nodes->_M_left)
  _M_nodes = _M_nodes->_M_left;
     }
   else
     _M_nodes = 0;
 }





 ~_Reuse_or_alloc_node()
 { _M_t._M_erase(static_cast<_Link_type>(_M_root)); }

 template<typename _Arg>
   _Link_type

   operator()(const _Arg& __arg)



   {
     _Link_type __node = static_cast<_Link_type>(_M_extract());
     if (__node)
       {
  _M_t._M_destroy_node(__node);
  _M_t._M_construct_node(__node, (__arg));
  return __node;
       }

     return _M_t._M_create_node((__arg));
   }

      private:
 _Base_ptr
 _M_extract()
 {
   if (!_M_nodes)
     return _M_nodes;

   _Base_ptr __node = _M_nodes;
   _M_nodes = _M_nodes->_M_parent;
   if (_M_nodes)
     {
       if (_M_nodes->_M_right == __node)
  {
    _M_nodes->_M_right = 0;

    if (_M_nodes->_M_left)
      {
        _M_nodes = _M_nodes->_M_left;

        while (_M_nodes->_M_right)
   _M_nodes = _M_nodes->_M_right;

        if (_M_nodes->_M_left)
   _M_nodes = _M_nodes->_M_left;
      }
  }
       else
  _M_nodes->_M_left = 0;
     }
   else
     _M_root = 0;

   return __node;
 }

 _Base_ptr _M_root;
 _Base_ptr _M_nodes;
 _Rb_tree& _M_t;
      };



      struct _Alloc_node
      {
 _Alloc_node(_Rb_tree& __t)
   : _M_t(__t) { }

 template<typename _Arg>
   _Link_type

   operator()(const _Arg& __arg) const



   { return _M_t._M_create_node((__arg)); }

      private:
 _Rb_tree& _M_t;
      };

    public:
      typedef _Key key_type;
      typedef _Val value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

      _Node_allocator&
      _M_get_Node_allocator()
      { return *static_cast<_Node_allocator*>(&this->_M_impl); }

      const _Node_allocator&
      _M_get_Node_allocator() const
      { return *static_cast<const _Node_allocator*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Node_allocator()); }

    protected:
      _Link_type
      _M_get_node()
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }

      void
      _M_put_node(_Link_type __p)
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }


      void
      _M_construct_node(_Link_type __node, const value_type& __x)
      {
 try
   { get_allocator().construct(__node->_M_valptr(), __x); }
 catch(...)
   {
     _M_put_node(__node);
     throw;
   }
      }

      _Link_type
      _M_create_node(const value_type& __x)
      {
 _Link_type __tmp = _M_get_node();
 _M_construct_node(__tmp, __x);
 return __tmp;
      }

      void
      _M_destroy_node(_Link_type __p)
      { get_allocator().destroy(__p->_M_valptr()); }
# 558 "/usr/include/c++/5/bits/stl_tree.h" 3
      void
      _M_drop_node(_Link_type __p)
      {
 _M_destroy_node(__p);
 _M_put_node(__p);
      }

      template<typename _NodeGen>
 _Link_type
 _M_clone_node(_Const_Link_type __x, _NodeGen& __node_gen)
 {
   _Link_type __tmp = __node_gen(*__x->_M_valptr());
   __tmp->_M_color = __x->_M_color;
   __tmp->_M_left = 0;
   __tmp->_M_right = 0;
   return __tmp;
 }

    protected:

      template<typename _Key_compare,
        bool = __is_pod(_Key_compare)>
        struct _Rb_tree_impl : public _Node_allocator
        {
   _Key_compare _M_key_compare;
   _Rb_tree_node_base _M_header;
   size_type _M_node_count;

   _Rb_tree_impl()
   : _Node_allocator(), _M_key_compare(), _M_header(),
     _M_node_count(0)
   { _M_initialize(); }

   _Rb_tree_impl(const _Key_compare& __comp, const _Node_allocator& __a)
   : _Node_allocator(__a), _M_key_compare(__comp), _M_header(),
     _M_node_count(0)
   { _M_initialize(); }
# 603 "/usr/include/c++/5/bits/stl_tree.h" 3
   void
   _M_reset()
   {
     this->_M_header._M_parent = 0;
     this->_M_header._M_left = &this->_M_header;
     this->_M_header._M_right = &this->_M_header;
     this->_M_node_count = 0;
   }

 private:
   void
   _M_initialize()
   {
     this->_M_header._M_color = _S_red;
     this->_M_header._M_parent = 0;
     this->_M_header._M_left = &this->_M_header;
     this->_M_header._M_right = &this->_M_header;
   }
 };

      _Rb_tree_impl<_Compare> _M_impl;

    protected:
      _Base_ptr&
      _M_root()
      { return this->_M_impl._M_header._M_parent; }

      _Const_Base_ptr
      _M_root() const
      { return this->_M_impl._M_header._M_parent; }

      _Base_ptr&
      _M_leftmost()
      { return this->_M_impl._M_header._M_left; }

      _Const_Base_ptr
      _M_leftmost() const
      { return this->_M_impl._M_header._M_left; }

      _Base_ptr&
      _M_rightmost()
      { return this->_M_impl._M_header._M_right; }

      _Const_Base_ptr
      _M_rightmost() const
      { return this->_M_impl._M_header._M_right; }

      _Link_type
      _M_begin()
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }

      _Const_Link_type
      _M_begin() const
      {
 return static_cast<_Const_Link_type>
   (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end()
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }

      _Const_Link_type
      _M_end() const
      { return reinterpret_cast<_Const_Link_type>(&this->_M_impl._M_header); }

      static const_reference
      _S_value(_Const_Link_type __x)
      { return *__x->_M_valptr(); }

      static const _Key&
      _S_key(_Const_Link_type __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Link_type
      _S_left(_Base_ptr __x)
      { return static_cast<_Link_type>(__x->_M_left); }

      static _Const_Link_type
      _S_left(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x->_M_left); }

      static _Link_type
      _S_right(_Base_ptr __x)
      { return static_cast<_Link_type>(__x->_M_right); }

      static _Const_Link_type
      _S_right(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x->_M_right); }

      static const_reference
      _S_value(_Const_Base_ptr __x)
      { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }

      static const _Key&
      _S_key(_Const_Base_ptr __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Base_ptr
      _S_minimum(_Base_ptr __x)
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Const_Base_ptr
      _S_minimum(_Const_Base_ptr __x)
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Base_ptr
      _S_maximum(_Base_ptr __x)
      { return _Rb_tree_node_base::_S_maximum(__x); }

      static _Const_Base_ptr
      _S_maximum(_Const_Base_ptr __x)
      { return _Rb_tree_node_base::_S_maximum(__x); }

    public:
      typedef _Rb_tree_iterator<value_type> iterator;
      typedef _Rb_tree_const_iterator<value_type> const_iterator;

      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

    private:
      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_unique_pos(const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_equal_pos(const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_hint_unique_pos(const_iterator __pos,
        const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_hint_equal_pos(const_iterator __pos,
       const key_type& __k);
# 761 "/usr/include/c++/5/bits/stl_tree.h" 3
      template<typename _NodeGen>
 iterator
 _M_insert_(_Base_ptr __x, _Base_ptr __y,
     const value_type& __v, _NodeGen&);



      iterator
      _M_insert_lower(_Base_ptr __y, const value_type& __v);

      iterator
      _M_insert_equal_lower(const value_type& __x);


      template<typename _NodeGen>
 _Link_type
 _M_copy(_Const_Link_type __x, _Link_type __p, _NodeGen&);

      _Link_type
      _M_copy(_Const_Link_type __x, _Link_type __p)
      {
 _Alloc_node __an(*this);
 return _M_copy(__x, __p, __an);
      }

      void
      _M_erase(_Link_type __x);

      iterator
      _M_lower_bound(_Link_type __x, _Link_type __y,
       const _Key& __k);

      const_iterator
      _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,
       const _Key& __k) const;

      iterator
      _M_upper_bound(_Link_type __x, _Link_type __y,
       const _Key& __k);

      const_iterator
      _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,
       const _Key& __k) const;

    public:

      _Rb_tree() { }

      _Rb_tree(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_impl(__comp, _Node_allocator(__a)) { }

      _Rb_tree(const _Rb_tree& __x)
      : _M_impl(__x._M_impl._M_key_compare,
         _Alloc_traits::_S_select_on_copy(__x._M_get_Node_allocator()))
      {
 if (__x._M_root() != 0)
   {
     _M_root() = _M_copy(__x._M_begin(), _M_end());
     _M_leftmost() = _S_minimum(_M_root());
     _M_rightmost() = _S_maximum(_M_root());
     _M_impl._M_node_count = __x._M_impl._M_node_count;
   }
      }
# 857 "/usr/include/c++/5/bits/stl_tree.h" 3
      ~_Rb_tree()
      { _M_erase(_M_begin()); }

      _Rb_tree&
      operator=(const _Rb_tree& __x);


      _Compare
      key_comp() const
      { return _M_impl._M_key_compare; }

      iterator
      begin()
      { return iterator(this->_M_impl._M_header._M_left); }

      const_iterator
      begin() const
      { return const_iterator(this->_M_impl._M_header._M_left); }

      iterator
      end()
      { return iterator(&this->_M_impl._M_header); }

      const_iterator
      end() const
      { return const_iterator(&this->_M_impl._M_header); }

      reverse_iterator
      rbegin()
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend()
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(begin()); }

      bool
      empty() const
      { return _M_impl._M_node_count == 0; }

      size_type
      size() const
      { return _M_impl._M_node_count; }

      size_type
      max_size() const
      { return _Alloc_traits::max_size(_M_get_Node_allocator()); }

      void



      swap(_Rb_tree& __t);
# 969 "/usr/include/c++/5/bits/stl_tree.h" 3
      pair<iterator, bool>
      _M_insert_unique(const value_type& __x);

      iterator
      _M_insert_equal(const value_type& __x);

      template<typename _NodeGen>
 iterator
 _M_insert_unique_(const_iterator __pos, const value_type& __x,
     _NodeGen&);

      iterator
      _M_insert_unique_(const_iterator __pos, const value_type& __x)
      {
 _Alloc_node __an(*this);
 return _M_insert_unique_(__pos, __x, __an);
      }

      template<typename _NodeGen>
 iterator
 _M_insert_equal_(const_iterator __pos, const value_type& __x,
    _NodeGen&);
      iterator
      _M_insert_equal_(const_iterator __pos, const value_type& __x)
      {
 _Alloc_node __an(*this);
 return _M_insert_equal_(__pos, __x, __an);
      }


      template<typename _InputIterator>
        void
        _M_insert_unique(_InputIterator __first, _InputIterator __last);

      template<typename _InputIterator>
        void
        _M_insert_equal(_InputIterator __first, _InputIterator __last);

    private:
      void
      _M_erase_aux(const_iterator __position);

      void
      _M_erase_aux(const_iterator __first, const_iterator __last);

    public:
# 1039 "/usr/include/c++/5/bits/stl_tree.h" 3
      void
      erase(iterator __position)
      { _M_erase_aux(__position); }

      void
      erase(const_iterator __position)
      { _M_erase_aux(__position); }

      size_type
      erase(const key_type& __x);
# 1061 "/usr/include/c++/5/bits/stl_tree.h" 3
      void
      erase(iterator __first, iterator __last)
      { _M_erase_aux(__first, __last); }

      void
      erase(const_iterator __first, const_iterator __last)
      { _M_erase_aux(__first, __last); }

      void
      erase(const key_type* __first, const key_type* __last);

      void
      clear()
      {
        _M_erase(_M_begin());
 _M_impl._M_reset();
      }


      iterator
      find(const key_type& __k);

      const_iterator
      find(const key_type& __k) const;

      size_type
      count(const key_type& __k) const;

      iterator
      lower_bound(const key_type& __k)
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      lower_bound(const key_type& __k) const
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      iterator
      upper_bound(const key_type& __k)
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      upper_bound(const key_type& __k) const
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      pair<iterator, iterator>
      equal_range(const key_type& __k);

      pair<const_iterator, const_iterator>
      equal_range(const key_type& __k) const;
# 1243 "/usr/include/c++/5/bits/stl_tree.h" 3
      bool
      __rb_verify() const;
# 1268 "/usr/include/c++/5/bits/stl_tree.h" 3
    };

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return __x.size() == __y.size()
      && std::equal(__x.begin(), __x.end(), __y.begin());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x == __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return __y < __x; }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__y < __x); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x < __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline void
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
  _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { __x.swap(__y); }
# 1448 "/usr/include/c++/5/bits/stl_tree.h" 3
  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    operator=(const _Rb_tree& __x)
    {
      if (this != &__x)
 {
# 1473 "/usr/include/c++/5/bits/stl_tree.h" 3
   _Reuse_or_alloc_node __roan(*this);
   _M_impl._M_reset();
   _M_impl._M_key_compare = __x._M_impl._M_key_compare;
   if (__x._M_root() != 0)
     {
       _M_root() = _M_copy(__x._M_begin(), _M_end(), __roan);
       _M_leftmost() = _S_minimum(_M_root());
       _M_rightmost() = _S_maximum(_M_root());
       _M_impl._M_node_count = __x._M_impl._M_node_count;
     }
 }

      return *this;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>



    template<typename _NodeGen>

      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_insert_(_Base_ptr __x, _Base_ptr __p,



   const _Val& __v,

   _NodeGen& __node_gen)
      {
 bool __insert_left = (__x != 0 || __p == _M_end()
         || _M_impl._M_key_compare(_KeyOfValue()(__v),
       _S_key(__p)));

 _Link_type __z = __node_gen((__v));

 _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
          this->_M_impl._M_header);
 ++_M_impl._M_node_count;
 return iterator(__z);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>



    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::



    _M_insert_lower(_Base_ptr __p, const _Val& __v)

    {
      bool __insert_left = (__p == _M_end()
       || !_M_impl._M_key_compare(_S_key(__p),
             _KeyOfValue()(__v)));

      _Link_type __z = _M_create_node((__v));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>



    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::



    _M_insert_equal_lower(const _Val& __v)

    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_lower(__y, (__v));
    }

  template<typename _Key, typename _Val, typename _KoV,
    typename _Compare, typename _Alloc>
    template<typename _NodeGen>
      typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type
      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
      _M_copy(_Const_Link_type __x, _Link_type __p, _NodeGen& __node_gen)
      {

 _Link_type __top = _M_clone_node(__x, __node_gen);
 __top->_M_parent = __p;

 try
   {
     if (__x->_M_right)
       __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
     __p = __top;
     __x = _S_left(__x);

     while (__x != 0)
       {
  _Link_type __y = _M_clone_node(__x, __node_gen);
  __p->_M_left = __y;
  __y->_M_parent = __p;
  if (__x->_M_right)
    __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
  __p = __y;
  __x = _S_left(__x);
       }
   }
 catch(...)
   {
     _M_erase(__top);
     throw;
   }
 return __top;
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Link_type __x)
    {

      while (__x != 0)
 {
   _M_erase(_S_right(__x));
   _Link_type __y = _S_left(__x);
   _M_drop_node(__x);
   __x = __y;
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Link_type __x, _Link_type __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k)
    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Link_type __xu(__x), __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<iterator,
            iterator>(_M_lower_bound(__x, __y, __k),
        _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<iterator, iterator>(iterator(__y),
          iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k) const
    {
      _Const_Link_type __x = _M_begin();
      _Const_Link_type __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Const_Link_type __xu(__x), __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<const_iterator,
            const_iterator>(_M_lower_bound(__x, __y, __k),
       _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<const_iterator, const_iterator>(const_iterator(__y),
        const_iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)



    {
      if (_M_root() == 0)
 {
   if (__t._M_root() != 0)
     {
       _M_root() = __t._M_root();
       _M_leftmost() = __t._M_leftmost();
       _M_rightmost() = __t._M_rightmost();
       _M_root()->_M_parent = _M_end();
       _M_impl._M_node_count = __t._M_impl._M_node_count;

       __t._M_impl._M_reset();
     }
 }
      else if (__t._M_root() == 0)
 {
   __t._M_root() = _M_root();
   __t._M_leftmost() = _M_leftmost();
   __t._M_rightmost() = _M_rightmost();
   __t._M_root()->_M_parent = __t._M_end();
   __t._M_impl._M_node_count = _M_impl._M_node_count;

   _M_impl._M_reset();
 }
      else
 {
   std::swap(_M_root(),__t._M_root());
   std::swap(_M_leftmost(),__t._M_leftmost());
   std::swap(_M_rightmost(),__t._M_rightmost());

   _M_root()->_M_parent = _M_end();
   __t._M_root()->_M_parent = __t._M_end();
   std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);
 }

      std::swap(this->_M_impl._M_key_compare, __t._M_impl._M_key_compare);

      _Alloc_traits::_S_on_swap(_M_get_Node_allocator(),
    __t._M_get_Node_allocator());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
      while (__x != 0)
 {
   __y = __x;
   __comp = _M_impl._M_key_compare(__k, _S_key(__x));
   __x = __comp ? _S_left(__x) : _S_right(__x);
 }
      iterator __j = iterator(__y);
      if (__comp)
 {
   if (__j == begin())
     return _Res(__x, __y);
   else
     --__j;
 }
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_equal_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = _M_impl._M_key_compare(__k, _S_key(__x)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _Res(__x, __y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>



    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::



    _M_insert_unique(const _Val& __v)

    {
      typedef pair<iterator, bool> _Res;
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_unique_pos(_KeyOfValue()(__v));

      if (__res.second)
 {
   _Alloc_node __an(*this);
   return _Res(_M_insert_(__res.first, __res.second,
     (__v), __an),
        true);
 }

      return _Res(iterator(static_cast<_Link_type>(__res.first)), false);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>



    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::



    _M_insert_equal(const _Val& __v)

    {
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_equal_pos(_KeyOfValue()(__v));
      _Alloc_node __an(*this);
      return _M_insert_(__res.first, __res.second,
   (__v), __an);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
         typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_hint_unique_pos(const_iterator __position,
      const key_type& __k)
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;


      if (__pos._M_node == _M_end())
 {
   if (size() > 0
       && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
     return _Res(0, _M_rightmost());
   else
     return _M_get_insert_unique_pos(__k);
 }
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 {

   iterator __before = __pos;
   if (__pos._M_node == _M_leftmost())
     return _Res(_M_leftmost(), _M_leftmost());
   else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
     {
       if (_S_right(__before._M_node) == 0)
  return _Res(0, __before._M_node);
       else
  return _Res(__pos._M_node, __pos._M_node);
     }
   else
     return _M_get_insert_unique_pos(__k);
 }
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 {

   iterator __after = __pos;
   if (__pos._M_node == _M_rightmost())
     return _Res(0, _M_rightmost());
   else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
     {
       if (_S_right(__pos._M_node) == 0)
  return _Res(0, __pos._M_node);
       else
  return _Res(__after._M_node, __after._M_node);
     }
   else
     return _M_get_insert_unique_pos(__k);
 }
      else

 return _Res(__pos._M_node, 0);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>



    template<typename _NodeGen>

      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_insert_unique_(const_iterator __position,



   const _Val& __v,

   _NodeGen& __node_gen)
    {
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));

      if (__res.second)
 return _M_insert_(__res.first, __res.second,
     (__v),
     __node_gen);
      return iterator(static_cast<_Link_type>(__res.first));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
         typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_hint_equal_pos(const_iterator __position, const key_type& __k)
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;


      if (__pos._M_node == _M_end())
 {
   if (size() > 0
       && !_M_impl._M_key_compare(__k, _S_key(_M_rightmost())))
     return _Res(0, _M_rightmost());
   else
     return _M_get_insert_equal_pos(__k);
 }
      else if (!_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 {

   iterator __before = __pos;
   if (__pos._M_node == _M_leftmost())
     return _Res(_M_leftmost(), _M_leftmost());
   else if (!_M_impl._M_key_compare(__k, _S_key((--__before)._M_node)))
     {
       if (_S_right(__before._M_node) == 0)
  return _Res(0, __before._M_node);
       else
  return _Res(__pos._M_node, __pos._M_node);
     }
   else
     return _M_get_insert_equal_pos(__k);
 }
      else
 {

   iterator __after = __pos;
   if (__pos._M_node == _M_rightmost())
     return _Res(0, _M_rightmost());
   else if (!_M_impl._M_key_compare(_S_key((++__after)._M_node), __k))
     {
       if (_S_right(__pos._M_node) == 0)
  return _Res(0, __pos._M_node);
       else
  return _Res(__after._M_node, __after._M_node);
     }
   else
     return _Res(0, 0);
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>



    template<typename _NodeGen>

      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_insert_equal_(const_iterator __position,



         const _Val& __v,

         _NodeGen& __node_gen)
      {
 pair<_Base_ptr, _Base_ptr> __res
   = _M_get_insert_hint_equal_pos(__position, _KeyOfValue()(__v));

 if (__res.second)
   return _M_insert_(__res.first, __res.second,
       (__v),
       __node_gen);

 return _M_insert_equal_lower((__v));
      }
# 2215 "/usr/include/c++/5/bits/stl_tree.h" 3
  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_unique(_II __first, _II __last)
      {
 _Alloc_node __an(*this);
 for (; __first != __last; ++__first)
   _M_insert_unique_(end(), *__first, __an);
      }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_equal(_II __first, _II __last)
      {
 _Alloc_node __an(*this);
 for (; __first != __last; ++__first)
   _M_insert_equal_(end(), *__first, __an);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
 static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
    (const_cast<_Base_ptr>(__position._M_node),
     this->_M_impl._M_header));
      _M_drop_node(__y);
      --_M_impl._M_node_count;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __first, const_iterator __last)
    {
      if (__first == begin() && __last == end())
 clear();
      else
 while (__first != __last)
   erase(__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key& __x)
    {
      pair<iterator, iterator> __p = equal_range(__x);
      const size_type __old_size = size();
      erase(__p.first, __p.second);
      return __old_size - size();
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key* __first, const _Key* __last)
    {
      while (__first != __last)
 erase(*__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    count(const _Key& __k) const
    {
      pair<const_iterator, const_iterator> __p = equal_range(__k);
      const size_type __n = std::distance(__p.first, __p.second);
      return __n;
    }

  __attribute__ ((__pure__)) unsigned int
  _Rb_tree_black_count(const _Rb_tree_node_base* __node,
                       const _Rb_tree_node_base* __root) throw ();

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    bool
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const
    {
      if (_M_impl._M_node_count == 0 || begin() == end())
 return _M_impl._M_node_count == 0 && begin() == end()
        && this->_M_impl._M_header._M_left == _M_end()
        && this->_M_impl._M_header._M_right == _M_end();

      unsigned int __len = _Rb_tree_black_count(_M_leftmost(), _M_root());
      for (const_iterator __it = begin(); __it != end(); ++__it)
 {
   _Const_Link_type __x = static_cast<_Const_Link_type>(__it._M_node);
   _Const_Link_type __L = _S_left(__x);
   _Const_Link_type __R = _S_right(__x);

   if (__x->_M_color == _S_red)
     if ((__L && __L->_M_color == _S_red)
  || (__R && __R->_M_color == _S_red))
       return false;

   if (__L && _M_impl._M_key_compare(_S_key(__x), _S_key(__L)))
     return false;
   if (__R && _M_impl._M_key_compare(_S_key(__R), _S_key(__x)))
     return false;

   if (!__L && !__R && _Rb_tree_black_count(__x, _M_root()) != __len)
     return false;
 }

      if (_M_leftmost() != _Rb_tree_node_base::_S_minimum(_M_root()))
 return false;
      if (_M_rightmost() != _Rb_tree_node_base::_S_maximum(_M_root()))
 return false;
      return true;
    }


}
# 61 "/usr/include/c++/5/map" 2 3
# 1 "/usr/include/c++/5/bits/stl_map.h" 1 3
# 66 "/usr/include/c++/5/bits/stl_map.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 94 "/usr/include/c++/5/bits/stl_map.h" 3
  template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
            typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class map
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename _Alloc::value_type _Alloc_value_type;
     
     

     

    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class map<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<value_type>::other _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;


      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Pair_alloc_type> _Alloc_traits;

    public:


      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;







      map()



      : _M_t() { }






      explicit
      map(const _Compare& __comp,
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a)) { }
# 185 "/usr/include/c++/5/bits/stl_map.h" 3
      map(const map& __x)
      : _M_t(__x._M_t) { }
# 255 "/usr/include/c++/5/bits/stl_map.h" 3
      template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_unique(__first, __last); }
# 272 "/usr/include/c++/5/bits/stl_map.h" 3
      template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last,
     const _Compare& __comp,
     const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Pair_alloc_type(__a))
        { _M_t._M_insert_unique(__first, __last); }
# 295 "/usr/include/c++/5/bits/stl_map.h" 3
      map&
      operator=(const map& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 327 "/usr/include/c++/5/bits/stl_map.h" 3
      allocator_type
      get_allocator() const
      { return allocator_type(_M_t.get_allocator()); }







      iterator
      begin()
      { return _M_t.begin(); }






      const_iterator
      begin() const
      { return _M_t.begin(); }






      iterator
      end()
      { return _M_t.end(); }






      const_iterator
      end() const
      { return _M_t.end(); }






      reverse_iterator
      rbegin()
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const
      { return _M_t.rbegin(); }






      reverse_iterator
      rend()
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const
      { return _M_t.rend(); }
# 446 "/usr/include/c++/5/bits/stl_map.h" 3
      bool
      empty() const
      { return _M_t.empty(); }


      size_type
      size() const
      { return _M_t.size(); }


      size_type
      max_size() const
      { return _M_t.max_size(); }
# 473 "/usr/include/c++/5/bits/stl_map.h" 3
      mapped_type&
      operator[](const key_type& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))





          __i = insert(__i, value_type(__k, mapped_type()));

 return (*__i).second;
      }
# 518 "/usr/include/c++/5/bits/stl_map.h" 3
      mapped_type&
      at(const key_type& __k)
      {
 iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }

      const mapped_type&
      at(const key_type& __k) const
      {
 const_iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }
# 611 "/usr/include/c++/5/bits/stl_map.h" 3
      std::pair<iterator, bool>
      insert(const value_type& __x)
      { return _M_t._M_insert_unique(__x); }
# 660 "/usr/include/c++/5/bits/stl_map.h" 3
      iterator



      insert(iterator __position, const value_type& __x)

      { return _M_t._M_insert_unique_(__position, __x); }
# 686 "/usr/include/c++/5/bits/stl_map.h" 3
      template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_unique(__first, __last); }
# 727 "/usr/include/c++/5/bits/stl_map.h" 3
      void
      erase(iterator __position)
      { _M_t.erase(__position); }
# 743 "/usr/include/c++/5/bits/stl_map.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 779 "/usr/include/c++/5/bits/stl_map.h" 3
      void
      erase(iterator __first, iterator __last)
      { _M_t.erase(__first, __last); }
# 795 "/usr/include/c++/5/bits/stl_map.h" 3
      void
      swap(map& __x)



      { _M_t.swap(__x._M_t); }







      void
      clear()
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 844 "/usr/include/c++/5/bits/stl_map.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }
# 869 "/usr/include/c++/5/bits/stl_map.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }
# 890 "/usr/include/c++/5/bits/stl_map.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
# 914 "/usr/include/c++/5/bits/stl_map.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
# 939 "/usr/include/c++/5/bits/stl_map.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }
# 959 "/usr/include/c++/5/bits/stl_map.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }
# 979 "/usr/include/c++/5/bits/stl_map.h" 3
      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 1008 "/usr/include/c++/5/bits/stl_map.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }
# 1037 "/usr/include/c++/5/bits/stl_map.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }
# 1050 "/usr/include/c++/5/bits/stl_map.h" 3
      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator==(const map<_K1, _T1, _C1, _A1>&,
     const map<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator<(const map<_K1, _T1, _C1, _A1>&,
    const map<_K1, _T1, _C1, _A1>&);
    };
# 1071 "/usr/include/c++/5/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 1088 "/usr/include/c++/5/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const map<_Key, _Tp, _Compare, _Alloc>& __x,
              const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const map<_Key, _Tp, _Compare, _Alloc>& __x,
              const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(map<_Key, _Tp, _Compare, _Alloc>& __x,
  map<_Key, _Tp, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 62 "/usr/include/c++/5/map" 2 3
# 1 "/usr/include/c++/5/bits/stl_multimap.h" 1 3
# 64 "/usr/include/c++/5/bits/stl_multimap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 92 "/usr/include/c++/5/bits/stl_multimap.h" 3
  template <typename _Key, typename _Tp,
     typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class multimap
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename _Alloc::value_type _Alloc_value_type;
     
     

     

    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class multimap<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<value_type>::other _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;

      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Pair_alloc_type> _Alloc_traits;

    public:


      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;







      multimap()



      : _M_t() { }






      explicit
      multimap(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a)) { }
# 183 "/usr/include/c++/5/bits/stl_multimap.h" 3
      multimap(const multimap& __x)
      : _M_t(__x._M_t) { }
# 251 "/usr/include/c++/5/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_equal(__first, __last); }
# 267 "/usr/include/c++/5/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last,
   const _Compare& __comp,
   const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Pair_alloc_type(__a))
        { _M_t._M_insert_equal(__first, __last); }
# 290 "/usr/include/c++/5/bits/stl_multimap.h" 3
      multimap&
      operator=(const multimap& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 322 "/usr/include/c++/5/bits/stl_multimap.h" 3
      allocator_type
      get_allocator() const
      { return allocator_type(_M_t.get_allocator()); }







      iterator
      begin()
      { return _M_t.begin(); }






      const_iterator
      begin() const
      { return _M_t.begin(); }






      iterator
      end()
      { return _M_t.end(); }






      const_iterator
      end() const
      { return _M_t.end(); }






      reverse_iterator
      rbegin()
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const
      { return _M_t.rbegin(); }






      reverse_iterator
      rend()
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const
      { return _M_t.rend(); }
# 439 "/usr/include/c++/5/bits/stl_multimap.h" 3
      bool
      empty() const
      { return _M_t.empty(); }


      size_type
      size() const
      { return _M_t.size(); }


      size_type
      max_size() const
      { return _M_t.max_size(); }
# 519 "/usr/include/c++/5/bits/stl_multimap.h" 3
      iterator
      insert(const value_type& __x)
      { return _M_t._M_insert_equal(__x); }
# 552 "/usr/include/c++/5/bits/stl_multimap.h" 3
      iterator



      insert(iterator __position, const value_type& __x)

      { return _M_t._M_insert_equal_(__position, __x); }
# 579 "/usr/include/c++/5/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_equal(__first, __last); }
# 633 "/usr/include/c++/5/bits/stl_multimap.h" 3
      void
      erase(iterator __position)
      { _M_t.erase(__position); }
# 649 "/usr/include/c++/5/bits/stl_multimap.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 689 "/usr/include/c++/5/bits/stl_multimap.h" 3
      void
      erase(iterator __first, iterator __last)
      { _M_t.erase(__first, __last); }
# 705 "/usr/include/c++/5/bits/stl_multimap.h" 3
      void
      swap(multimap& __x)



      { _M_t.swap(__x._M_t); }







      void
      clear()
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 753 "/usr/include/c++/5/bits/stl_multimap.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }
# 777 "/usr/include/c++/5/bits/stl_multimap.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }
# 795 "/usr/include/c++/5/bits/stl_multimap.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.count(__x); }
# 819 "/usr/include/c++/5/bits/stl_multimap.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
# 844 "/usr/include/c++/5/bits/stl_multimap.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }
# 864 "/usr/include/c++/5/bits/stl_multimap.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }
# 884 "/usr/include/c++/5/bits/stl_multimap.h" 3
      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 911 "/usr/include/c++/5/bits/stl_multimap.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }
# 938 "/usr/include/c++/5/bits/stl_multimap.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }
# 951 "/usr/include/c++/5/bits/stl_multimap.h" 3
      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator==(const multimap<_K1, _T1, _C1, _A1>&,
     const multimap<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator<(const multimap<_K1, _T1, _C1, _A1>&,
    const multimap<_K1, _T1, _C1, _A1>&);
  };
# 972 "/usr/include/c++/5/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 989 "/usr/include/c++/5/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
              const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
              const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,
         multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 63 "/usr/include/c++/5/map" 2 3
# 17 "src/generate.h" 2
# 1 "/usr/include/c++/5/utility" 1 3
# 58 "/usr/include/c++/5/utility" 3
       
# 59 "/usr/include/c++/5/utility" 3
# 69 "/usr/include/c++/5/utility" 3
# 1 "/usr/include/c++/5/bits/stl_relops.h" 1 3
# 67 "/usr/include/c++/5/bits/stl_relops.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
  namespace rel_ops
  {
 
# 85 "/usr/include/c++/5/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 98 "/usr/include/c++/5/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 111 "/usr/include/c++/5/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 124 "/usr/include/c++/5/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }

 
  }

}
# 70 "/usr/include/c++/5/utility" 2 3
# 18 "src/generate.h" 2
# 1 "/usr/include/c++/5/vector" 1 3
# 58 "/usr/include/c++/5/vector" 3
       
# 59 "/usr/include/c++/5/vector" 3



# 1 "/usr/include/c++/5/bits/stl_construct.h" 1 3
# 63 "/usr/include/c++/5/bits/stl_construct.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 77 "/usr/include/c++/5/bits/stl_construct.h" 3
  template<typename _T1, typename _T2>
    inline void
    _Construct(_T1* __p, const _T2& __value)
    {


      ::new(static_cast<void*>(__p)) _T1(__value);
    }





  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(std::__addressof(*__first));
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };






  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }







  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __first != __last; ++__first)
 __traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }


}
# 63 "/usr/include/c++/5/vector" 2 3
# 1 "/usr/include/c++/5/bits/stl_uninitialized.h" 1 3
# 59 "/usr/include/c++/5/bits/stl_uninitialized.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        {
   _ForwardIterator __cur = __result;
   try
     {
       for (; __first != __last; ++__first, ++__cur)
  std::_Construct(std::__addressof(*__cur), *__first);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__result, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
    };
# 105 "/usr/include/c++/5/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;

      const bool __assignable = true;







      return std::__uninitialized_copy<__is_trivial(_ValueType1)
           && __is_trivial(_ValueType2)
           && __assignable>::
 __uninit_copy(__first, __last, __result);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        { std::fill(__first, __last, __x); }
    };
# 171 "/usr/include/c++/5/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = true;





      std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill(__first, __last, __x);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill_n
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static _ForwardIterator
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill_n<true>
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static _ForwardIterator
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        { return std::fill_n(__first, __n, __x); }
    };
# 234 "/usr/include/c++/5/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = true;




      return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill_n(__first, __n, __x);
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __first != __last; ++__first, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur, __alloc);
   throw;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a((__first),
      (__last),
      __result, __alloc);
    }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
           _InputIterator __last,
           _ForwardIterator __result,
           _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
 ((__first),
  (__last), __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    { return std::uninitialized_fill_n(__first, __n, __x); }
# 370 "/usr/include/c++/5/bits/stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      try
 {
   return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      try
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__first2, __mid2, __alloc);
   throw;
 }
    }
# 685 "/usr/include/c++/5/bits/stl_uninitialized.h" 3

}
# 64 "/usr/include/c++/5/vector" 2 3
# 1 "/usr/include/c++/5/bits/stl_vector.h" 1 3
# 66 "/usr/include/c++/5/bits/stl_vector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
        pointer;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 pointer _M_start;
 pointer _M_finish;
 pointer _M_end_of_storage;

 _Vector_impl()
 : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 { }

 _Vector_impl(_Tp_alloc_type const& __a)
 : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 { }
# 101 "/usr/include/c++/5/bits/stl_vector.h" 3
 void _M_swap_data(_Vector_impl& __x)
 {
   std::swap(_M_start, __x._M_start);
   std::swap(_M_finish, __x._M_finish);
   std::swap(_M_end_of_storage, __x._M_end_of_storage);
 }
      };

    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator()
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
      : _M_impl() { }

      _Vector_base(const allocator_type& __a)
      : _M_impl(__a) { }

      _Vector_base(size_t __n)
      : _M_impl()
      { _M_create_storage(__n); }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      { _M_create_storage(__n); }
# 159 "/usr/include/c++/5/bits/stl_vector.h" 3
      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start); }

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
      }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 if (__p)
   _Tr::deallocate(_M_impl, __p, __n);
      }

    private:
      void
      _M_create_storage(size_t __n)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }
    };
# 213 "/usr/include/c++/5/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {

      typedef typename _Alloc::value_type _Alloc_value_type;
     
     

      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Alloc_traits;

    public:
      typedef _Tp value_type;
      typedef typename _Base::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:






      vector()



      : _Base() { }





      explicit
      vector(const allocator_type& __a)
      : _Base(__a) { }
# 302 "/usr/include/c++/5/bits/stl_vector.h" 3
      explicit
      vector(size_type __n, const value_type& __value = value_type(),
      const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_fill_initialize(__n, __value); }
# 318 "/usr/include/c++/5/bits/stl_vector.h" 3
      vector(const vector& __x)
      : _Base(__x.size(),
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
      { this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 406 "/usr/include/c++/5/bits/stl_vector.h" 3
      template<typename _InputIterator>
        vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_initialize_dispatch(__first, __last, _Integral());
 }
# 423 "/usr/include/c++/5/bits/stl_vector.h" 3
      ~vector()
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator()); }
# 435 "/usr/include/c++/5/bits/stl_vector.h" 3
      vector&
      operator=(const vector& __x);
# 487 "/usr/include/c++/5/bits/stl_vector.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 510 "/usr/include/c++/5/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        assign(_InputIterator __first, _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_assign_dispatch(__first, __last, _Integral());
 }
# 538 "/usr/include/c++/5/bits/stl_vector.h" 3
      using _Base::get_allocator;







      iterator
      begin()
      { return iterator(this->_M_impl._M_start); }






      const_iterator
      begin() const
      { return const_iterator(this->_M_impl._M_start); }






      iterator
      end()
      { return iterator(this->_M_impl._M_finish); }






      const_iterator
      end() const
      { return const_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(begin()); }
# 653 "/usr/include/c++/5/bits/stl_vector.h" 3
      size_type
      size() const
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }


      size_type
      max_size() const
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
# 712 "/usr/include/c++/5/bits/stl_vector.h" 3
      void
      resize(size_type __new_size, value_type __x = value_type())
      {
 if (__new_size > size())
   insert(end(), __new_size - size(), __x);
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 733 "/usr/include/c++/5/bits/stl_vector.h" 3
      size_type
      capacity() const
      { return size_type(this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start); }





      bool
      empty() const
      { return begin() == end(); }
# 763 "/usr/include/c++/5/bits/stl_vector.h" 3
      void
      reserve(size_type __n);
# 778 "/usr/include/c++/5/bits/stl_vector.h" 3
      reference
      operator[](size_type __n)
      { return *(this->_M_impl._M_start + __n); }
# 793 "/usr/include/c++/5/bits/stl_vector.h" 3
      const_reference
      operator[](size_type __n) const
      { return *(this->_M_impl._M_start + __n); }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("vector::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
      }

    public:
# 821 "/usr/include/c++/5/bits/stl_vector.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 839 "/usr/include/c++/5/bits/stl_vector.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front()
      { return *begin(); }





      const_reference
      front() const
      { return *begin(); }





      reference
      back()
      { return *(end() - 1); }





      const_reference
      back() const
      { return *(end() - 1); }
# 888 "/usr/include/c++/5/bits/stl_vector.h" 3
      pointer

      data()
      { return _M_data_ptr(this->_M_impl._M_start); }




      const_pointer

      data() const
      { return _M_data_ptr(this->_M_impl._M_start); }
# 912 "/usr/include/c++/5/bits/stl_vector.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
                              __x);
     ++this->_M_impl._M_finish;
   }
 else



   _M_insert_aux(end(), __x);

      }
# 948 "/usr/include/c++/5/bits/stl_vector.h" 3
      void
      pop_back()
      {
 --this->_M_impl._M_finish;
 _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      }
# 997 "/usr/include/c++/5/bits/stl_vector.h" 3
      iterator
      insert(iterator __position, const value_type& __x);
# 1071 "/usr/include/c++/5/bits/stl_vector.h" 3
      void
      insert(iterator __position, size_type __n, const value_type& __x)
      { _M_fill_insert(__position, __n, __x); }
# 1118 "/usr/include/c++/5/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        insert(iterator __position, _InputIterator __first,
        _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_insert_dispatch(__position, __first, __last, _Integral());
 }
# 1144 "/usr/include/c++/5/bits/stl_vector.h" 3
      iterator




      erase(iterator __position)
      { return _M_erase(__position); }
# 1171 "/usr/include/c++/5/bits/stl_vector.h" 3
      iterator
# 1180 "/usr/include/c++/5/bits/stl_vector.h" 3
      erase(iterator __first, iterator __last)
      { return _M_erase(__first, __last); }
# 1193 "/usr/include/c++/5/bits/stl_vector.h" 3
      void
      swap(vector& __x)



      {
 this->_M_impl._M_swap_data(__x._M_impl);
 _Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
                           __x._M_get_Tp_allocator());
      }







      void
      clear()
      { _M_erase_at_end(this->_M_impl._M_start); }

    protected:




      template<typename _ForwardIterator>
        pointer
        _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
        {
   pointer __result = this->_M_allocate(__n);
   try
     {
       std::__uninitialized_copy_a(__first, __last, __result,
       _M_get_Tp_allocator());
       return __result;
     }
   catch(...)
     {
       _M_deallocate(__result, __n);
       throw;
     }
 }
# 1245 "/usr/include/c++/5/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
        {
   this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
   this->_M_impl._M_end_of_storage =
     this->_M_impl._M_start + static_cast<size_type>(__n);
   _M_fill_initialize(static_cast<size_type>(__n), __value);
 }


      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_initialize(_InputIterator __first,
       _InputIterator __last, std::input_iterator_tag)
        {
   for (; __first != __last; ++__first)



     push_back(*__first);

 }


      template<typename _ForwardIterator>
        void
        _M_range_initialize(_ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag)
        {
   const size_type __n = std::distance(__first, __last);
   this->_M_impl._M_start = this->_M_allocate(__n);
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   this->_M_impl._M_finish =
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
 }



      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
     _M_get_Tp_allocator());
      }
# 1323 "/usr/include/c++/5/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
        void
        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_assign_aux(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



      void
      _M_fill_assign(size_type __n, const value_type& __val);
# 1363 "/usr/include/c++/5/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
        { _M_fill_insert(__pos, __n, __val); }


      template<typename _InputIterator>
        void
        _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_insert(__pos, __first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
# 1408 "/usr/include/c++/5/bits/stl_vector.h" 3
      void
      _M_insert_aux(iterator __position, const value_type& __x);
# 1421 "/usr/include/c++/5/bits/stl_vector.h" 3
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }





      void
      _M_erase_at_end(pointer __pos)
      {
 std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 this->_M_impl._M_finish = __pos;
      }

      iterator
      _M_erase(iterator __position);

      iterator
      _M_erase(iterator __first, iterator __last);
# 1491 "/usr/include/c++/5/bits/stl_vector.h" 3
      template<typename _Ptr>
 _Ptr
 _M_data_ptr(_Ptr __ptr) const
 { return __ptr; }

    };
# 1509 "/usr/include/c++/5/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 1526 "/usr/include/c++/5/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    { __x.swap(__y); }


}
# 65 "/usr/include/c++/5/vector" 2 3
# 1 "/usr/include/c++/5/bits/stl_bvector.h" 1 3
# 63 "/usr/include/c++/5/bits/stl_bvector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

    _Bit_reference() : _M_p(0), _M_mask(0) { }

    operator bool() const
    { return !!(*_M_p & _M_mask); }

    _Bit_reference&
    operator=(bool __x)
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }

    _Bit_reference&
    operator=(const _Bit_reference& __x)
    { return *this = bool(__x); }

    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

    void
    flip()
    { *_M_p ^= _M_mask; }
  };
# 136 "/usr/include/c++/5/bits/stl_bvector.h" 3
  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

    void
    _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

    void
    _M_bump_down()
    {
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

    void
    _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    bool
    operator==(const _Bit_iterator_base& __i) const
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }

    bool
    operator<(const _Bit_iterator_base& __i) const
    {
      return _M_p < __i._M_p
      || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
    { return !(*this == __i); }

    bool
    operator>(const _Bit_iterator_base& __i) const
    { return __i < *this; }

    bool
    operator<=(const _Bit_iterator_base& __i) const
    { return !(__i < *this); }

    bool
    operator>=(const _Bit_iterator_base& __i) const
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     + __x._M_offset - __y._M_offset);
  }

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
    { return reference(_M_p, 1UL << _M_offset); }

    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    iterator
    operator+(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp += __i;
    }

    iterator
    operator-(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp -= __i;
    }

    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_iterator
  operator+(ptrdiff_t __n, const _Bit_iterator& __x)
  { return __x + __n; }

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;
    typedef const bool* pointer;
    typedef _Bit_const_iterator const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

    _Bit_iterator
    _M_const_cast() const
    { return _Bit_iterator(_M_p, _M_offset); }

    const_reference
    operator*() const
    { return _Bit_reference(_M_p, 1UL << _M_offset); }

    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    const_iterator
    operator+(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp += __i;
    }

    const_iterator
    operator-(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp -= __i;
    }

    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_const_iterator
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  inline void
  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)
  {
    for (; __first != __last; ++__first)
      *__first = __x;
  }

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 std::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);
 __fill_bvector(__first, _Bit_iterator(__first._M_p + 1, 0), __x);
 __fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);
      }
    else
      __fill_bvector(__first, __last, __x);
  }

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Bit_type>::other _Bit_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Bit_alloc_type>
 _Bit_alloc_traits;
      typedef typename _Bit_alloc_traits::pointer _Bit_pointer;

      struct _Bvector_impl
      : public _Bit_alloc_type
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_pointer _M_end_of_storage;

 _Bvector_impl()
 : _Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 { }

 _Bvector_impl(const _Bit_alloc_type& __a)
 : _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 { }
# 441 "/usr/include/c++/5/bits/stl_bvector.h" 3
 _Bit_type*
 _M_end_addr() const
 {
   if (_M_end_of_storage)
     return std::__addressof(_M_end_of_storage[-1]) + 1;
   return 0;
 }
      };

    public:
      typedef _Alloc allocator_type;

      _Bit_alloc_type&
      _M_get_Bit_allocator()
      { return *static_cast<_Bit_alloc_type*>(&this->_M_impl); }

      const _Bit_alloc_type&
      _M_get_Bit_allocator() const
      { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Bit_allocator()); }

      _Bvector_base()
      : _M_impl() { }

      _Bvector_base(const allocator_type& __a)
      : _M_impl(__a) { }
# 484 "/usr/include/c++/5/bits/stl_bvector.h" 3
      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

      _Bit_pointer
      _M_allocate(size_t __n)
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }

      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   {
     const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
     _Bit_alloc_traits::deallocate(_M_impl,
       _M_impl._M_end_of_storage - __n,
       __n);
   }
      }

      static size_t
      _S_nword(size_t __n)
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
    };


}




namespace std __attribute__ ((__visibility__ ("default")))
{

# 540 "/usr/include/c++/5/bits/stl_bvector.h" 3
template<typename _Alloc>
  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
  {
    typedef _Bvector_base<_Alloc> _Base;
    typedef typename _Base::_Bit_pointer _Bit_pointer;
    typedef typename _Base::_Bit_alloc_traits _Bit_alloc_traits;





  public:
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference* pointer;
    typedef const bool* const_pointer;
    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef _Alloc allocator_type;

    allocator_type get_allocator() const
    { return _Base::get_allocator(); }

  protected:
    using _Base::_M_allocate;
    using _Base::_M_deallocate;
    using _Base::_S_nword;
    using _Base::_M_get_Bit_allocator;

  public:
    vector()



    : _Base() { }

    explicit
    vector(const allocator_type& __a)
    : _Base(__a) { }
# 600 "/usr/include/c++/5/bits/stl_bvector.h" 3
    explicit
    vector(size_type __n, const bool& __value = bool(),
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize(__n);
      std::fill(this->_M_impl._M_start._M_p, this->_M_impl._M_end_addr(),
  __value ? ~0 : 0);
    }


    vector(const vector& __x)
    : _Base(_Bit_alloc_traits::_S_select_on_copy(__x._M_get_Bit_allocator()))
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }
# 667 "/usr/include/c++/5/bits/stl_bvector.h" 3
    template<typename _InputIterator>
      vector(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_initialize_dispatch(__first, __last, _Integral());
      }


    ~vector() { }

    vector&
    operator=(const vector& __x)
    {
      if (&__x == this)
 return *this;
# 699 "/usr/include/c++/5/bits/stl_bvector.h" 3
      if (__x.size() > capacity())
 {
   this->_M_deallocate();
   _M_initialize(__x.size());
 }
      this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
      begin());
      return *this;
    }
# 752 "/usr/include/c++/5/bits/stl_bvector.h" 3
    void
    assign(size_type __n, const bool& __x)
    { _M_fill_assign(__n, __x); }
# 763 "/usr/include/c++/5/bits/stl_bvector.h" 3
    template<typename _InputIterator>
      void
      assign(_InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_assign_dispatch(__first, __last, _Integral());
      }
# 778 "/usr/include/c++/5/bits/stl_bvector.h" 3
    iterator
    begin()
    { return this->_M_impl._M_start; }

    const_iterator
    begin() const
    { return this->_M_impl._M_start; }

    iterator
    end()
    { return this->_M_impl._M_finish; }

    const_iterator
    end() const
    { return this->_M_impl._M_finish; }

    reverse_iterator
    rbegin()
    { return reverse_iterator(end()); }

    const_reverse_iterator
    rbegin() const
    { return const_reverse_iterator(end()); }

    reverse_iterator
    rend()
    { return reverse_iterator(begin()); }

    const_reverse_iterator
    rend() const
    { return const_reverse_iterator(begin()); }
# 828 "/usr/include/c++/5/bits/stl_bvector.h" 3
    size_type
    size() const
    { return size_type(end() - begin()); }

    size_type
    max_size() const
    {
      const size_type __isize =
 __gnu_cxx::__numeric_traits<difference_type>::__max
 - int(_S_word_bit) + 1;
      const size_type __asize
 = _Bit_alloc_traits::max_size(_M_get_Bit_allocator());
      return (__asize <= __isize / int(_S_word_bit)
       ? __asize * int(_S_word_bit) : __isize);
    }

    size_type
    capacity() const
    { return size_type(const_iterator(this->_M_impl._M_end_addr(), 0)
         - begin()); }

    bool
    empty() const
    { return begin() == end(); }

    reference
    operator[](size_type __n)
    {
      return *iterator(this->_M_impl._M_start._M_p
         + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

    const_reference
    operator[](size_type __n) const
    {
      return *const_iterator(this->_M_impl._M_start._M_p
        + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

  protected:
    void
    _M_range_check(size_type __n) const
    {
      if (__n >= this->size())
 __throw_out_of_range_fmt(("vector<bool>::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                          ,
     __n, this->size());
    }

  public:
    reference
    at(size_type __n)
    { _M_range_check(__n); return (*this)[__n]; }

    const_reference
    at(size_type __n) const
    { _M_range_check(__n); return (*this)[__n]; }

    void
    reserve(size_type __n)
    {
      if (__n > max_size())
 __throw_length_error(("vector::reserve"));
      if (capacity() < __n)
 _M_reallocate(__n);
    }

    reference
    front()
    { return *begin(); }

    const_reference
    front() const
    { return *begin(); }

    reference
    back()
    { return *(end() - 1); }

    const_reference
    back() const
    { return *(end() - 1); }






    void
    data() { }

    void
    push_back(bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(end(), __x);
    }

    void
    swap(vector& __x)



    {
      std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
      std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
      std::swap(this->_M_impl._M_end_of_storage,
  __x._M_impl._M_end_of_storage);
      _Bit_alloc_traits::_S_on_swap(_M_get_Bit_allocator(),
        __x._M_get_Bit_allocator());
    }


    static void
    swap(reference __x, reference __y)
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

    iterator



    insert(iterator __position, const bool& __x = bool())

    {
      const difference_type __n = __position - begin();
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr()
   && __position == end())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(__position._M_const_cast(), __x);
      return begin() + __n;
    }
# 981 "/usr/include/c++/5/bits/stl_bvector.h" 3
    template<typename _InputIterator>
      void
      insert(iterator __position,
      _InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_insert_dispatch(__position, __first, __last, _Integral());
      }
# 1000 "/usr/include/c++/5/bits/stl_bvector.h" 3
    void
    insert(iterator __position, size_type __n, const bool& __x)
    { _M_fill_insert(__position, __n, __x); }
# 1011 "/usr/include/c++/5/bits/stl_bvector.h" 3
    void
    pop_back()
    { --this->_M_impl._M_finish; }

    iterator



    erase(iterator __position)

    { return _M_erase(__position._M_const_cast()); }

    iterator



    erase(iterator __first, iterator __last)

    { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }

    void
    resize(size_type __new_size, bool __x = bool())
    {
      if (__new_size < size())
        _M_erase_at_end(begin() + difference_type(__new_size));
      else
        insert(end(), __new_size - size(), __x);
    }







    void
    flip()
    {
      _Bit_type * const __end = this->_M_impl._M_end_addr();
      for (_Bit_type * __p = this->_M_impl._M_start._M_p; __p != __end; ++__p)
        *__p = ~*__p;
    }

    void
    clear()
    { _M_erase_at_end(begin()); }
# 1070 "/usr/include/c++/5/bits/stl_bvector.h" 3
  protected:

    iterator
    _M_copy_aligned(const_iterator __first, const_iterator __last,
      iterator __result)
    {
      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
      return std::copy(const_iterator(__last._M_p, 0), __last,
         iterator(__q, 0));
    }

    void
    _M_initialize(size_type __n)
    {
      _Bit_pointer __q = this->_M_allocate(__n);
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
      this->_M_impl._M_start = iterator(std::__addressof(*__q), 0);
      this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
    }

    void
    _M_reallocate(size_type __n);
# 1102 "/usr/include/c++/5/bits/stl_bvector.h" 3
    template<typename _Integer>
      void
      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
      {
 _M_initialize(static_cast<size_type>(__n));
 std::fill(this->_M_impl._M_start._M_p,
    this->_M_impl._M_end_addr(), __x ? ~0 : 0);
      }

    template<typename _InputIterator>
      void
      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
        __false_type)
      { _M_initialize_range(__first, __last,
       std::__iterator_category(__first)); }

    template<typename _InputIterator>
      void
      _M_initialize_range(_InputIterator __first, _InputIterator __last,
     std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   push_back(*__first);
      }

    template<typename _ForwardIterator>
      void
      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
     std::forward_iterator_tag)
      {
 const size_type __n = std::distance(__first, __last);
 _M_initialize(__n);
 std::copy(__first, __last, this->_M_impl._M_start);
      }



    template<typename _Integer>
      void
      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
      { _M_fill_assign(__n, __val); }

    template<class _InputIterator>
      void
      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }

    void
    _M_fill_assign(size_t __n, bool __x)
    {
      if (__n > size())
 {
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_addr(), __x ? ~0 : 0);
   insert(end(), __n - size(), __x);
 }
      else
 {
   _M_erase_at_end(begin() + __n);
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_addr(), __x ? ~0 : 0);
 }
    }

    template<typename _InputIterator>
      void
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 iterator __cur = begin();
 for (; __first != __last && __cur != end(); ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

    template<typename _ForwardIterator>
      void
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);
 if (__len < size())
   _M_erase_at_end(std::copy(__first, __last, begin()));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, begin());
     insert(end(), __mid, __last);
   }
      }





    template<typename _Integer>
      void
      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
    __true_type)
      { _M_fill_insert(__pos, __n, __x); }

    template<typename _InputIterator>
      void
      _M_insert_dispatch(iterator __pos,
    _InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_insert_range(__pos, __first, __last,
   std::__iterator_category(__first)); }

    void
    _M_fill_insert(iterator __position, size_type __n, bool __x);

    template<typename _InputIterator>
      void
      _M_insert_range(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

    template<typename _ForwardIterator>
      void
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag);

    void
    _M_insert_aux(iterator __position, bool __x);

    size_type
    _M_check_len(size_type __n, const char* __s) const
    {
      if (max_size() - size() < __n)
 __throw_length_error((__s));

      const size_type __len = size() + std::max(size(), __n);
      return (__len < size() || __len > max_size()) ? max_size() : __len;
    }

    void
    _M_erase_at_end(iterator __pos)
    { this->_M_impl._M_finish = __pos; }

    iterator
    _M_erase(iterator __pos);

    iterator
    _M_erase(iterator __first, iterator __last);
  };


}
# 66 "/usr/include/c++/5/vector" 2 3



# 1 "/usr/include/c++/5/bits/vector.tcc" 1 3
# 59 "/usr/include/c++/5/bits/vector.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp = _M_allocate_and_copy(__n,
     (this->_M_impl._M_start),
     (this->_M_impl._M_finish));
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }
# 105 "/usr/include/c++/5/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::



    insert(iterator __position, const value_type& __x)

    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
   && __position == end())
 {
   _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish, __x);
   ++this->_M_impl._M_finish;
 }
      else
 {
# 133 "/usr/include/c++/5/bits/vector.tcc" 3
     _M_insert_aux(__position, __x);

 }
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 {
   if (__last != end())
     std::copy(__last, end(), __first);
   _M_erase_at_end(__first.base() + (end() - __last));
 }
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {
# 191 "/usr/include/c++/5/bits/vector.tcc" 3
   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      if (__n > capacity())
 {
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp._M_impl._M_swap_data(this->_M_impl);
 }
      else if (__n > size())
 {
   std::fill(begin(), end(), __val);
   this->_M_impl._M_finish =
     std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
       __n - size(), __val,
       _M_get_Tp_allocator());
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (size() >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, this->_M_impl._M_start);
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
   }
      }
# 324 "/usr/include/c++/5/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_insert_aux(iterator __position, const _Tp& __x)

    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 {
   _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
              (*(this->_M_impl._M_finish - 1))
                            );
   ++this->_M_impl._M_finish;

   _Tp __x_copy = __x;

   std::copy_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1)

                                  ;

   *__position = __x_copy;



 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector::_M_insert_aux");
   const size_type __elems_before = __position - begin();
   pointer __new_start(this->_M_allocate(__len));
   pointer __new_finish(__new_start);
   try
     {




       _Alloc_traits::construct(this->_M_impl,
                         __new_start + __elems_before,



                                __x);

       __new_finish = pointer();

       __new_finish
  = std::__uninitialized_move_if_noexcept_a
  (this->_M_impl._M_start, __position.base(),
   __new_start, _M_get_Tp_allocator());

       ++__new_finish;

       __new_finish
  = std::__uninitialized_move_if_noexcept_a
  (__position.base(), this->_M_impl._M_finish,
   __new_finish, _M_get_Tp_allocator());
     }
          catch(...)
     {
       if (!__new_finish)
  _Alloc_traits::destroy(this->_M_impl,
                         __new_start + __elems_before);
       else
  std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
       _M_deallocate(__new_start, __len);
       throw;
     }
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __new_start;
   this->_M_impl._M_finish = __new_finish;
   this->_M_impl._M_end_of_storage = __new_start + __len;
 }
    }
# 447 "/usr/include/c++/5/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       value_type __x_copy = __x;
       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    std::copy_backward(__position.base(), __old_finish - __n, __old_finish)
                                        ;
    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
    this->_M_impl._M_finish =
      std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
        __n - __elems_after,
        __x_copy,
        _M_get_Tp_allocator());
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __position - begin();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       try
  {

    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = pointer();

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (this->_M_impl._M_start, __position.base(),
       __new_start, _M_get_Tp_allocator());

    __new_finish += __n;

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (__position.base(), this->_M_impl._M_finish,
       __new_finish, _M_get_Tp_allocator());
  }
       catch(...)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }
# 599 "/usr/include/c++/5/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      std::copy_backward(__position.base(), __old_finish - __n, __old_finish)
                                          ;
      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");
  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  try
    {
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (this->_M_impl._M_start, __position.base(),
         __new_start, _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_copy_a(__first, __last,
          __new_finish,
          _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (__position.base(), this->_M_impl._M_finish,
         __new_finish, _M_get_Tp_allocator());
    }
  catch(...)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
      throw;
    }
  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  _M_deallocate(this->_M_impl._M_start,
         this->_M_impl._M_end_of_storage
         - this->_M_impl._M_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }



  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_reallocate(size_type __n)
    {
      _Bit_pointer __q = this->_M_allocate(__n);
      iterator __start(std::__addressof(*__q), 0);
      this->_M_impl._M_finish = _M_copy_aligned(begin(), end(), __start);
      this->_M_deallocate();
      this->_M_impl._M_start = __start;
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(begin(), __position, __start);
   std::fill(__i, __i + difference_type(__n), __x);
   this->_M_impl._M_finish = std::copy(__position, end(),
           __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  _Bit_pointer __q = this->_M_allocate(__len);
  iterator __start(std::__addressof(*__q), 0);
  iterator __i = _M_copy_aligned(begin(), __position, __start);
  __i = std::copy(__first, __last, __i);
  this->_M_impl._M_finish = std::copy(__position, end(), __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
  this->_M_impl._M_start = __start;
       }
   }
      }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(begin(), __position, __start);
   *__i++ = __x;
   this->_M_impl._M_finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
 }
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }
# 840 "/usr/include/c++/5/bits/vector.tcc" 3

}
# 70 "/usr/include/c++/5/vector" 2 3
# 19 "src/generate.h" 2
# 1 "/usr/include/c++/5/cmath" 1 3
# 39 "/usr/include/c++/5/cmath" 3
       
# 40 "/usr/include/c++/5/cmath" 3




# 1 "/usr/include/math.h" 1 3 4
# 28 "/usr/include/math.h" 3 4
extern "C" {


# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 32 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/huge_val.h" 1 3 4
# 36 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/huge_valf.h" 1 3 4
# 38 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/huge_vall.h" 1 3 4
# 39 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/inf.h" 1 3 4
# 42 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/nan.h" 1 3 4
# 45 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 3 4
typedef float float_t;
typedef double double_t;
# 49 "/usr/include/math.h" 2 3 4
# 83 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


 extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

 extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();




 extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ()
                                                        ;





extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();







 extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


 extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw () __attribute__ ((__nonnull__ (2)));




extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();

extern double pow10 (double __x) throw (); extern double __pow10 (double __x) throw ();





extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();






extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();








 extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();





extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();






extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();








extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();




extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));








extern int isinf (double __value) throw () __attribute__ ((__const__));



extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();





extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));






extern double nan (const char *__tagb) throw () __attribute__ ((__const__)); extern double __nan (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnan (double __value) throw () __attribute__ ((__const__));






extern int isnan (double __value) throw () __attribute__ ((__const__));





extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();






extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();






extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();






extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();







extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw () __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) throw () __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) throw () __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) throw () __attribute__ ((__const__));



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
__extension__
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
__extension__
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmax (double __x, double __y) throw () __attribute__ ((__const__));


extern double fmin (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmin (double __x, double __y) throw () __attribute__ ((__const__));



extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();








extern int __issignaling (double __value) throw ()
     __attribute__ ((__const__));






extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 84 "/usr/include/math.h" 2 3 4
# 104 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


 extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

 extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();




 extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ()
                                                        ;





extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();







 extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


 extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw () __attribute__ ((__nonnull__ (2)));




extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();

extern float pow10f (float __x) throw (); extern float __pow10f (float __x) throw ();





extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();






extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();








 extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();





extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();






extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();








extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();




extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));








extern int isinff (float __value) throw () __attribute__ ((__const__));



extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();





extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));






extern float nanf (const char *__tagb) throw () __attribute__ ((__const__)); extern float __nanf (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanf (float __value) throw () __attribute__ ((__const__));






extern int isnanf (float __value) throw () __attribute__ ((__const__));





extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();






extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();






extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();






extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();







extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) throw () __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__));



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
__extension__
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
__extension__
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminf (float __x, float __y) throw () __attribute__ ((__const__));



extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();








extern int __issignalingf (float __value) throw ()
     __attribute__ ((__const__));






extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 105 "/usr/include/math.h" 2 3 4
# 151 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


 extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

 extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();




 extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ()
                                                        ;





extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();







 extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


 extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw () __attribute__ ((__nonnull__ (2)));




extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();

extern long double pow10l (long double __x) throw (); extern long double __pow10l (long double __x) throw ();





extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();






extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();








 extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();





extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();






extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();








extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();




extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));








extern int isinfl (long double __value) throw () __attribute__ ((__const__));



extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();





extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));






extern long double nanl (const char *__tagb) throw () __attribute__ ((__const__)); extern long double __nanl (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanl (long double __value) throw () __attribute__ ((__const__));






extern int isnanl (long double __value) throw () __attribute__ ((__const__));





extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();






extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();






extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();






extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();







extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
__extension__
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
__extension__
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();








extern int __issignalingl (long double __value) throw ()
     __attribute__ ((__const__));






extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 152 "/usr/include/math.h" 2 3 4
# 168 "/usr/include/math.h" 3 4
extern int signgam;
# 209 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 347 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 370 "/usr/include/math.h" 3 4
struct __exception



  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };


extern int matherr (struct __exception *__exc) throw ();
# 534 "/usr/include/math.h" 3 4
}
# 45 "/usr/include/c++/5/cmath" 2 3
# 75 "/usr/include/c++/5/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  inline double
  abs(double __x)
  { return __builtin_fabs(__x); }



  inline float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::acos;


  inline float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline float
  log(float __x)
  { return __builtin_logf(__x); }

  inline long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }




  inline double
  pow(double __x, int __i)
  { return __builtin_powi(__x, __i); }

  inline float
  pow(float __x, int __n)
  { return __builtin_powif(__x, __n); }

  inline long double
  pow(long double __x, int __n)
  { return __builtin_powil(__x, __n); }



  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}
# 555 "/usr/include/c++/5/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 831 "/usr/include/c++/5/cmath" 3
  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    fpclassify(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_fpclassify(0, 1, 4,
      3, 2, __type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isfinite(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isfinite(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isinf(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isinf(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnan(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnan(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnormal(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnormal(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    signbit(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return sizeof(__type) == sizeof(float)
 ? __builtin_signbitf(__type(__f))
 : sizeof(__type) == sizeof(double)
 ? __builtin_signbit(__type(__f))
 : __builtin_signbitl(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreaterequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreaterequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isless(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isless(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isunordered(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isunordered(__type(__f1), __type(__f2));
    }




}
# 20 "src/generate.h" 2
# 1 "/usr/include/errno.h" 1 3 4
# 31 "/usr/include/errno.h" 3 4
extern "C" {



# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4



# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 5 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 1 "/usr/include/linux/errno.h" 2 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
extern int *__errno_location (void) throw () __attribute__ ((__const__));
# 36 "/usr/include/errno.h" 2 3 4
# 54 "/usr/include/errno.h" 3 4
extern char *program_invocation_name, *program_invocation_short_name;



}
# 68 "/usr/include/errno.h" 3 4
typedef int error_t;
# 21 "src/generate.h" 2


# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnit.h" 1
# 42 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnit.h"
# 1 "/usr/include/inttypes.h" 1 3 4
# 266 "/usr/include/inttypes.h" 3 4
extern "C" {




typedef struct
  {
    long int quot;
    long int rem;
  } imaxdiv_t;
# 290 "/usr/include/inttypes.h" 3 4
extern intmax_t imaxabs (intmax_t __n) throw () __attribute__ ((__const__));


extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      throw () __attribute__ ((__const__));


extern intmax_t strtoimax (const char *__restrict __nptr,
      char **__restrict __endptr, int __base) throw ();


extern uintmax_t strtoumax (const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) throw ();


extern intmax_t wcstoimax (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();


extern uintmax_t wcstoumax (const wchar_t *__restrict __nptr,
       wchar_t ** __restrict __endptr, int __base)
     throw ();
# 432 "/usr/include/inttypes.h" 3 4
}
# 43 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnit.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/PropertyNode.h" 1
# 43 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/PropertyNode.h"
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/Value.h" 1
# 42 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/Value.h"

# 42 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/Value.h"
class ValueBase;
# 51 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/Value.h"
class DynamicValue {

private:


 ValueBase* value_;


 const ValueBase& getValueObject() const;


public:


 DynamicValue();


 DynamicValue(const DynamicValue& value);



 inline bool isDef() const {

  return (value_ != 0);
 }


 inline bool isUndef() const {

  return (value_ == 0);
 }


 void setUndef();



 DynamicValue* getCopy() const;



 template<typename T>
 T getValue() const;


 template<typename T>
 bool setValue(const T& value);



 DynamicValue& operator=(const DynamicValue& value);



 virtual ~DynamicValue();

};







class ValueBase {

public:


 ValueBase();




 virtual ValueBase* getCopy() const = 0;



 virtual int getInt() const = 0;


 virtual bool getBool() const = 0;


 virtual double getDouble() const = 0;


 virtual std::string getString() const = 0;




 virtual ~ValueBase();

};







class IntValue : public ValueBase {

private:


 int value_;



 IntValue();


 IntValue(int value);


 IntValue(const IntValue& value);


public:


 static inline IntValue* newIntValue(int value) {

  return new IntValue(value);
 }



 virtual IntValue* getCopy() const;



 virtual int getInt() const;


 virtual bool getBool() const;


 virtual double getDouble() const;


 virtual std::string getString() const;



 virtual ~IntValue();

};







class BoolValue : public ValueBase {

private:


 bool value_;



 BoolValue();


 BoolValue(bool value);


 BoolValue(const BoolValue& value);


public:


 static inline BoolValue* newBoolValue(bool value) {

  return new BoolValue(value);
 }



 virtual BoolValue* getCopy() const;



 virtual int getInt() const;


 virtual bool getBool() const;


 virtual double getDouble() const;


 virtual std::string getString() const;



 virtual ~BoolValue();

};







class DoubleValue : public ValueBase {

private:


 double value_;



 DoubleValue();


 DoubleValue(double value);


 DoubleValue(const DoubleValue& value);


public:


 static inline DoubleValue* newDoubleValue(double value) {

  return new DoubleValue(value);
 }



 virtual DoubleValue* getCopy() const;



 virtual int getInt() const;


 virtual bool getBool() const;


 virtual double getDouble() const;


 virtual std::string getString() const;



 virtual ~DoubleValue();

};







class StringValue : public ValueBase {

private:


 std::string value_;



 StringValue();


 StringValue(const std::string& value);


 StringValue(const StringValue& value);


public:


 static inline StringValue* newStringValue(const std::string& value) {

  return new StringValue(value);
 }



 virtual StringValue* getCopy() const;



 virtual int getInt() const;


 virtual bool getBool() const;


 virtual double getDouble() const;


 virtual std::string getString() const;



 virtual ~StringValue();

};
# 44 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/PropertyNode.h" 2
# 52 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/PropertyNode.h"
class PropertyNode {

private:


 typedef std::map<std::string, DynamicValue> map_type_t;


 map_type_t properties_;



 size_t findUnique(const std::string& prefix,
   size_t offset = 0, size_t max = 0) const;


protected:


 virtual bool propRedirectHook_(std::string& name,
   PropertyNode*& node) const;


 virtual void propReadHook_(const std::string& name,
   DynamicValue& value) const;


 virtual void propWriteHook_(const std::string& name, DynamicValue& value);


public:


 PropertyNode();


 PropertyNode(const PropertyNode& propertyNode);



 template<typename T>
 bool propSet(const std::string& name, const T& value);


 bool propGetDynamicValue(const std::string& name,
   DynamicValue& value) const;


 template<typename T>
 T propGet(const std::string& name) const;


 template<typename T>
 T propGetDefault(const std::string& name, const T& defValue) const;


 template<typename T>
 bool propGet(const std::string& name, T& value) const;



 size_t propImportLocal(const PropertyNode& properties,
   const std::string& prefix = "", bool override = true);


 inline void propClear() {

  properties_.clear();
 }


 void propPrintLocal() const;



 std::string propGetAsText() const;



 inline const map_type_t& propGetLocal() const {

  return properties_;
 }



 virtual ~PropertyNode();

};
# 44 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnit.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BufferReader.h" 1
# 42 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BufferReader.h"
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BC.h" 1
# 40 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BC.h"
# 1 "/usr/include/c++/5/cstdlib" 1 3
# 39 "/usr/include/c++/5/cstdlib" 3
       
# 40 "/usr/include/c++/5/cstdlib" 3
# 114 "/usr/include/c++/5/cstdlib" 3

# 114 "/usr/include/c++/5/cstdlib" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;





  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;





  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline long
  abs(long __i) { return __builtin_labs(__i); }

  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }



  inline __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 195 "/usr/include/c++/5/cstdlib" 3

}
# 209 "/usr/include/c++/5/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 241 "/usr/include/c++/5/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}
# 41 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BC.h" 2
# 51 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BC.h"

# 51 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BC.h"
class BC {

private:

 ssize_t p_;

public:


 static const BC& getMin(const BC& bc1, const BC& bc2);


 static const BC& getMax(const BC& bc1, const BC& bc2);


 inline static BC undef() {

  return BC();
 }



 BC();


 BC(ssize_t byte);


 BC(ssize_t byte, ssize_t bit);

 size_t byte() const;
 size_t byteCeil() const;
 size_t byteAligned() const;
 size_t bit() const;
 size_t bit8() const;



 inline const BC& getWithDefault(const BC& deflt) const {

        return (p_ >= 0) ? *this : deflt;
    }



 inline bool isDef() const {

  return (p_ >= 0);
 }


 inline bool isUndef() const {

  return (p_ < 0);
 }


 inline bool isMultipleOf(const BC& bc) const {

  return p_ >= 0 && bc.p_ > 0 && (p_ % bc.p_) == 0;
 }


 inline bool operator==(const BC& bc) const {

  return (p_ == bc.p_ || (p_ < 0 && bc.p_ < 0));
 }


 inline bool operator==(ssize_t bytes) const {

  return (bytes >= 0) ? (p_ == bytes * 8) : (p_ == -1);
 }


 inline bool operator!=(const BC& bc) const {

  return !((*this) == bc);
 }


 inline bool operator!=(ssize_t bytes) const {

  return !((*this) == bytes);
 }


 inline bool operator<=(const BC& bc) const {

  return ((*this) == bc) || ((*this) < bc);
 }


 inline bool operator<=(size_t bytes) const {

  return ((*this) == bytes) || ((*this) < bytes);
 }


 inline bool operator>=(const BC& bc) const {

  return ((*this) == bc) || ((*this) > bc);
 }


 inline bool operator>=(size_t bytes) const {

  return ((*this) == bytes) || ((*this) > bytes);
 }


 bool operator<(const BC& bc) const;


 bool operator<(size_t bytes) const;


 bool operator>(const BC& bc) const;


 bool operator>(size_t bytes) const;



 inline BC& operator=(ssize_t bytes) {

  p_ = (bytes >= 0) ? (bytes * 8) : -1;
  return *this;
 }


 inline BC& operator+=(const BC& bc) {

  p_ = (bc.p_ >= 0 && p_ >= 0) ? (p_ + bc.p_) : -1;
  return *this;
 }


 BC& operator+=(size_t bytes);


 BC& operator<<=(const BC& bc);


 BC& operator<<=(size_t bits);


 BC& operator++ ();


 BC operator++ (int);



 BC operator+(const BC& bc) const;


 BC operator+(size_t bytes) const;


 BC operator<<(const BC& bc) const;


 BC operator<<(size_t bits) const;



 BC& operator-=(const BC& bc);


 BC& operator-=(size_t bytes);


 BC& operator>>=(const BC& bc);


 BC& operator>>=(size_t bits);


 BC& operator-- ();


 BC operator-- (int);



 BC operator-(const BC& bc) const;


 BC operator-(size_t bytes) const;


 BC operator>>(const BC& bc) const;


 BC operator>>(size_t bits) const;



 BC floor(const BC& multipleOf) const;


 BC ceil(const BC& multipleOf) const;



 std::string toString() const;


 std::string toStringDefault(const std::string& deflt) const;


 void print() const;

};
# 43 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BufferReader.h" 2

class String;
class BufferWriter;
class BufferWindowReader;
# 55 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BufferReader.h"
class BufferReader {

protected:




 virtual bool getBit_(const BC& bc) const = 0;


 virtual uint8_t getByte_(const BC& bc) const = 0;


 virtual BC copyTo_(BufferWriter& buffer) const = 0;


 virtual BC getLength_() const = 0;




public:


 BufferReader();



 inline bool getBit(const BC& bc) const {

  return this->getBit_(bc);
 }


 inline uint8_t getByte(const BC& bc) const {

  return this->getByte_(bc);
 }


 inline BC copyTo(BufferWriter& buffer) const {

  return this->copyTo_(buffer);
 }


    BC copyTo(uint8_t* const bytes, size_t max) const;


 inline BC getLength() const {

  return this->getLength_();
 }


 inline bool isEmpty() const {

  return (this->getLength() == 0);
 }



 uint8_t getBytePadded(BC bc, bool padLeft = false) const;



 BufferWindowReader getWindow(BC offset = 0, BC length = -1) const;



 String toBitString(bool split = false, BC from = -1, BC len = -1) const;


 String toHexString(bool split = false, BC from = -1, BC len = -1, bool markMisaligned = false) const;


 std::string toBase64String() const;


 String toRawString(size_t cols = 16, BC from = -1, BC len = -1) const;


 String toCString(size_t cols = 16, BC from = -1, BC len = -1) const;



 size_t printBitDump(BC from = -1, BC len = -1) const;


 void printHexDump(size_t nCols = 16) const;


 std::string getHexDump(size_t nCols = 16) const;



 BC exportToFile(const std::string& filename) const;



 bool isEqualTo(const BufferReader& reader) const;



 bool operator==(const BufferReader& reader) const {

  return this->isEqualTo(reader);
 }



 virtual ~BufferReader();

};
# 45 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnit.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BufferWriter.h" 1
# 41 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BufferWriter.h"
# 1 "/usr/include/string.h" 1 3 4
# 27 "/usr/include/string.h" 3 4

# 27 "/usr/include/string.h" 3 4
extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 33 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 90 "/usr/include/string.h" 3 4
}










extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));

# 162 "/usr/include/string.h" 3 4
extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 206 "/usr/include/string.h" 3 4



extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 229 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 256 "/usr/include/string.h" 3 4
}










extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 308 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 335 "/usr/include/string.h" 3 4
}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 377 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();

# 433 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 482 "/usr/include/string.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 510 "/usr/include/string.h" 3 4
}







extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (const char *__s1, const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 658 "/usr/include/string.h" 3 4
}
# 42 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BufferWriter.h" 2





# 46 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BufferWriter.h"
class String;
class BufferReader;
class StreamReader;
# 58 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BufferWriter.h"
class BufferWriter {

private:


 static int convertDigit(char c, size_t base);


public:


 BufferWriter();




 virtual bool appendBit(bool bit) = 0;


 virtual bool appendByte(uint8_t byte) = 0;




 BC appendBits(const bool* const bits, size_t max);


 BC appendBytes(const uint8_t* const bytes, size_t max);


 BC appendFromBuffer(const BufferReader& reader, BC max = -1);


 BC appendFromString(const std::string& str, BC max = -1);


 BC appendFromBitString(const std::string& str, const BC& max = -1);


 BC appendFromHexString(const std::string& str, const BC& max = -1);


 BC appendFromBase64String(const std::string& str, const BC& max = -1);


 BC appendFromAsciiString(const std::string& str, const BC& max = -1);


 BC appendFromFile(const std::string& filename);


 BC appendFromHexFile(const std::string& filename);



 BC consumeStream(StreamReader& reader, BC max = -1);


 BC consumeBitString(std::string& str, BC max = -1);


 BC consumeHexString(std::string& str, BC max = -1);


 BC consumeBase64String(std::string& str, BC max = -1);


 BC consumeAsciiString(std::string& str, BC max = -1);



 BufferWriter& operator<<(const std::string& str);



 BC appendNumberBits(size_t number, size_t nBits,
   bool bigEndian = true, BC max = -1);


 BC appendDigitBits(char c, size_t base, bool bigEndian = true, BC max = -1);



 virtual ~BufferWriter();

};
# 46 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnit.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BufferModifier.h" 1
# 42 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BufferModifier.h"
class BC;
# 52 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BufferModifier.h"
class BufferModifier {

public:


 BufferModifier();




 virtual bool setBit(const BC& bc, bool bit) = 0;


 virtual bool setByte(const BC& bc, uint8_t byte) = 0;


 virtual void clear() = 0;


 virtual void truncate(const BC& length) = 0;




 virtual ~BufferModifier();

};
# 47 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnit.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/Dissector.h" 1
# 42 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/Dissector.h"
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/StreamStreamReader.h" 1
# 41 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/StreamStreamReader.h"
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/StreamReader.h" 1
# 49 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/StreamReader.h"
class StreamReader : public BufferReader {

private:


 BC accu_;


protected:




 virtual uint8_t readByte_(bool remove = true) = 0;


 virtual bool readBit_(bool remove = true) = 0;




public:


 StreamReader();


 uint8_t readByte(bool remove = true);


 bool readBit(bool remove = true);



 BC flush(const BC& max = -1);



 inline const BC& getAccumulator() const {

  return accu_;
 }


 inline void resetAccumulator() {

  accu_ = 0;
 }

 virtual ~StreamReader();

};
# 42 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/StreamStreamReader.h" 2
# 50 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/StreamStreamReader.h"
class StreamStreamReader : public StreamReader {

private:


 BC len_;


 StreamReader& reader_;

protected:




 virtual uint8_t readByte_(bool remove = true);


 virtual bool readBit_(bool remove = true);




 virtual bool getBit_(const BC& bc) const;


 virtual uint8_t getByte_(const BC& bc) const;


 virtual BC copyTo_(BufferWriter& buffer) const;


 virtual BC getLength_() const;




public:


 StreamStreamReader(StreamReader& reader);


 StreamStreamReader(StreamReader& reader, const BC& len);



 virtual ~StreamStreamReader();

};
# 43 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/Dissector.h" 2

class BufferReader;
class StreamReader;
# 54 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/Dissector.h"
class DissectionError : public std::runtime_error {

public:

 DissectionError(const std::string& error) : std::runtime_error(error) {
 }

};
# 70 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/Dissector.h"
class DissectorBody {

public:


 virtual void dissectorBodyReset() = 0;


 virtual bool dissectorBodyIsAccepting() const = 0;


 virtual BC dissectorBodyDissect(StreamReader& reader) = 0;

};
# 92 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/Dissector.h"
class Dissector {

private:


 DissectorBody& body_;


 BC size_;


 BC length_;


 BC overflow_;


 bool closed_;


 StreamStreamReader* reader_;


public:


 Dissector(DissectorBody& body);



 BC reset();


 BC reset(const BC& size);



 inline void close() {

  closed_ = true;
 }



 void setSize(const BC& size);


 inline const BC& getSize() const {

  return size_;
 }



 inline BC getLength() const {

  return length_ + ((reader_ != 0) ? reader_->getAccumulator() : 0);
 }


 inline BC getAcceptance() const {


  return closed_ ? 0 : size_ - this->getLength();
 }



 bool isAccepting() const;



 inline BC getOverflow() const {

  return overflow_;
 }


 inline bool hasOverflow() const {


  return overflow_ > 0;
 }


 inline bool hasUnderflow() const {


  return this->getAcceptance() == 0 && body_.dissectorBodyIsAccepting();
 }



 BC dissect(StreamReader& reader, const BC& max = -1);


 BC dissectFromBuffer(const BufferReader& reader, const BC& max = -1);



 virtual ~Dissector();

};
# 48 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnit.h" 2

class BufferStreamReader;
class TypeDescriptor;







class TypeRegistry {

private:


 typedef std::vector<const TypeDescriptor*> registry_t;


 registry_t registry_;


 static TypeRegistry* singleton;


public:


 static TypeRegistry& getInstance();



 TypeRegistry();



 bool add(const TypeDescriptor& typeDescriptor);


 const TypeDescriptor* findByName(const std::string& typeName);


 const TypeDescriptor* findById(size_t typeId);


 size_t print();



 ~TypeRegistry();
};
# 107 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnit.h"
class TypeDescriptor {

private:


 const TypeDescriptor* baseTypeDesc_;


 size_t typeId_;


 const std::string typeName_;


public:


 TypeDescriptor(size_t typeId, const std::string& typeName);


 TypeDescriptor(const TypeDescriptor& baseTypeDesc,
   size_t typeId, const std::string& typeName);



 inline bool registerType() const {

  return this->registerType(TypeRegistry::getInstance());
 }


 inline bool registerType(TypeRegistry& registry) const {

  return registry.add(*this);
 }



 inline size_t getTypeId() const {

  return typeId_;
 }


 inline const std::string& getTypeName() const {

  return typeName_;
 }


 inline const TypeDescriptor* getBaseTypeDescriptor() const {

  return baseTypeDesc_;
 }


 inline bool operator==(const TypeDescriptor& desc) const {

  return this == &desc;
 }

 inline bool operator!=(const TypeDescriptor& desc) const {

  return !(this == &desc);
 }



 bool inheritsFrom(const TypeDescriptor& other) const;


 inline bool contains(const TypeDescriptor& other) const {

  return (*this == other) || this->inheritsFrom(other);
 }



 std::string getTypeInheritance() const;



 ~TypeDescriptor();

};
# 215 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnit.h"
class DataUnit : public PropertyNode, protected DissectorBody,
  public BufferReader, public BufferWriter, public BufferModifier {

public:

 class PrintOptions {

 public:

  BC from;
  BC to;
  std::string prefix;
  bool bodyOnly;

  PrintOptions() {
   bodyOnly = false;
  }

 };


private:


 static TypeDescriptor desc_;



 Dissector dissector_;


 DataUnit* parent_;


 DataUnit* previous_;


 DataUnit* next_;



 std::string name_;



 inline void setPrevious(DataUnit* previous) {

  previous_ = previous;
 }


 inline void setNext(DataUnit* next) {

  next_ = next;
 }


protected:


 virtual void printBody(const PrintOptions& options) const;





 virtual bool isDecoded_() const = 0;




 virtual DataUnit* newInstance_() const;


 virtual bool repair_(bool recursive = true);


 virtual std::string getDynamicTypeName_() const;




 virtual bool propRedirectHook_(std::string& name,
   PropertyNode*& node) const;


    virtual void propReadHook_(const std::string& name,
      DynamicValue& value) const;



    virtual void reset_();



 virtual std::string getInfo_() const;


 virtual std::string getAnchorBrackets_() const;



 virtual DataUnit* getChild_() const;


 virtual void setChild_(DataUnit* child);




 inline void setParent(DataUnit* parent) {

  parent_ = parent;
 }


 bool setChild(DataUnit* child);


 std::string getAnchorString_() const;


public:


 static inline const TypeDescriptor& typeDescriptor() {

  return desc_;
 }



 DataUnit();



 inline Dissector& dissector() {

  return dissector_;
 }


 inline const Dissector& dissector() const {

  return dissector_;
 }



 inline PropertyNode& properties() {

  return static_cast<PropertyNode&>(*this);
 }



 virtual const TypeDescriptor& getTypeDescriptor() const;



 DataUnit* newInstance() const;


 DataUnit* clone() const;



    void reset();



 inline void setName(const std::string& name) {

  name_ = name;
 }


 inline const std::string& getName() const {

  return name_;
 }


 inline std::string getDynamicTypeName() const {

  return this->getDynamicTypeName_();
 }


 std::string getRefName() const;


 std::string getChainedName(const std::string& separator = "/") const;


 std::string getChainedRefName(const std::string& separator = "/") const;


 std::string getChainedIndex(const std::string& separator = "/") const;


 std::string getPath() const;




 inline const size_t getTypeID() const {

  return this->getTypeDescriptor().getTypeId();
 }


 inline const std::string& getTypeName() const {

  return this->getTypeDescriptor().getTypeName();
 }


 std::string getFullTypeName() const;


 inline std::string getTypeInheritance() const {

  return this->getTypeDescriptor().getTypeInheritance();
 }


 inline bool inheritsFromType(const TypeDescriptor& desc) const {

  return this->getTypeDescriptor().inheritsFrom(desc);
 }


 inline bool isOfType(const TypeDescriptor& desc) const {

  return this->getTypeDescriptor() == desc;
 }


 inline bool containsType(const TypeDescriptor& desc) const {

  return this->getTypeDescriptor().contains(desc);
 }







 inline DataUnit* getParent() const {

  return parent_;
 }


 inline DataUnit* getPrevious() const {

  return previous_;
 }


 inline DataUnit* getNext() const {

  return next_;
 }



 DataUnit* getByRelIndexConst(int index) const;


 inline DataUnit* getByRelIndex(int index) {

  return (index == 0) ? this : this->getByRelIndexConst(index);
 }


 DataUnit* getByRelBC(BC& bc);


 DataUnit* getByConstBC(const BC& bc);


 DataUnit* getByPath(const std::string& path);



 inline DataUnit* getChild() const {

  return this->getChild_();
 }


 DataUnit* getChild(size_t index) const;


 DataUnit* getChildTail() const;


 DataUnit* getChildByBC(BC& bc) const;


 DataUnit* getChildByConstBC(const BC& bc) const;


 DataUnit* getChildByName(const std::string& name);



 DataUnit* getNeighbourByName(const std::string& name);



 DataUnit* getRoot();


 DataUnit* getHead();


 DataUnit* getTail();


 DataUnit* getPredecessor() const;


 DataUnit* getSuccessor() const;



 inline bool hasParent() const {

  return (parent_ != 0);
 }


 inline bool hasPrevious() const {

  return (previous_ != 0);
 }


 inline bool hasNext() const {

  return (next_ != 0);
 }


 inline bool hasChild() const {

  return (this->getChild_() != 0);
 }


 inline bool isRoot() const {

  return (parent_ == 0) && (previous_ == 0);
 }


 inline bool isPrimary() const {

  return (parent_ == 0) && (previous_ == 0);
 }


 bool isDescendantOf(const DataUnit& dataUnit) const;



 size_t getDistanceToRoot() const;



 inline bool repair(bool recursive = true) {

  return this->repair_(recursive);
 }



 BC redissect();



 void print() const;


 void print(const PrintOptions& options) const;


 void printChain(ssize_t maxLen = -1, const std::string& prefix = "") const;



 virtual std::string getAsText() const;



 bool appendNext(DataUnit* dataUnit);



 DataUnit* remove();


 bool replaceBy(DataUnit* replacement);


 bool insert(DataUnit* insertion);



 size_t deleteFollowing();



 size_t getNElements() const;


 size_t getNChildren() const;


 size_t getNNodes() const;



 inline bool isDecoded() const {

  return (dissector_.getSize() == 0) || this->isDecoded_();
 }



 size_t getIndexOffset() const;


 BC getDataOffset() const;



 inline DataUnit* operator[](size_t index) const {

  return this->getChild(index);
 }



 inline DataUnit& operator()(size_t index) const {

  return *(this->getChild(index));
 }



 bool checkConsistency(bool printErrors = false) const;



 virtual ~DataUnit();

};
# 24 "src/generate.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/EnumerationField.h" 1
# 42 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/EnumerationField.h"
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/IntegerField.h" 1
# 44 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/IntegerField.h"
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/FieldDataUnit.h" 1
# 40 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/FieldDataUnit.h"
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnit.h" 1
# 41 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/FieldDataUnit.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/VectorBuffer.h" 1
# 42 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/VectorBuffer.h"
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/Buffer.h" 1
# 46 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/Buffer.h"
class Buffer : public BufferReader, public BufferWriter, public BufferModifier {

private:


 BC capacity_;


public:


 Buffer();


 Buffer(const BC& capacity);



 inline BC getCapacity() const {

  return capacity_;
 }


 BC getRemainingCapacity() const;



 virtual ~Buffer();

};
# 43 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/VectorBuffer.h" 2
# 53 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/VectorBuffer.h"
class VectorBuffer : public Buffer {

private:


 std::vector<uint8_t> data_;


 uint8_t bitOff_;



 inline bool getBitUnsafe(size_t posByte, size_t posBit) const {

  return (data_[posByte] & (0x80 >> posBit)) != 0;
 }


 inline uint8_t getByteUnsafe(size_t posByte, size_t posBit) const {

  uint8_t val = (data_[posByte] << posBit) & 0xFF;
  if (posBit != 0) {
   val &= (0xFF00 >> (8 - posBit)) & 0xFF;
   val |= (data_[posByte + 1] >> (8 - posBit));
  }
  return val;
 }


protected:




 virtual bool getBit_(const BC& bc) const;


 virtual uint8_t getByte_(const BC& bc) const;


 virtual BC copyTo_(BufferWriter& buffer) const;


 virtual BC getLength_() const;




public:


 VectorBuffer();


 VectorBuffer(const BC& capacity);




 virtual bool appendBit(bool bit);


 virtual bool appendByte(uint8_t byte);




 virtual bool setBit(const BC& bc, bool bit);


 virtual bool setByte(const BC& bc, uint8_t byte);


 virtual void clear();


 virtual void truncate(const BC& length);




 const uint8_t* getDataPointer() const;


 virtual ~VectorBuffer();

};
# 42 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/FieldDataUnit.h" 2

class BC;
# 52 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/FieldDataUnit.h"
class FieldDataUnit : public DataUnit {

private:


 static TypeDescriptor desc_;



 VectorBuffer buffer_;


protected:


 virtual void printBody(const PrintOptions& options) const;




 virtual bool decode_(const BufferReader& reader) = 0;


 virtual bool encode_() = 0;






 virtual void dissectorBodyReset();


 virtual bool dissectorBodyIsAccepting() const;


 virtual BC dissectorBodyDissect(StreamReader& reader);






 virtual bool getBit_(const BC& bc) const;


 virtual uint8_t getByte_(const BC& bc) const;


 virtual BC copyTo_(BufferWriter& buffer) const;


 virtual BC getLength_() const;




 virtual std::string getAsText() const;


public:


 static inline const TypeDescriptor& typeDescriptor() {

  return desc_;
 }



 FieldDataUnit();


 FieldDataUnit(const BC& capacity);



 const TypeDescriptor& getTypeDescriptor() const;





 virtual bool appendBit(bool bit);


 virtual bool appendByte(uint8_t byte);




 virtual bool setBit(const BC& bc, bool bit);


 virtual bool setByte(const BC& bc, uint8_t byte);


 virtual void clear();


 virtual void truncate(const BC& length);




 virtual bool encode();



 inline const VectorBuffer& getBuffer() const {

        return buffer_;
    }



 void clearBuffer();


 BC getCapacity() const;



 virtual ~FieldDataUnit();

};
# 45 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/IntegerField.h" 2


class IntegerField : public FieldDataUnit {

private:


 static TypeDescriptor desc_;


protected:


 static size_t getBitWeight(size_t bit, size_t size,
      bool bigEndianBytes_ = true, bool bigEndianBits_ = true);



    bool isSigned_;


    bool bigEndianBytes_;


    bool bigEndianBits_;


    int value_;


    bool decoded_;





    virtual void propReadHook_(const std::string& name, DynamicValue& value) const;


 virtual void propWriteHook_(const std::string& name, DynamicValue& value);




 virtual bool decode_(const BufferReader& reader);


 virtual bool encode_();




 virtual bool isDecoded_() const;


 virtual DataUnit* newInstance_() const;




 virtual std::string getInfo_() const;


public:


 static IntegerField* newIntBE(size_t bitWidth);


 static IntegerField* newUIntBE(size_t bitWidth);


 static IntegerField* newIntLE(size_t bitWidth);


 static IntegerField* newUIntLE(size_t bitWidth);



 static inline const TypeDescriptor& typeDescriptor() {

  return desc_;
 }





    IntegerField(const BC& size, bool isSigned = false,
      bool bigEndianBytes = true, bool bigEndianBits = true);



 const TypeDescriptor& getTypeDescriptor() const;



 bool isSigned() const;



 template<typename T>
 T getValue() const;


 void setValue(int value);



 virtual ~IntegerField();

};
# 43 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/EnumerationField.h" 2

class BufferReader;
# 54 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/EnumerationField.h"
class EnumerationItem {

private:


 std::string name_;


 int minCode_;


 int maxCode_;


public:


 EnumerationItem(const std::string& name, int code);


 EnumerationItem(const std::string& name, int minCode, int maxCode);



 inline const std::string& getName() const {

  return name_;
 }


 inline int getMinCode() const {

  return minCode_;
 }


 inline int getMaxCode() const {

  return maxCode_;
 }



 inline bool isRange() const {

  return (minCode_ != maxCode_);
 }



 inline bool matchesCode(int code) const {

  return (code >= minCode_ && code <= maxCode_);
 }


 bool overlapsWith(const EnumerationItem& item) const;

};
# 122 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/EnumerationField.h"
class EnumerationItemList {

private:


 std::vector<EnumerationItem> items_;


 bool allowFallback_;


 std::string fallbackItemName_;



 bool overlapsWith(const EnumerationItem& item) const;


 bool insertItem(const EnumerationItem& item);


public:


 EnumerationItemList();



 inline bool allowsFallback() const {

  return allowFallback_;
 }



 bool addItem(const std::string& name, int code);


 bool addItem(const std::string& name, int minCode, int maxCode);


 bool addFallbackItem(const std::string& name = "");



 int getNItems() const;



 int getItemIndex(int code) const;


 const EnumerationItem& getItemByIndex(int index) const;


 const std::string& getItemNameByIndex(int index) const;

};
# 189 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/EnumerationField.h"
class EnumerationField : public IntegerField {

private:


 static TypeDescriptor desc_;



 EnumerationItemList& list_;



 int itemIndex_;


protected:




 virtual std::string getInfo_() const;




 virtual bool isDecoded_() const;




 virtual bool decode_(const BufferReader& reader);




    virtual void propReadHook_(const std::string& name, DynamicValue& value) const;


 virtual void propWriteHook_(const std::string& name, DynamicValue& value);


 virtual std::string getDynamicTypeName_() const;




public:


 static inline const TypeDescriptor& typeDescriptor() {

  return desc_;
 }



    EnumerationField(const BC& size, EnumerationItemList& list);



 const TypeDescriptor& getTypeDescriptor() const;



 const std::string& getItemName() const;


 inline int getItemIndex() const {

  return itemIndex_;
 }



 inline const EnumerationItemList& getItemList() const {

  return list_;
 }



 virtual ~EnumerationField();

};
# 25 "src/generate.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/VectorBuffer.h" 1
# 26 "src/generate.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/TCPClientSocket.h" 1
# 50 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/TCPClientSocket.h"
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/TCPSocket.h" 1
# 44 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/TCPSocket.h"
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/Socket.h" 1
# 44 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/Socket.h"
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BC.h" 1
# 45 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/Socket.h" 2

class BufferReader;
class BufferWriter;

using std::vector;
using std::string;
# 59 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/Socket.h"
class Socket {

private:


 int socket_;


 BC bcIn_;


 BC bcOut_;



 bool hasRemoteAddr_;


 struct sockaddr_in remoteAddr_;


 size_t timeoutSecs_;


protected:


 inline int getSocketFd_() const {

  return socket_;
 }


 bool setSocketFd_(int socket);



 inline struct sockaddr_in* remoteAddress_() {

  return &remoteAddr_;
 }


 inline size_t remoteAddressSize_() const {

  return sizeof(remoteAddr_);
 }


 inline bool hasRemoteAddress_() const {

  return hasRemoteAddr_;
 }



 virtual ssize_t send_(const uint8_t* const data, size_t len) = 0;


 virtual ssize_t recv_(uint8_t* const data, size_t maxLen) = 0;


public:


 Socket();


 Socket(int socket);



 inline bool isValid() const {

  return (socket_ != -1);
 }



 bool setNonBlocking(bool nonBlocking);


 void setTimeout(size_t seconds);


 bool setRemoteAddress(const string& hostAndPort);


 bool setRemoteAddress(const string& host, int port);



 bool close();



    int getAvailableData() const;



 const Socket& operator<<(const BufferReader& reader);


 const Socket& operator<<(const vector<uint8_t>& data);


 const Socket& operator<<(const string& s);



 const Socket& operator>>(BufferWriter& writer);


 const Socket& operator>>(vector<uint8_t>& data);



 virtual ~Socket();

};
# 45 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/TCPSocket.h" 2

class BufferReader;
class BufferWriter;
# 56 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/TCPSocket.h"
class TCPSocket : public Socket {

protected:


 bool connected_;


 bool create_();


 ssize_t send_(const uint8_t* const data, size_t len);


 ssize_t recv_(uint8_t* const data, size_t maxLen);


public:


 TCPSocket();


 TCPSocket(int socket);



 inline bool isConnected() const {

  return this->isValid() && connected_;
 }



 bool disconnect();



 virtual ~TCPSocket();

};
# 51 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/TCPClientSocket.h" 2
# 59 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/TCPClientSocket.h"
class TCPClientSocket : public TCPSocket {

public:


 TCPClientSocket(const string& hostAndPort);


 TCPClientSocket(const string& host, int port);



 bool connect();



 virtual ~TCPClientSocket();

};
# 27 "src/generate.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/TCPServerSocket.h" 1
# 54 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/TCPServerSocket.h"
using std::vector;
using std::string;
# 64 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/TCPServerSocket.h"
class TCPServerSocket : public TCPSocket {

private:

 int port_;

 bool bind_(int port);
 bool listen_(int maxConnections = 5) const;
 int accept_() const;


public:

 TCPServerSocket();
 TCPServerSocket(int port);

 TCPSocket* accept();

 virtual ~TCPServerSocket();

};
# 28 "src/generate.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/UDPClientSocket.h" 1
# 49 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/UDPClientSocket.h"
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/UDPSocket.h" 1
# 46 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/UDPSocket.h"
class BufferReader;
class BufferWriter;

using std::vector;
using std::string;
# 59 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/UDPSocket.h"
class UDPSocket : public Socket {

protected:

 bool create_();

 ssize_t send_(const uint8_t* const data, size_t len);
 ssize_t recv_(uint8_t* const data, size_t maxLen);


public:

 UDPSocket();
 UDPSocket(int socket);

 virtual ~UDPSocket();

};
# 50 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/UDPClientSocket.h" 2



using std::vector;
using std::string;
# 63 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/UDPClientSocket.h"
class UDPClientSocket : public UDPSocket {

public:


 UDPClientSocket(const string& hostAndPort);


 UDPClientSocket(const string& host, int port);



 virtual ~UDPClientSocket();

};
# 29 "src/generate.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BufferStreamReader.h" 1
# 41 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BufferStreamReader.h"
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/String_.h" 1
# 41 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/String_.h"
# 1 "/usr/include/c++/5/cstring" 1 3
# 39 "/usr/include/c++/5/cstring" 3
       
# 40 "/usr/include/c++/5/cstring" 3
# 71 "/usr/include/c++/5/cstring" 3

# 71 "/usr/include/c++/5/cstring" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::memchr;
  using ::memcmp;
  using ::memcpy;
  using ::memmove;
  using ::memset;
  using ::strcat;
  using ::strcmp;
  using ::strcoll;
  using ::strcpy;
  using ::strcspn;
  using ::strerror;
  using ::strlen;
  using ::strncat;
  using ::strncmp;
  using ::strncpy;
  using ::strspn;
  using ::strtok;
  using ::strxfrm;
  using ::strchr;
  using ::strpbrk;
  using ::strrchr;
  using ::strstr;
# 120 "/usr/include/c++/5/cstring" 3

}
# 42 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/String_.h" 2


# 1 "/usr/include/c++/5/cstdarg" 1 3
# 39 "/usr/include/c++/5/cstdarg" 3
       
# 40 "/usr/include/c++/5/cstdarg" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h" 1 3 4
# 43 "/usr/include/c++/5/cstdarg" 2 3
# 52 "/usr/include/c++/5/cstdarg" 3
namespace std
{
  using ::va_list;
}
# 45 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/String_.h" 2
# 53 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/String_.h"

# 53 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/String_.h"
class String : public std::string {

public:

 static inline String getWhitespaces() {
  return String(" \t\r\n");
 }

 static inline String getNumerals() {
  return String("0123456789");
 }

 static inline String getLowerLetters() {
  return String("abcdefghijklmnopqrstuvwxyz");
 }

 static inline String getUpperLetters() {
  return String("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
 }

 static inline String getLetters() {
  return getLowerLetters() + getUpperLetters();
 }

 static inline String getDefaultIDChars() {
  return getLetters() + getNumerals() + "_.";
 }


 static String format(const char* fmt, ...);
 static String hexDump(uint8_t* buf, size_t len,
      char* fmt = 0, char* space = 0);

 static String makeBoldWhite(const std::string& str);
 static String makeBoldPink(const std::string& str);
 static String makeBoldBlue(const std::string& str);
 static String makeBoldYellow(const std::string& str);
 static String makeBoldGreen(const std::string& str);
 static String makeBoldRed(const std::string& str);
 static String makePink(const std::string& str);
 static String makeBlue(const std::string& str);
 static String makeYellow(const std::string& str);
 static String makeGreen(const std::string& str);
 static String makeRed(const std::string& str);

 static size_t getCommonPrefixLength(const std::string& str1, const std::string& str2);
 static size_t getCommonPrefixLength(const std::vector<std::string>& strings);

 String();
 String(const String& str);
 String(const std::string& str);
 String(const char* str);

 String& operator=(const String& str);
 String& operator=(const std::string& str);
 String& operator=(const char* str);

 String& operator<<(const String& str);
 String& operator<<(const std::string& str);
 String& operator<<(const char* str);
 String& operator<<(bool value);

 void setWidth(size_t width, const char fill = ' ');
 String getFixedWidth(size_t width, const char fill = ' ') const;
 size_t getWidth() const;

 size_t getNLines() const;

 size_t cleanRemove(const char* str);
 size_t cleanRemove(const std::string& str);
 size_t cleanRemoveText(const char* str);
 size_t cleanRemoveText(const std::string& str);
 size_t cleanKeep(const char* str);
 size_t cleanKeep(const std::string& str);

 void prepend(const std::string& str);
 void prepend(const char* str);

 void appendRepeated(const String& str, size_t n);
 void appendRepeated(const std::string& str, size_t n);
 void appendRepeated(const char* str, size_t n);
 void appendRepeated(const char str, size_t n);

 void appendBool(bool value);
 void appendBool(bool value, const std::string& strTrue, const std::string& strFalse);
 void appendBool(bool value, const char* strTrue, const char* strFalse);

 void appendFixedWidth(const String& str, const size_t width, const char fill = ' ');
 void appendFixedWidth(const std::string& str, const size_t width, const char fill = ' ');
 void appendFixedWidth(const char* str, const size_t width, const char fill = ' ');

 void appendBoldWhite(const std::string& str);
 void appendBoldPink(const std::string& str);
 void appendBoldBlue(const std::string& str);
 void appendBoldYellow(const std::string& str);
 void appendBoldGreen(const std::string& str);
 void appendBoldRed(const std::string& str);
 void appendPink(const std::string& str);
 void appendBlue(const std::string& str);
 void appendYellow(const std::string& str);
 void appendGreen(const std::string& str);
 void appendRed(const std::string& str);

 void assignHexDump(uint8_t* buf, size_t len,
    char* fmt = 0, char* space = 0);
 void appendHexDump(uint8_t* buf, size_t len,
    char* fmt = 0, char* space = 0);
 void prependHexDump(uint8_t* buf, size_t len,
    char* fmt = 0, char* space = 0);

 void assignFormat(const char* fmt, va_list args);
 void assignFormat(const char* fmt, ...);
 void appendFormat(const char* fmt, ...);
 void prependFormat(const char* fmt, ...);

 bool beginsWith(const char* str) const;
 bool beginsWith(const std::string& str) const;

 bool endsWith(const char* str) const;
 bool endsWith(const std::string& str) const;

 bool contains(const char* str) const;
 bool contains(const std::string& str) const;
 bool containsOnly(const char* str) const;
 bool containsOnly(const std::string& str) const;

 size_t count(const char* str) const;
 size_t count(const std::string& str) const;
 size_t countLeading(const char* str) const;
 size_t countLeading(const std::string& str) const;
 size_t countLeadingUpTo(const char* str) const;
 size_t countLeadingUpTo(const std::string& str) const;

 size_t removeLeadingWhitespaces(const size_t nMax = 0);
 size_t removeLeading(size_t n);
 size_t removeLeading(const char* str, size_t nMax = 0);
 size_t removeLeading(const std::string& str, size_t nMax = 0);
 bool removeLeadingText(const char* str);
 bool removeLeadingText(const std::string& str);

 bool removeTrailingText(const char* str);
 bool removeTrailingText(const std::string& str);

 size_t countLines() const;

 size_t getMaxLineWidth() const;

 size_t indentLines(const std::string& indent, int fromLine = -1, int toLine = -1);

 void appendColumn(const std::string& column, int width = -1);

 String readLeading(const char* str, size_t nMax = 0);
 String readLeading(const std::string& str, size_t nMax = 0);
 String readLeadingUpTo(const char* str);
 String readLeadingUpTo(const std::string& str);

 String readLeadingBlock(const std::string& blocks = "[](){}", const std::string& quotes = "");

 String readLeadingToken(const std::string& separator);

 String getLeadingToken(const std::string& separator) const;
 String getLeadingToken(const std::string& separator, bool& isLast) const;

 size_t removeLeadingToken(const std::string& separator);

 size_t findMatching(const std::string& blocks = "[](){}", const std::string& quotes = "", size_t pos = 0) const;
# 233 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/String_.h"
};
# 42 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BufferStreamReader.h" 2
# 52 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/BufferStreamReader.h"
class BufferStreamReader : public StreamReader {

private:


 const BufferReader& reader_;


 BC pos_;


protected:




 virtual uint8_t readByte_(bool remove = true);


 virtual bool readBit_(bool remove = true);




 virtual bool getBit_(const BC& bc) const;


 virtual uint8_t getByte_(const BC& bc) const;


 virtual BC copyTo_(BufferWriter& buffer) const;


 virtual BC getLength_() const;




public:


 BufferStreamReader(const BufferReader& reader);



 inline void reset() {

  pos_ = 0;
 }


 inline void setPosition(const BC& pos) {


  pos_ = pos.isDef() ? pos : pos_;
 }


 inline BC getPosition() const {

  return pos_;
 }



 virtual ~BufferStreamReader();

};
# 30 "src/generate.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/PropertyNode.h" 1
# 31 "src/generate.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/FileStreamReader.h" 1
# 47 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/FileStreamReader.h"
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DequeRingBuffer.h" 1
# 41 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DequeRingBuffer.h"
# 1 "/usr/include/c++/5/deque" 1 3
# 58 "/usr/include/c++/5/deque" 3
       
# 59 "/usr/include/c++/5/deque" 3





# 1 "/usr/include/c++/5/bits/stl_deque.h" 1 3
# 66 "/usr/include/c++/5/bits/stl_deque.h" 3

# 66 "/usr/include/c++/5/bits/stl_deque.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 88 "/usr/include/c++/5/bits/stl_deque.h" 3
  inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < 512
     ? size_t(512 / __size) : size_t(1)); }
# 105 "/usr/include/c++/5/bits/stl_deque.h" 3
  template<typename _Tp, typename _Ref, typename _Ptr>
    struct _Deque_iterator
    {

      typedef _Deque_iterator<_Tp, _Tp&, _Tp*> iterator;
      typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;
      typedef _Tp* _Elt_pointer;
      typedef _Tp** _Map_pointer;
# 126 "/usr/include/c++/5/bits/stl_deque.h" 3
      static size_t _S_buffer_size()
      { return __deque_buf_size(sizeof(_Tp)); }

      typedef std::random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef _Ptr pointer;
      typedef _Ref reference;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Deque_iterator _Self;

      _Elt_pointer _M_cur;
      _Elt_pointer _M_first;
      _Elt_pointer _M_last;
      _Map_pointer _M_node;

      _Deque_iterator(_Elt_pointer __x, _Map_pointer __y)
      : _M_cur(__x), _M_first(*__y),
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator()
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x)
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }

      iterator
      _M_const_cast() const
      { return iterator(_M_cur, _M_node); }

      reference
      operator*() const
      { return *_M_cur; }

      pointer
      operator->() const
      { return _M_cur; }

      _Self&
      operator++()
      {
 ++_M_cur;
 if (_M_cur == _M_last)
   {
     _M_set_node(_M_node + 1);
     _M_cur = _M_first;
   }
 return *this;
      }

      _Self
      operator++(int)
      {
 _Self __tmp = *this;
 ++*this;
 return __tmp;
      }

      _Self&
      operator--()
      {
 if (_M_cur == _M_first)
   {
     _M_set_node(_M_node - 1);
     _M_cur = _M_last;
   }
 --_M_cur;
 return *this;
      }

      _Self
      operator--(int)
      {
 _Self __tmp = *this;
 --*this;
 return __tmp;
      }

      _Self&
      operator+=(difference_type __n)
      {
 const difference_type __offset = __n + (_M_cur - _M_first);
 if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
   _M_cur += __n;
 else
   {
     const difference_type __node_offset =
       __offset > 0 ? __offset / difference_type(_S_buffer_size())
                    : -difference_type((-__offset - 1)
           / _S_buffer_size()) - 1;
     _M_set_node(_M_node + __node_offset);
     _M_cur = _M_first + (__offset - __node_offset
     * difference_type(_S_buffer_size()));
   }
 return *this;
      }

      _Self
      operator+(difference_type __n) const
      {
 _Self __tmp = *this;
 return __tmp += __n;
      }

      _Self&
      operator-=(difference_type __n)
      { return *this += -__n; }

      _Self
      operator-(difference_type __n) const
      {
 _Self __tmp = *this;
 return __tmp -= __n;
      }

      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }






      void
      _M_set_node(_Map_pointer __new_node)
      {
 _M_node = __new_node;
 _M_first = *__new_node;
 _M_last = _M_first + difference_type(_S_buffer_size());
      }
    };




  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
        const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
    { return __x._M_cur == __y._M_cur; }

  template<typename _Tp, typename _RefL, typename _PtrL,
    typename _RefR, typename _PtrR>
    inline bool
    operator==(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
        const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
    { return __x._M_cur == __y._M_cur; }

  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
        const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
    { return !(__x == __y); }

  template<typename _Tp, typename _RefL, typename _PtrL,
    typename _RefR, typename _PtrR>
    inline bool
    operator!=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
        const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
    { return !(__x == __y); }

  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator<(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
    { return (__x._M_node == __y._M_node) ? (__x._M_cur < __y._M_cur)
                                          : (__x._M_node < __y._M_node); }

  template<typename _Tp, typename _RefL, typename _PtrL,
    typename _RefR, typename _PtrR>
    inline bool
    operator<(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
    { return (__x._M_node == __y._M_node) ? (__x._M_cur < __y._M_cur)
                                   : (__x._M_node < __y._M_node); }

  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator>(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
    { return __y < __x; }

  template<typename _Tp, typename _RefL, typename _PtrL,
    typename _RefR, typename _PtrR>
    inline bool
    operator>(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
    { return __y < __x; }

  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator<=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
        const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
    { return !(__y < __x); }

  template<typename _Tp, typename _RefL, typename _PtrL,
    typename _RefR, typename _PtrR>
    inline bool
    operator<=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
        const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
    { return !(__y < __x); }

  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator>=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
        const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
    { return !(__x < __y); }

  template<typename _Tp, typename _RefL, typename _PtrL,
    typename _RefR, typename _PtrR>
    inline bool
    operator>=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
        const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
    { return !(__x < __y); }





  template<typename _Tp, typename _Ref, typename _Ptr>
    inline typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
 (_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 + (__y._M_last - __y._M_cur);
    }

  template<typename _Tp, typename _RefL, typename _PtrL,
    typename _RefR, typename _PtrR>
    inline typename _Deque_iterator<_Tp, _RefL, _PtrL>::difference_type
    operator-(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
    {
      return typename _Deque_iterator<_Tp, _RefL, _PtrL>::difference_type
 (_Deque_iterator<_Tp, _RefL, _PtrL>::_S_buffer_size())
 * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 + (__y._M_last - __y._M_cur);
    }

  template<typename _Tp, typename _Ref, typename _Ptr>
    inline _Deque_iterator<_Tp, _Ref, _Ptr>
    operator+(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)
   
    { return __x + __n; }

  template<typename _Tp>
    void
    fill(const _Deque_iterator<_Tp, _Tp&, _Tp*>&,
  const _Deque_iterator<_Tp, _Tp&, _Tp*>&, const _Tp&);

  template<typename _Tp>
    _Deque_iterator<_Tp, _Tp&, _Tp*>
    copy(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,
  _Deque_iterator<_Tp, const _Tp&, const _Tp*>,
  _Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<typename _Tp>
    inline _Deque_iterator<_Tp, _Tp&, _Tp*>
    copy(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,
  _Deque_iterator<_Tp, _Tp&, _Tp*> __last,
  _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    { return std::copy(_Deque_iterator<_Tp, const _Tp&, const _Tp*>(__first),
         _Deque_iterator<_Tp, const _Tp&, const _Tp*>(__last),
         __result); }

  template<typename _Tp>
    _Deque_iterator<_Tp, _Tp&, _Tp*>
    copy_backward(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,
    _Deque_iterator<_Tp, const _Tp&, const _Tp*>,
    _Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<typename _Tp>
    inline _Deque_iterator<_Tp, _Tp&, _Tp*>
    copy_backward(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,
    _Deque_iterator<_Tp, _Tp&, _Tp*> __last,
    _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    { return std::copy_backward(_Deque_iterator<_Tp,
    const _Tp&, const _Tp*>(__first),
    _Deque_iterator<_Tp,
    const _Tp&, const _Tp*>(__last),
    __result); }
# 457 "/usr/include/c++/5/bits/stl_deque.h" 3
  template<typename _Tp, typename _Alloc>
    class _Deque_base
    {
    protected:
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Tp>::other _Tp_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Alloc_traits;


      typedef _Tp* _Ptr;
      typedef const _Tp* _Ptr_const;





      typedef typename _Alloc_traits::template rebind<_Ptr>::other
 _Map_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Map_alloc_type> _Map_alloc_traits;

    public:
      typedef _Alloc allocator_type;
      typedef typename _Alloc_traits::size_type size_type;

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Tp_allocator()); }

      typedef _Deque_iterator<_Tp, _Tp&, _Ptr> iterator;
      typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const> const_iterator;

      _Deque_base()
      : _M_impl()
      { _M_initialize_map(0); }

      _Deque_base(size_t __num_elements)
      : _M_impl()
      { _M_initialize_map(__num_elements); }

      _Deque_base(const allocator_type& __a, size_t __num_elements)
      : _M_impl(__a)
      { _M_initialize_map(__num_elements); }

      _Deque_base(const allocator_type& __a)
      : _M_impl(__a)
      { }
# 540 "/usr/include/c++/5/bits/stl_deque.h" 3
      ~_Deque_base() ;

    protected:
      typedef typename iterator::_Map_pointer _Map_pointer;




      struct _Deque_impl
      : public _Tp_alloc_type
      {
 _Map_pointer _M_map;
 size_t _M_map_size;
 iterator _M_start;
 iterator _M_finish;

 _Deque_impl()
 : _Tp_alloc_type(), _M_map(), _M_map_size(0),
   _M_start(), _M_finish()
 { }

 _Deque_impl(const _Tp_alloc_type& __a)
 : _Tp_alloc_type(__a), _M_map(), _M_map_size(0),
   _M_start(), _M_finish()
 { }
# 575 "/usr/include/c++/5/bits/stl_deque.h" 3
 void _M_swap_data(_Deque_impl& __x)
 {
   using std::swap;
   swap(this->_M_start, __x._M_start);
   swap(this->_M_finish, __x._M_finish);
   swap(this->_M_map, __x._M_map);
   swap(this->_M_map_size, __x._M_map_size);
 }
      };

      _Tp_alloc_type&
      _M_get_Tp_allocator()
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      _Map_alloc_type
      _M_get_map_allocator() const
      { return _Map_alloc_type(_M_get_Tp_allocator()); }

      _Ptr
      _M_allocate_node()
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
 return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
      }

      void
      _M_deallocate_node(_Ptr __p)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
 _Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
      }

      _Map_pointer
      _M_allocate_map(size_t __n)
      {
 _Map_alloc_type __map_alloc = _M_get_map_allocator();
 return _Map_alloc_traits::allocate(__map_alloc, __n);
      }

      void
      _M_deallocate_map(_Map_pointer __p, size_t __n)
      {
 _Map_alloc_type __map_alloc = _M_get_map_allocator();
 _Map_alloc_traits::deallocate(__map_alloc, __p, __n);
      }

    protected:
      void _M_initialize_map(size_t);
      void _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish);
      void _M_destroy_nodes(_Map_pointer __nstart,
       _Map_pointer __nfinish) ;
      enum { _S_initial_map_size = 8 };

      _Deque_impl _M_impl;
# 656 "/usr/include/c++/5/bits/stl_deque.h" 3
    };

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base()
    {
      if (this->_M_impl._M_map)
 {
   _M_destroy_nodes(this->_M_impl._M_start._M_node,
      this->_M_impl._M_finish._M_node + 1);
   _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 }
    }
# 678 "/usr/include/c++/5/bits/stl_deque.h" 3
  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
      + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
        size_t(__num_nodes + 2));
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);






      _Map_pointer __nstart = (this->_M_impl._M_map
          + (this->_M_impl._M_map_size - __num_nodes) / 2);
      _Map_pointer __nfinish = __nstart + __num_nodes;

      try
 { _M_create_nodes(__nstart, __nfinish); }
      catch(...)
 {
   _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
   this->_M_impl._M_map = _Map_pointer();
   this->_M_impl._M_map_size = 0;
   throw;
 }

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
     + __num_elements
     % __deque_buf_size(sizeof(_Tp)));
    }

  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
    _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
    {
      _Map_pointer __cur;
      try
 {
   for (__cur = __nstart; __cur < __nfinish; ++__cur)
     *__cur = this->_M_allocate_node();
 }
      catch(...)
 {
   _M_destroy_nodes(__nstart, __cur);
   throw;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
       _Map_pointer __nfinish)
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 _M_deallocate_node(*__n);
    }
# 829 "/usr/include/c++/5/bits/stl_deque.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class deque : protected _Deque_base<_Tp, _Alloc>
    {

      typedef typename _Alloc::value_type _Alloc_value_type;
     
     

      typedef _Deque_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef typename _Base::_Alloc_traits _Alloc_traits;
      typedef typename _Base::_Map_pointer _Map_pointer;

    public:
      typedef _Tp value_type;
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Base::iterator iterator;
      typedef typename _Base::const_iterator const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      static size_t _S_buffer_size()
      { return __deque_buf_size(sizeof(_Tp)); }


      using _Base::_M_initialize_map;
      using _Base::_M_create_nodes;
      using _Base::_M_destroy_nodes;
      using _Base::_M_allocate_node;
      using _Base::_M_deallocate_node;
      using _Base::_M_allocate_map;
      using _Base::_M_deallocate_map;
      using _Base::_M_get_Tp_allocator;





      using _Base::_M_impl;

    public:






      deque() : _Base() { }





      explicit
      deque(const allocator_type& __a)
      : _Base(__a, 0) { }
# 927 "/usr/include/c++/5/bits/stl_deque.h" 3
      explicit
      deque(size_type __n, const value_type& __value = value_type(),
     const allocator_type& __a = allocator_type())
      : _Base(__a, __n)
      { _M_fill_initialize(__value); }
# 941 "/usr/include/c++/5/bits/stl_deque.h" 3
      deque(const deque& __x)
      : _Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),
       __x.size())
      { std::__uninitialized_copy_a(__x.begin(), __x.end(),
        this->_M_impl._M_start,
        _M_get_Tp_allocator()); }
# 1022 "/usr/include/c++/5/bits/stl_deque.h" 3
      template<typename _InputIterator>
        deque(_InputIterator __first, _InputIterator __last,
       const allocator_type& __a = allocator_type())
 : _Base(__a)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_initialize_dispatch(__first, __last, _Integral());
 }







      ~deque()
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
# 1048 "/usr/include/c++/5/bits/stl_deque.h" 3
      deque&
      operator=(const deque& __x);
# 1098 "/usr/include/c++/5/bits/stl_deque.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 1121 "/usr/include/c++/5/bits/stl_deque.h" 3
      template<typename _InputIterator>
        void
        assign(_InputIterator __first, _InputIterator __last)
        {
   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_assign_dispatch(__first, __last, _Integral());
 }
# 1148 "/usr/include/c++/5/bits/stl_deque.h" 3
      allocator_type
      get_allocator() const
      { return _Base::get_allocator(); }






      iterator
      begin()
      { return this->_M_impl._M_start; }





      const_iterator
      begin() const
      { return this->_M_impl._M_start; }






      iterator
      end()
      { return this->_M_impl._M_finish; }






      const_iterator
      end() const
      { return this->_M_impl._M_finish; }






      reverse_iterator
      rbegin()
      { return reverse_iterator(this->_M_impl._M_finish); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rend()
      { return reverse_iterator(this->_M_impl._M_start); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(this->_M_impl._M_start); }
# 1262 "/usr/include/c++/5/bits/stl_deque.h" 3
      size_type
      size() const
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }


      size_type
      max_size() const
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
# 1325 "/usr/include/c++/5/bits/stl_deque.h" 3
      void
      resize(size_type __new_size, value_type __x = value_type())
      {
 const size_type __len = size();
 if (__new_size > __len)
   insert(this->_M_impl._M_finish, __new_size - __len, __x);
 else if (__new_size < __len)
   _M_erase_at_end(this->_M_impl._M_start
     + difference_type(__new_size));
      }
# 1348 "/usr/include/c++/5/bits/stl_deque.h" 3
      bool
      empty() const
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
# 1364 "/usr/include/c++/5/bits/stl_deque.h" 3
      reference
      operator[](size_type __n)
      { return this->_M_impl._M_start[difference_type(__n)]; }
# 1379 "/usr/include/c++/5/bits/stl_deque.h" 3
      const_reference
      operator[](size_type __n) const
      { return this->_M_impl._M_start[difference_type(__n)]; }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("deque::_M_range_check: __n " "(which is %zu)>= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
      }

    public:
# 1407 "/usr/include/c++/5/bits/stl_deque.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 1425 "/usr/include/c++/5/bits/stl_deque.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front()
      { return *begin(); }





      const_reference
      front() const
      { return *begin(); }





      reference
      back()
      {
 iterator __tmp = end();
 --__tmp;
 return *__tmp;
      }





      const_reference
      back() const
      {
 const_iterator __tmp = end();
 --__tmp;
 return *__tmp;
      }
# 1482 "/usr/include/c++/5/bits/stl_deque.h" 3
      void
      push_front(const value_type& __x)
      {
 if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   {
     _Alloc_traits::construct(this->_M_impl,
                              this->_M_impl._M_start._M_cur - 1,
                              __x);
     --this->_M_impl._M_start._M_cur;
   }
 else
   _M_push_front_aux(__x);
      }
# 1515 "/usr/include/c++/5/bits/stl_deque.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish._M_cur
     != this->_M_impl._M_finish._M_last - 1)
   {
     _Alloc_traits::construct(this->_M_impl,
                              this->_M_impl._M_finish._M_cur, __x);
     ++this->_M_impl._M_finish._M_cur;
   }
 else
   _M_push_back_aux(__x);
      }
# 1547 "/usr/include/c++/5/bits/stl_deque.h" 3
      void
      pop_front()
      {
 if (this->_M_impl._M_start._M_cur
     != this->_M_impl._M_start._M_last - 1)
   {
     _Alloc_traits::destroy(this->_M_impl,
                            this->_M_impl._M_start._M_cur);
     ++this->_M_impl._M_start._M_cur;
   }
 else
   _M_pop_front_aux();
      }
# 1569 "/usr/include/c++/5/bits/stl_deque.h" 3
      void
      pop_back()
      {
 if (this->_M_impl._M_finish._M_cur
     != this->_M_impl._M_finish._M_first)
   {
     --this->_M_impl._M_finish._M_cur;
     _Alloc_traits::destroy(this->_M_impl,
                            this->_M_impl._M_finish._M_cur);
   }
 else
   _M_pop_back_aux();
      }
# 1618 "/usr/include/c++/5/bits/stl_deque.h" 3
      iterator
      insert(iterator __position, const value_type& __x);
# 1678 "/usr/include/c++/5/bits/stl_deque.h" 3
      void
      insert(iterator __position, size_type __n, const value_type& __x)
      { _M_fill_insert(__position, __n, __x); }
# 1717 "/usr/include/c++/5/bits/stl_deque.h" 3
      template<typename _InputIterator>
        void
        insert(iterator __position, _InputIterator __first,
        _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_insert_dispatch(__position, __first, __last, _Integral());
 }
# 1741 "/usr/include/c++/5/bits/stl_deque.h" 3
      iterator



      erase(iterator __position)

      { return _M_erase(__position._M_const_cast()); }
# 1765 "/usr/include/c++/5/bits/stl_deque.h" 3
      iterator



      erase(iterator __first, iterator __last)

      { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }
# 1782 "/usr/include/c++/5/bits/stl_deque.h" 3
      void
      swap(deque& __x)



      {
 _M_impl._M_swap_data(__x._M_impl);
 _Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
      __x._M_get_Tp_allocator());
      }







      void
      clear()
      { _M_erase_at_end(begin()); }

    protected:






      template<typename _Integer>
        void
        _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
        {
   _M_initialize_map(static_cast<size_type>(__n));
   _M_fill_initialize(__x);
 }


      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }
# 1841 "/usr/include/c++/5/bits/stl_deque.h" 3
      template<typename _InputIterator>
        void
        _M_range_initialize(_InputIterator __first, _InputIterator __last,
       std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
       std::forward_iterator_tag);
# 1863 "/usr/include/c++/5/bits/stl_deque.h" 3
      void
      _M_fill_initialize(const value_type& __value);
# 1879 "/usr/include/c++/5/bits/stl_deque.h" 3
      template<typename _Integer>
        void
        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
        void
        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_assign_aux(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag)
        {
   const size_type __len = std::distance(__first, __last);
   if (__len > size())
     {
       _ForwardIterator __mid = __first;
       std::advance(__mid, size());
       std::copy(__first, __mid, begin());
       insert(end(), __mid, __last);
     }
   else
     _M_erase_at_end(std::copy(__first, __last, begin()));
 }



      void
      _M_fill_assign(size_type __n, const value_type& __val)
      {
 if (__n > size())
   {
     std::fill(begin(), end(), __val);
     insert(end(), __n - size(), __val);
   }
 else
   {
     _M_erase_at_end(begin() + difference_type(__n));
     std::fill(begin(), end(), __val);
   }
      }




      void _M_push_back_aux(const value_type&);

      void _M_push_front_aux(const value_type&);
# 1950 "/usr/include/c++/5/bits/stl_deque.h" 3
      void _M_pop_back_aux();

      void _M_pop_front_aux();
# 1962 "/usr/include/c++/5/bits/stl_deque.h" 3
      template<typename _Integer>
        void
        _M_insert_dispatch(iterator __pos,
      _Integer __n, _Integer __x, __true_type)
        { _M_fill_insert(__pos, __n, __x); }


      template<typename _InputIterator>
        void
        _M_insert_dispatch(iterator __pos,
      _InputIterator __first, _InputIterator __last,
      __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
          _M_range_insert_aux(__pos, __first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_insert_aux(iterator __pos, _InputIterator __first,
       _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_range_insert_aux(iterator __pos, _ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag);




      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);



      iterator
      _M_insert_aux(iterator __pos, const value_type& __x);







      void
      _M_insert_aux(iterator __pos, size_type __n, const value_type& __x);


      template<typename _ForwardIterator>
        void
        _M_insert_aux(iterator __pos,
        _ForwardIterator __first, _ForwardIterator __last,
        size_type __n);




      void
      _M_destroy_data_aux(iterator __first, iterator __last);



      template<typename _Alloc1>
        void
        _M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
        { _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
        const std::allocator<_Tp>&)
      {
 if (!__has_trivial_destructor(value_type))
   _M_destroy_data_aux(__first, __last);
      }


      void
      _M_erase_at_begin(iterator __pos)
      {
 _M_destroy_data(begin(), __pos, _M_get_Tp_allocator());
 _M_destroy_nodes(this->_M_impl._M_start._M_node, __pos._M_node);
 this->_M_impl._M_start = __pos;
      }



      void
      _M_erase_at_end(iterator __pos)
      {
 _M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 _M_destroy_nodes(__pos._M_node + 1,
    this->_M_impl._M_finish._M_node + 1);
 this->_M_impl._M_finish = __pos;
      }

      iterator
      _M_erase(iterator __pos);

      iterator
      _M_erase(iterator __first, iterator __last);
# 2077 "/usr/include/c++/5/bits/stl_deque.h" 3
      iterator
      _M_reserve_elements_at_front(size_type __n)
      {
 const size_type __vacancies = this->_M_impl._M_start._M_cur
                               - this->_M_impl._M_start._M_first;
 if (__n > __vacancies)
   _M_new_elements_at_front(__n - __vacancies);
 return this->_M_impl._M_start - difference_type(__n);
      }

      iterator
      _M_reserve_elements_at_back(size_type __n)
      {
 const size_type __vacancies = (this->_M_impl._M_finish._M_last
           - this->_M_impl._M_finish._M_cur) - 1;
 if (__n > __vacancies)
   _M_new_elements_at_back(__n - __vacancies);
 return this->_M_impl._M_finish + difference_type(__n);
      }

      void
      _M_new_elements_at_front(size_type __new_elements);

      void
      _M_new_elements_at_back(size_type __new_elements);
# 2113 "/usr/include/c++/5/bits/stl_deque.h" 3
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
 if (__nodes_to_add + 1 > this->_M_impl._M_map_size
     - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   _M_reallocate_map(__nodes_to_add, false);
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
 if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
           - this->_M_impl._M_map))
   _M_reallocate_map(__nodes_to_add, true);
      }

      void
      _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front);
# 2205 "/usr/include/c++/5/bits/stl_deque.h" 3
    };
# 2218 "/usr/include/c++/5/bits/stl_deque.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const deque<_Tp, _Alloc>& __x,
                         const deque<_Tp, _Alloc>& __y)
    { return __x.size() == __y.size()
             && std::equal(__x.begin(), __x.end(), __y.begin()); }
# 2236 "/usr/include/c++/5/bits/stl_deque.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const deque<_Tp, _Alloc>& __x,
       const deque<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const deque<_Tp, _Alloc>& __x,
        const deque<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const deque<_Tp, _Alloc>& __x,
       const deque<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const deque<_Tp, _Alloc>& __x,
        const deque<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const deque<_Tp, _Alloc>& __x,
        const deque<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)
    { __x.swap(__y); }




}
# 65 "/usr/include/c++/5/deque" 2 3

# 1 "/usr/include/c++/5/bits/deque.tcc" 1 3
# 59 "/usr/include/c++/5/bits/deque.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 90 "/usr/include/c++/5/bits/deque.tcc" 3
  template <typename _Tp, typename _Alloc>
    deque<_Tp, _Alloc>&
    deque<_Tp, _Alloc>::
    operator=(const deque& __x)
    {
      if (&__x != this)
 {
# 114 "/usr/include/c++/5/bits/deque.tcc" 3
   const size_type __len = size();
   if (__len >= __x.size())
     _M_erase_at_end(std::copy(__x.begin(), __x.end(),
          this->_M_impl._M_start));
   else
     {
       const_iterator __mid = __x.begin() + difference_type(__len);
       std::copy(__x.begin(), __mid, this->_M_impl._M_start);
       insert(this->_M_impl._M_finish, __mid, __x.end());
     }
 }
      return *this;
    }
# 190 "/usr/include/c++/5/bits/deque.tcc" 3
  template <typename _Tp, typename _Alloc>
    typename deque<_Tp, _Alloc>::iterator
    deque<_Tp, _Alloc>::



    insert(iterator __position, const value_type& __x)

    {
      if (__position._M_cur == this->_M_impl._M_start._M_cur)
 {
   push_front(__x);
   return this->_M_impl._M_start;
 }
      else if (__position._M_cur == this->_M_impl._M_finish._M_cur)
 {
   push_back(__x);
   iterator __tmp = this->_M_impl._M_finish;
   --__tmp;
   return __tmp;
 }
      else
 return _M_insert_aux(__position._M_const_cast(), __x);
   }

  template <typename _Tp, typename _Alloc>
    typename deque<_Tp, _Alloc>::iterator
    deque<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      iterator __next = __position;
      ++__next;
      const difference_type __index = __position - begin();
      if (static_cast<size_type>(__index) < (size() >> 1))
 {
   if (__position != begin())
     std::copy_backward(begin(), __position, __next);
   pop_front();
 }
      else
 {
   if (__next != end())
     std::copy(__next, end(), __position);
   pop_back();
 }
      return begin() + __index;
    }

  template <typename _Tp, typename _Alloc>
    typename deque<_Tp, _Alloc>::iterator
    deque<_Tp, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first == __last)
 return __first;
      else if (__first == begin() && __last == end())
 {
   clear();
   return end();
 }
      else
 {
   const difference_type __n = __last - __first;
   const difference_type __elems_before = __first - begin();
   if (static_cast<size_type>(__elems_before) <= (size() - __n) / 2)
     {
       if (__first != begin())
  std::copy_backward(begin(), __first, __last);
       _M_erase_at_begin(begin() + __n);
     }
   else
     {
       if (__last != end())
  std::copy(__last, end(), __first);
       _M_erase_at_end(end() - __n);
     }
   return begin() + __elems_before;
 }
    }

  template <typename _Tp, class _Alloc>
    template <typename _InputIterator>
      void
      deque<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
        iterator __cur = begin();
        for (; __first != __last && __cur != end(); ++__cur, ++__first)
          *__cur = *__first;
        if (__first == __last)
          _M_erase_at_end(__cur);
        else
          insert(end(), __first, __last);
      }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_fill_insert(iterator __pos, size_type __n, const value_type& __x)
    {
      if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 {
   iterator __new_start = _M_reserve_elements_at_front(__n);
   try
     {
       std::__uninitialized_fill_a(__new_start, this->_M_impl._M_start,
       __x, _M_get_Tp_allocator());
       this->_M_impl._M_start = __new_start;
     }
   catch(...)
     {
       _M_destroy_nodes(__new_start._M_node,
          this->_M_impl._M_start._M_node);
       throw;
     }
 }
      else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 {
   iterator __new_finish = _M_reserve_elements_at_back(__n);
   try
     {
       std::__uninitialized_fill_a(this->_M_impl._M_finish,
       __new_finish, __x,
       _M_get_Tp_allocator());
       this->_M_impl._M_finish = __new_finish;
     }
   catch(...)
     {
       _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
          __new_finish._M_node + 1);
       throw;
     }
 }
      else
        _M_insert_aux(__pos, __n, __x);
    }
# 372 "/usr/include/c++/5/bits/deque.tcc" 3
  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_fill_initialize(const value_type& __value)
    {
      _Map_pointer __cur;
      try
        {
          for (__cur = this->_M_impl._M_start._M_node;
        __cur < this->_M_impl._M_finish._M_node;
        ++__cur)
            std::__uninitialized_fill_a(*__cur, *__cur + _S_buffer_size(),
     __value, _M_get_Tp_allocator());
          std::__uninitialized_fill_a(this->_M_impl._M_finish._M_first,
          this->_M_impl._M_finish._M_cur,
          __value, _M_get_Tp_allocator());
        }
      catch(...)
        {
          std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),
   _M_get_Tp_allocator());
          throw;
        }
    }

  template <typename _Tp, typename _Alloc>
    template <typename _InputIterator>
      void
      deque<_Tp, _Alloc>::
      _M_range_initialize(_InputIterator __first, _InputIterator __last,
                          std::input_iterator_tag)
      {
        this->_M_initialize_map(0);
        try
          {
            for (; __first != __last; ++__first)



              push_back(*__first);

          }
        catch(...)
          {
            clear();
            throw;
          }
      }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
      _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
                          std::forward_iterator_tag)
      {
        const size_type __n = std::distance(__first, __last);
        this->_M_initialize_map(__n);

        _Map_pointer __cur_node;
        try
          {
            for (__cur_node = this->_M_impl._M_start._M_node;
                 __cur_node < this->_M_impl._M_finish._M_node;
                 ++__cur_node)
       {
  _ForwardIterator __mid = __first;
  std::advance(__mid, _S_buffer_size());
  std::__uninitialized_copy_a(__first, __mid, *__cur_node,
         _M_get_Tp_allocator());
  __first = __mid;
       }
            std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_finish._M_first,
     _M_get_Tp_allocator());
          }
        catch(...)
          {
            std::_Destroy(this->_M_impl._M_start,
     iterator(*__cur_node, __cur_node),
     _M_get_Tp_allocator());
            throw;
          }
      }


  template<typename _Tp, typename _Alloc>






      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)

      {
 _M_reserve_map_at_back();
 *(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 try
   {





     this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);

     this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
      + 1);
     this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   }
 catch(...)
   {
     _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
     throw;
   }
      }


  template<typename _Tp, typename _Alloc>






      void
      deque<_Tp, _Alloc>::
      _M_push_front_aux(const value_type& __t)

      {
 _M_reserve_map_at_front();
 *(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 try
   {
     this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
            - 1);
     this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;





     this->_M_impl.construct(this->_M_impl._M_start._M_cur, __t);

   }
 catch(...)
   {
     ++this->_M_impl._M_start;
     _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));
     throw;
   }
      }


  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
    _M_pop_back_aux()
    {
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
        this->_M_impl._M_finish._M_cur);
    }






  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
        this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
    }

  template <typename _Tp, typename _Alloc>
    template <typename _InputIterator>
      void
      deque<_Tp, _Alloc>::
      _M_range_insert_aux(iterator __pos,
                          _InputIterator __first, _InputIterator __last,
                          std::input_iterator_tag)
      { std::copy(__first, __last, std::inserter(*this, __pos)); }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
      _M_range_insert_aux(iterator __pos,
                          _ForwardIterator __first, _ForwardIterator __last,
                          std::forward_iterator_tag)
      {
        const size_type __n = std::distance(__first, __last);
        if (__pos._M_cur == this->_M_impl._M_start._M_cur)
   {
     iterator __new_start = _M_reserve_elements_at_front(__n);
     try
       {
  std::__uninitialized_copy_a(__first, __last, __new_start,
         _M_get_Tp_allocator());
  this->_M_impl._M_start = __new_start;
       }
     catch(...)
       {
  _M_destroy_nodes(__new_start._M_node,
     this->_M_impl._M_start._M_node);
  throw;
       }
   }
        else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
   {
     iterator __new_finish = _M_reserve_elements_at_back(__n);
     try
       {
  std::__uninitialized_copy_a(__first, __last,
         this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  this->_M_impl._M_finish = __new_finish;
       }
     catch(...)
       {
  _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
     __new_finish._M_node + 1);
  throw;
       }
   }
        else
          _M_insert_aux(__pos, __first, __last, __n);
      }

  template<typename _Tp, typename _Alloc>
# 620 "/usr/include/c++/5/bits/deque.tcc" 3
    typename deque<_Tp, _Alloc>::iterator
      deque<_Tp, _Alloc>::
      _M_insert_aux(iterator __pos, const value_type& __x)
      {
 value_type __x_copy = __x;

 difference_type __index = __pos - this->_M_impl._M_start;
 if (static_cast<size_type>(__index) < size() / 2)
   {
     push_front((front()));
     iterator __front1 = this->_M_impl._M_start;
     ++__front1;
     iterator __front2 = __front1;
     ++__front2;
     __pos = this->_M_impl._M_start + __index;
     iterator __pos1 = __pos;
     ++__pos1;
     std::copy(__front2, __pos1, __front1);
   }
 else
   {
     push_back((back()));
     iterator __back1 = this->_M_impl._M_finish;
     --__back1;
     iterator __back2 = __back1;
     --__back2;
     __pos = this->_M_impl._M_start + __index;
     std::copy_backward(__pos, __back2, __back1);
   }
 *__pos = (__x_copy);
 return __pos;
      }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_insert_aux(iterator __pos, size_type __n, const value_type& __x)
    {
      const difference_type __elems_before = __pos - this->_M_impl._M_start;
      const size_type __length = this->size();
      value_type __x_copy = __x;
      if (__elems_before < difference_type(__length / 2))
 {
   iterator __new_start = _M_reserve_elements_at_front(__n);
   iterator __old_start = this->_M_impl._M_start;
   __pos = this->_M_impl._M_start + __elems_before;
   try
     {
       if (__elems_before >= difference_type(__n))
  {
    iterator __start_n = (this->_M_impl._M_start
     + difference_type(__n));
    std::__uninitialized_move_a(this->_M_impl._M_start,
           __start_n, __new_start,
           _M_get_Tp_allocator());
    this->_M_impl._M_start = __new_start;
    std::copy(__start_n, __pos, __old_start);
    std::fill(__pos - difference_type(__n), __pos, __x_copy);
  }
       else
  {
    std::__uninitialized_move_fill(this->_M_impl._M_start,
       __pos, __new_start,
       this->_M_impl._M_start,
       __x_copy,
       _M_get_Tp_allocator());
    this->_M_impl._M_start = __new_start;
    std::fill(__old_start, __pos, __x_copy);
  }
     }
   catch(...)
     {
       _M_destroy_nodes(__new_start._M_node,
          this->_M_impl._M_start._M_node);
       throw;
     }
 }
      else
 {
   iterator __new_finish = _M_reserve_elements_at_back(__n);
   iterator __old_finish = this->_M_impl._M_finish;
   const difference_type __elems_after =
     difference_type(__length) - __elems_before;
   __pos = this->_M_impl._M_finish - __elems_after;
   try
     {
       if (__elems_after > difference_type(__n))
  {
    iterator __finish_n = (this->_M_impl._M_finish
      - difference_type(__n));
    std::__uninitialized_move_a(__finish_n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish = __new_finish;
    std::copy_backward(__pos, __finish_n, __old_finish);
    std::fill(__pos, __pos + difference_type(__n), __x_copy);
  }
       else
  {
    std::__uninitialized_fill_move(this->_M_impl._M_finish,
       __pos + difference_type(__n),
       __x_copy, __pos,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
    this->_M_impl._M_finish = __new_finish;
    std::fill(__pos, __old_finish, __x_copy);
  }
     }
   catch(...)
     {
       _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
          __new_finish._M_node + 1);
       throw;
     }
 }
    }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
      _M_insert_aux(iterator __pos,
                    _ForwardIterator __first, _ForwardIterator __last,
                    size_type __n)
      {
        const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
        const size_type __length = size();
        if (static_cast<size_type>(__elemsbefore) < __length / 2)
   {
     iterator __new_start = _M_reserve_elements_at_front(__n);
     iterator __old_start = this->_M_impl._M_start;
     __pos = this->_M_impl._M_start + __elemsbefore;
     try
       {
  if (__elemsbefore >= difference_type(__n))
    {
      iterator __start_n = (this->_M_impl._M_start
       + difference_type(__n));
      std::__uninitialized_move_a(this->_M_impl._M_start,
      __start_n, __new_start,
      _M_get_Tp_allocator());
      this->_M_impl._M_start = __new_start;
      std::copy(__start_n, __pos, __old_start);
      std::copy(__first, __last, __pos - difference_type(__n));
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, difference_type(__n) - __elemsbefore);
      std::__uninitialized_move_copy(this->_M_impl._M_start,
         __pos, __first, __mid,
         __new_start,
         _M_get_Tp_allocator());
      this->_M_impl._M_start = __new_start;
      std::copy(__mid, __last, __old_start);
    }
       }
     catch(...)
       {
  _M_destroy_nodes(__new_start._M_node,
     this->_M_impl._M_start._M_node);
  throw;
       }
   }
        else
        {
          iterator __new_finish = _M_reserve_elements_at_back(__n);
          iterator __old_finish = this->_M_impl._M_finish;
          const difference_type __elemsafter =
            difference_type(__length) - __elemsbefore;
          __pos = this->_M_impl._M_finish - __elemsafter;
          try
            {
              if (__elemsafter > difference_type(__n))
  {
    iterator __finish_n = (this->_M_impl._M_finish
      - difference_type(__n));
    std::__uninitialized_move_a(__finish_n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish = __new_finish;
    std::copy_backward(__pos, __finish_n, __old_finish);
    std::copy(__first, __last, __pos);
  }
              else
  {
    _ForwardIterator __mid = __first;
    std::advance(__mid, __elemsafter);
    std::__uninitialized_copy_move(__mid, __last, __pos,
       this->_M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
    this->_M_impl._M_finish = __new_finish;
    std::copy(__first, __mid, __pos);
  }
            }
          catch(...)
            {
              _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
          __new_finish._M_node + 1);
              throw;
            }
        }
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
     __node < __last._M_node; ++__node)
  std::_Destroy(*__node, *__node + _S_buffer_size(),
         _M_get_Tp_allocator());

       if (__first._M_node != __last._M_node)
  {
    std::_Destroy(__first._M_cur, __first._M_last,
    _M_get_Tp_allocator());
    std::_Destroy(__last._M_first, __last._M_cur,
    _M_get_Tp_allocator());
  }
       else
  std::_Destroy(__first._M_cur, __last._M_cur,
         _M_get_Tp_allocator());
     }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_new_elements_at_front(size_type __new_elems)
    {
      if (this->max_size() - this->size() < __new_elems)
 __throw_length_error(("deque::_M_new_elements_at_front"));

      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
         / _S_buffer_size());
      _M_reserve_map_at_front(__new_nodes);
      size_type __i;
      try
        {
          for (__i = 1; __i <= __new_nodes; ++__i)
            *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
        }
      catch(...)
        {
          for (size_type __j = 1; __j < __i; ++__j)
            _M_deallocate_node(*(this->_M_impl._M_start._M_node - __j));
          throw;
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_new_elements_at_back(size_type __new_elems)
    {
      if (this->max_size() - this->size() < __new_elems)
 __throw_length_error(("deque::_M_new_elements_at_back"));

      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
         / _S_buffer_size());
      _M_reserve_map_at_back(__new_nodes);
      size_type __i;
      try
        {
          for (__i = 1; __i <= __new_nodes; ++__i)
            *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
        }
      catch(...)
        {
          for (size_type __j = 1; __j < __i; ++__j)
            _M_deallocate_node(*(this->_M_impl._M_finish._M_node + __j));
          throw;
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
 = this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 {
   __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
      - __new_num_nodes) / 2
                  + (__add_at_front ? __nodes_to_add : 0);
   if (__new_nstart < this->_M_impl._M_start._M_node)
     std::copy(this->_M_impl._M_start._M_node,
        this->_M_impl._M_finish._M_node + 1,
        __new_nstart);
   else
     std::copy_backward(this->_M_impl._M_start._M_node,
          this->_M_impl._M_finish._M_node + 1,
          __new_nstart + __old_num_nodes);
 }
      else
 {
   size_type __new_map_size = this->_M_impl._M_map_size
                              + std::max(this->_M_impl._M_map_size,
      __nodes_to_add) + 2;

   _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
   __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
                  + (__add_at_front ? __nodes_to_add : 0);
   std::copy(this->_M_impl._M_start._M_node,
      this->_M_impl._M_finish._M_node + 1,
      __new_nstart);
   _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);

   this->_M_impl._M_map = __new_map;
   this->_M_impl._M_map_size = __new_map_size;
 }

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
    }



  template<typename _Tp>
    void
    fill(const _Deque_iterator<_Tp, _Tp&, _Tp*>& __first,
  const _Deque_iterator<_Tp, _Tp&, _Tp*>& __last, const _Tp& __value)
    {
      typedef typename _Deque_iterator<_Tp, _Tp&, _Tp*>::_Self _Self;

      for (typename _Self::_Map_pointer __node = __first._M_node + 1;
           __node < __last._M_node; ++__node)
 std::fill(*__node, *__node + _Self::_S_buffer_size(), __value);

      if (__first._M_node != __last._M_node)
 {
   std::fill(__first._M_cur, __first._M_last, __value);
   std::fill(__last._M_first, __last._M_cur, __value);
 }
      else
 std::fill(__first._M_cur, __last._M_cur, __value);
    }

  template<typename _Tp>
    _Deque_iterator<_Tp, _Tp&, _Tp*>
    copy(_Deque_iterator<_Tp, const _Tp&, const _Tp*> __first,
  _Deque_iterator<_Tp, const _Tp&, const _Tp*> __last,
  _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef typename _Deque_iterator<_Tp, _Tp&, _Tp*>::_Self _Self;
      typedef typename _Self::difference_type difference_type;

      difference_type __len = __last - __first;
      while (__len > 0)
 {
   const difference_type __clen
     = std::min(__len, std::min(__first._M_last - __first._M_cur,
           __result._M_last - __result._M_cur));
   std::copy(__first._M_cur, __first._M_cur + __clen, __result._M_cur);
   __first += __clen;
   __result += __clen;
   __len -= __clen;
 }
      return __result;
    }

  template<typename _Tp>
    _Deque_iterator<_Tp, _Tp&, _Tp*>
    copy_backward(_Deque_iterator<_Tp, const _Tp&, const _Tp*> __first,
    _Deque_iterator<_Tp, const _Tp&, const _Tp*> __last,
    _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef typename _Deque_iterator<_Tp, _Tp&, _Tp*>::_Self _Self;
      typedef typename _Self::difference_type difference_type;

      difference_type __len = __last - __first;
      while (__len > 0)
 {
   difference_type __llen = __last._M_cur - __last._M_first;
   _Tp* __lend = __last._M_cur;

   difference_type __rlen = __result._M_cur - __result._M_first;
   _Tp* __rend = __result._M_cur;

   if (!__llen)
     {
       __llen = _Self::_S_buffer_size();
       __lend = *(__last._M_node - 1) + __llen;
     }
   if (!__rlen)
     {
       __rlen = _Self::_S_buffer_size();
       __rend = *(__result._M_node - 1) + __rlen;
     }

   const difference_type __clen = std::min(__len,
        std::min(__llen, __rlen));
   std::copy_backward(__lend - __clen, __lend, __rend);
   __last -= __clen;
   __result -= __clen;
   __len -= __clen;
 }
      return __result;
    }
# 1093 "/usr/include/c++/5/bits/deque.tcc" 3

}
# 67 "/usr/include/c++/5/deque" 2 3
# 42 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DequeRingBuffer.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/RingBuffer.h" 1
# 44 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/RingBuffer.h"
# 1 "/usr/include/c++/5/cstdarg" 1 3
# 39 "/usr/include/c++/5/cstdarg" 3
       
# 40 "/usr/include/c++/5/cstdarg" 3
# 45 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/RingBuffer.h" 2
# 58 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/RingBuffer.h"

# 58 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/RingBuffer.h"
class RingBuffer : public StreamReader, public BufferWriter {

private:

 BC capacity_;


protected:



 virtual void clear_() = 0;




public:

 RingBuffer();
 RingBuffer(const BC& capacity);

 void clear();

 BC getCapacity() const;
 BC getRemainingCapacity() const;

 virtual ~RingBuffer();

};
# 43 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DequeRingBuffer.h" 2
# 53 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DequeRingBuffer.h"
class DequeRingBuffer : public RingBuffer {

private:


 std::deque<uint8_t> data_;


 uint8_t writeBitOff_;


 uint8_t readBitOff_;


protected:




 virtual bool getBit_(const BC& bc) const;


 virtual uint8_t getByte_(const BC& bc) const;


 virtual BC copyTo_(BufferWriter& buffer) const;


 virtual BC getLength_() const;




 virtual uint8_t readByte_(bool remove = true);


 virtual bool readBit_(bool remove = true);




 virtual void clear_();




public:


 DequeRingBuffer();


 DequeRingBuffer(const BC& capacity);




 virtual bool appendBit(bool bit);


 virtual bool appendByte(uint8_t byte);


 virtual bool setBit(const BC& bc, bool bit);


 virtual bool setByte(const BC& bc, uint8_t byte);




 virtual ~DequeRingBuffer();

};
# 48 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/FileStreamReader.h" 2
# 56 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/FileStreamReader.h"
class FileStreamReader : public StreamReader {

private:


 DequeRingBuffer buffer_;



 const std::string& filename_;


 std::ifstream* ifs_;


 BC length_;



 void read_();


protected:




 virtual uint8_t readByte_(bool remove = true);


 virtual bool readBit_(bool remove = true);




 virtual bool getBit_(const BC& bc) const;


 virtual uint8_t getByte_(const BC& bc) const;


 virtual BC copyTo_(BufferWriter& buffer) const;


 virtual BC getLength_() const;




public:


 FileStreamReader(const std::string& filename, bool infinite = false);



 virtual ~FileStreamReader();

};
# 32 "src/generate.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DecisionReader.h" 1
# 49 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DecisionReader.h"
class DecisionReader : public StreamReader {

private:


 StreamReader& streamer_;


protected:




 inline uint8_t readByte_(bool remove = true) {

  return streamer_.readByte(remove);
 }


 inline bool readBit_(bool remove = true) {

  return streamer_.readBit(remove);
 }




 inline bool getBit_(const BC& bc) const {

  return streamer_.getBit(bc);
 }


 inline uint8_t getByte_(const BC& bc) const {

  return streamer_.getByte(bc);
 }


 inline BC copyTo_(BufferWriter& buffer) const {

  return streamer_.copyTo(buffer);
 }


 inline BC getLength_() const {

  return streamer_.getLength();
 }




public:


 DecisionReader(StreamReader& streamer);


 inline StreamReader& getStreamReader() {

  return streamer_;
 }



 bool readBoolUniform();


 size_t readUIntUniform(size_t max);


 size_t readUIntExponential(size_t num, size_t denom);



 virtual ~DecisionReader();

};
# 33 "src/generate.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitFilter.h" 1
# 42 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitFilter.h"
class DataUnit;
class TypeDescriptor;
# 52 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitFilter.h"
class DataUnitFilter {

public:


 DataUnitFilter();



 virtual bool apply(const DataUnit& dataUnit) const;



 virtual ~DataUnitFilter();

};
# 76 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitFilter.h"
class InvertingDataUnitFilter : public DataUnitFilter {

private:


 const DataUnitFilter& filter_;


public:


 InvertingDataUnitFilter(const DataUnitFilter& filter);



 virtual bool apply(const DataUnit& dataUnit) const;



 virtual ~InvertingDataUnitFilter();

};
# 106 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitFilter.h"
class ConjunctionDataUnitFilter : public DataUnitFilter {

private:


 std::vector<const DataUnitFilter*> filters_;


public:


 ConjunctionDataUnitFilter(const DataUnitFilter& filter1,
   const DataUnitFilter& filter2);


 ConjunctionDataUnitFilter(const DataUnitFilter& filter1,
   const DataUnitFilter& filter2, const DataUnitFilter& filter3);



 virtual bool apply(const DataUnit& dataUnit) const;



 virtual ~ConjunctionDataUnitFilter();

};
# 142 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitFilter.h"
class DataUnitTypeFilter : public DataUnitFilter {

private:


 const TypeDescriptor& filterType_;


 bool strict_;


 bool inclusive_;


public:


 DataUnitTypeFilter(const TypeDescriptor& type,
   bool strict = false, bool inclusive = true);



 bool apply(const DataUnit& dataUnit) const;



 virtual ~DataUnitTypeFilter();

};
# 34 "src/generate.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitCursor.h" 1
# 40 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitCursor.h"
# 1 "/usr/include/c++/5/cstdlib" 1 3
# 39 "/usr/include/c++/5/cstdlib" 3
       
# 40 "/usr/include/c++/5/cstdlib" 3
# 41 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitCursor.h" 2




class DataUnitFilter;
# 54 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitCursor.h"
class DataUnitCursor {

private:


 DataUnit& root_;


 DataUnit* position_;


 const DataUnitFilter* globalFilter_;



 bool applyFilter(const DataUnit* dataUnit,
   const DataUnitFilter* filter = 0) const;


 size_t scan(std::vector<DataUnit*>* dataUnits,
   const DataUnitFilter* filter = 0) const;


 size_t printScan_(const DataUnitFilter* filter, bool printAll) const;


 bool seekByIndex_(size_t n, const DataUnitFilter* filter);


public:


 DataUnitCursor(DataUnit& root);


 DataUnitCursor(DataUnit& root, DataUnit& position);


 DataUnitCursor(DataUnit& root, const DataUnitFilter& filter);


 DataUnitCursor(DataUnit& root, DataUnit& position,
   const DataUnitFilter& filter);



 inline const DataUnit& getRoot() const {

  return root_;
 }


 inline DataUnit* getPosition() {

  return position_;
 }


 inline DataUnit& getCurrent() {

  return *position_;
 }


 inline bool valid() const {

  return position_ != 0;
 }



 bool moveTo(DataUnit* position);


 bool setTo(DataUnit* position);


 inline bool moveTo(DataUnit& position) {

  return this->moveTo(&position);
 }


 inline bool seekByIndex(size_t n) {

  return this->seekByIndex_(n, (const DataUnitFilter*)0);
 }


 inline bool seekByIndex(size_t n, const DataUnitFilter& filter) {

  return this->seekByIndex_(n, &filter);
 }


 inline bool seekByPath(const std::string& path) {

  return this->moveTo(root_.getByPath(path));
 }


 inline bool moveToRoot() {

  return this->moveTo(root_);
 }


 bool moveToEnd();



 bool moveRight(size_t steps = 1, const DataUnitFilter* filter = 0);


 bool moveLeft(size_t steps = 1, const DataUnitFilter* filter = 0);


 bool moveUp(size_t steps = 1, const DataUnitFilter* filter = 0);


 bool moveDown(size_t steps = 1, const DataUnitFilter* filter = 0);


 bool moveForward(size_t steps = 1, const DataUnitFilter* filter = 0);


 bool moveBackward(size_t steps = 1, const DataUnitFilter* filter = 0);



 inline size_t printScan() const {

  return this->printScan_((const DataUnitFilter*)0, true);
 }


 inline size_t printScan(const DataUnitFilter& filter,
   bool printAll = false) const {

  return this->printScan_(&filter, printAll);
 }


 inline size_t count() const {

  return this->scan((std::vector<DataUnit*>*)0, (const DataUnitFilter*)0);
 }


 inline size_t count(const DataUnitFilter& filter) const {

  return this->scan((std::vector<DataUnit*>*)0, &filter);
 }


 inline size_t enumerate(std::vector<DataUnit*>& dataUnits) const {

  return this->scan(&dataUnits, (const DataUnitFilter*)0);
 }


 inline size_t enumerate(std::vector<DataUnit*>& dataUnits,
   const DataUnitFilter& filter) const {

  return this->scan(&dataUnits, &filter);
 }



 bool doInsert(DataUnit* insertion);


 bool doReplace(DataUnit* replacement);


 bool doTruncate(const BC& length);


 bool doRemove();


 bool doDelete();



 virtual ~DataUnitCursor();

};
# 35 "src/generate.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitVisitor.h" 1
# 42 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitVisitor.h"
class DataUnit;
# 51 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitVisitor.h"
class DataUnitVisitor {

private:


 size_t visit(DataUnit& dataUnit, size_t index, size_t depth);


protected:


 virtual bool visiting(DataUnit& dataUnit, size_t index, size_t depth) = 0;


public:


 DataUnitVisitor();


 size_t visit(DataUnit& dataUnit);


 virtual ~DataUnitVisitor();

};
# 36 "src/generate.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/FuzzOperator.h" 1
# 40 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/FuzzOperator.h"
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitOperator.h" 1
# 42 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitOperator.h"
class DataUnitCursor;
class DataUnitFilter;
# 52 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitOperator.h"
class DataUnitOperator {

private:


 PropertyNode lastOpLog_;


protected:


 virtual bool apply_(DataUnitCursor& cursor, PropertyNode& log) = 0;


public:


 DataUnitOperator();



 bool apply(DataUnitCursor& cursor);



 virtual const DataUnitFilter& getApplicationFilter() const;



 inline PropertyNode& getLastOperationLog() {

  return lastOpLog_;
 }



 virtual ~DataUnitOperator();

};
# 100 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitOperator.h"
class VoidingOperator : public DataUnitOperator {

protected:


 bool apply_(DataUnitCursor& cursor, PropertyNode& log);


public:


 VoidingOperator();



 virtual ~VoidingOperator();

};
# 127 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitOperator.h"
class OpacifyingOperator : public DataUnitOperator {

protected:


 bool apply_(DataUnitCursor& cursor, PropertyNode& log);


public:


 OpacifyingOperator();



 virtual const DataUnitFilter& getApplicationFilter() const;



 virtual ~OpacifyingOperator();

};
# 158 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitOperator.h"
class DuplicatingOperator : public DataUnitOperator {

protected:


 bool apply_(DataUnitCursor& cursor, PropertyNode& log);


public:


 DuplicatingOperator();



 virtual ~DuplicatingOperator();

};
# 185 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitOperator.h"
class DeletingOperator : public DataUnitOperator {

protected:


 bool apply_(DataUnitCursor& cursor, PropertyNode& log);


public:


 DeletingOperator();



 virtual ~DeletingOperator();

};
# 212 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitOperator.h"
class RepairingOperator : public DataUnitOperator {

protected:


 bool apply_(DataUnitCursor& cursor, PropertyNode& log);


public:


 RepairingOperator();



 virtual ~RepairingOperator();

};
# 41 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/FuzzOperator.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DecisionReader.h" 1
# 42 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/FuzzOperator.h" 2

class DataUnit;
# 52 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/FuzzOperator.h"
class FuzzOperator : public DataUnitOperator {

private:


 DecisionReader& decisionReader_;


protected:


 inline DecisionReader& getDecisionReader() {

  return decisionReader_;
 }


public:


 FuzzOperator(DecisionReader& decisionReader);



 virtual ~FuzzOperator();

};
# 88 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/FuzzOperator.h"
class FuzzIntOperator : public FuzzOperator {

protected:


 bool apply_(DataUnitCursor& cursor, PropertyNode& log);


public:


 FuzzIntOperator(DecisionReader& decisionReader);



 virtual const DataUnitFilter& getApplicationFilter() const;



 virtual ~FuzzIntOperator();

};
# 119 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/FuzzOperator.h"
class TruncationFuzzOperator : public FuzzOperator {

protected:


 bool apply_(DataUnitCursor& cursor, PropertyNode& log);


public:


 TruncationFuzzOperator(DecisionReader& decisionReader);



 virtual ~TruncationFuzzOperator();

};
# 146 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/FuzzOperator.h"
class RepairingFuzzOperator : public FuzzOperator {

protected:


 bool apply_(DataUnitCursor& cursor, PropertyNode& log);


public:


 RepairingFuzzOperator(DecisionReader& decisionReader);



 virtual ~RepairingFuzzOperator();

};
# 173 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/FuzzOperator.h"
class FuzzDataOperator : public FuzzOperator {

private:

 bool preserveLen_;


protected:


 bool apply_(DataUnitCursor& cursor, PropertyNode& log);


public:


 FuzzDataOperator(DecisionReader& decisionReader, bool preserveLen = false);



 virtual const DataUnitFilter& getApplicationFilter() const;



 virtual ~FuzzDataOperator();

};
# 209 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/FuzzOperator.h"
class AppendingFuzzOperator : public FuzzOperator {

protected:


 bool apply_(DataUnitCursor& cursor, PropertyNode& log);


public:


 AppendingFuzzOperator(DecisionReader& decisionReader);



 virtual const DataUnitFilter& getApplicationFilter() const;



 virtual ~AppendingFuzzOperator();

};
# 240 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/FuzzOperator.h"
class GeneratingFuzzOperator : public FuzzOperator {

private:


    bool generate(DataUnit& du);


protected:


 bool apply_(DataUnitCursor& cursor, PropertyNode& log);


public:


 GeneratingFuzzOperator(DecisionReader& decisionReader);



 virtual ~GeneratingFuzzOperator();

};
# 37 "src/generate.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/DataUnitOperator.h" 1
# 38 "src/generate.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/VoidField.h" 1
# 46 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/VoidField.h"
class BC;
# 55 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/VoidField.h"
class VoidField : public FieldDataUnit {

private:


 static TypeDescriptor desc_;


protected:




 virtual bool decode_(const BufferReader& reader);


 virtual bool encode_();




 virtual bool isDecoded_() const;


 virtual DataUnit* newInstance_() const;




public:


 static inline const TypeDescriptor& typeDescriptor() {

  return desc_;
 }



 VoidField();



 const TypeDescriptor& getTypeDescriptor() const;



 virtual ~VoidField();

};
# 39 "src/generate.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/../../tls-definitions.h" 1
# 46 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/../../tls-definitions.h"
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/CompositeDataUnit.h" 1
# 48 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/CompositeDataUnit.h"
class CompositeDataUnit : public DataUnit {

private:


 static TypeDescriptor desc_;



 DataUnit* child_;


 bool autoExtend_;


 bool expanded_;


 bool stalled_;


 size_t dissectionHeadIndex_;


protected:


 CompositeDataUnit(bool expanded);



 virtual void printBody(const PrintOptions& options) const;




 virtual bool expand_(size_t len, size_t decoded, bool dry, bool ahead);


 virtual bool updateMember_(size_t index);






 virtual void dissectorBodyReset();


 virtual bool dissectorBodyIsAccepting() const;


 virtual BC dissectorBodyDissect(StreamReader& reader);




 virtual bool getBit_(const BC& bc) const;


 virtual uint8_t getByte_(const BC& bc) const;


 virtual BC copyTo_(BufferWriter& buffer) const;


 virtual BC getLength_() const;




 virtual bool isDecoded_() const;


 virtual DataUnit* getChild_() const;


 virtual void setChild_(DataUnit* child);


 virtual bool repair_(bool recursive = true);




 virtual bool propRedirectHook_(std::string& name,
   PropertyNode*& node) const;



 virtual std::string getAnchorBrackets_() const;


 virtual bool printCollapsed_() const;


public:


 static inline const TypeDescriptor& typeDescriptor() {

  return desc_;
 }



 CompositeDataUnit();



 const TypeDescriptor& getTypeDescriptor() const;





 virtual bool appendBit(bool bit);


 virtual bool appendByte(uint8_t byte);




 virtual bool setBit(const BC& bc, bool bit);


 virtual bool setByte(const BC& bc, uint8_t byte);


 virtual void clear();


 virtual void truncate(const BC& length);




 virtual std::string getAsText() const;



 bool appendChild(DataUnit* dataUnit);


 bool appendChildRenamed(DataUnit* dataUnit, const std::string& newName);



 size_t getNDecoded() const;



 bool expand(bool dry);


 void setExpanded() {

  expanded_ = true;
 }



 inline bool updateMember(size_t index) {

  return this->updateMember_(index);
 }



 size_t deleteChildren(size_t from = 0);



 virtual ~CompositeDataUnit();

};
# 47 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/../../tls-definitions.h" 2


# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/OpaqueField.h" 1
# 45 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/OpaqueField.h"
class BufferReader;
# 54 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/OpaqueField.h"
class OpaqueField : public FieldDataUnit {

private:


 static TypeDescriptor desc_;


protected:




 virtual bool decode_(const BufferReader& reader);


 virtual bool encode_();




 virtual bool isDecoded_() const;


 virtual DataUnit* newInstance_() const;




public:


 static inline const TypeDescriptor& typeDescriptor() {

  return desc_;
 }



 OpaqueField();


 OpaqueField(const BC& capacity);


 OpaqueField(const BufferReader& reader, const BC& max = -1);



 const TypeDescriptor& getTypeDescriptor() const;



 virtual ~OpaqueField();

};
# 50 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/../../tls-definitions.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/StreamVectorDataUnit.h" 1
# 40 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/StreamVectorDataUnit.h"
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/VectorDataUnit.h" 1
# 40 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/VectorDataUnit.h"
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/CompositeDataUnit.h" 1
# 41 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/VectorDataUnit.h" 2
# 49 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/VectorDataUnit.h"
class VectorDataUnit : public CompositeDataUnit {

private:


 static TypeDescriptor desc_;



 DataUnit* template_;


protected:


 VectorDataUnit(bool empty);


public:


 static inline const TypeDescriptor& typeDescriptor() {

  return desc_;
 }



 VectorDataUnit();


 VectorDataUnit(DataUnit* elementTemplate);



 const TypeDescriptor& getTypeDescriptor() const;



 void setElementTemplate(DataUnit* elementTemplate);


 DataUnit* getElementTemplate() const;



 virtual ~VectorDataUnit();

};
# 41 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/StreamVectorDataUnit.h" 2
# 49 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/StreamVectorDataUnit.h"
class StreamVectorDataUnit : public VectorDataUnit {

private:


 static TypeDescriptor desc_;



 BC N_;


protected:




 virtual bool expand_(size_t len, size_t decoded, bool dry, bool ahead);




 virtual DataUnit* newInstance_() const;




public:


 static inline const TypeDescriptor& typeDescriptor() {

  return desc_;
 }



 StreamVectorDataUnit();


 StreamVectorDataUnit(const BC& N);



 const TypeDescriptor& getTypeDescriptor() const;



 virtual ~StreamVectorDataUnit();

};
# 51 "/home/pany/tls-diff-testing/tls-diff-testing/bitman/inc/../../tls-definitions.h" 2





class TEnum_AlertLevel : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 231, "AlertLevel");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_AlertLevel() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("AlertLevel");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("warning", 1);
            staticList_.addItem("fatal" , 2);
            staticList_.addFallbackItem("unknown");
        }
    }



    TEnum_AlertLevel* newInstance_() const {

        TEnum_AlertLevel* du = new TEnum_AlertLevel();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_AlertLevel::staticList_;





class TEnum_AlertDescription : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 232, "AlertDescription");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_AlertDescription() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("AlertDescription");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("close_notify" , 0);
            staticList_.addItem("unexpected_message" , 10);
            staticList_.addItem("bad_record_mac" , 20);
            staticList_.addItem("decryption_failed_RESERVED" , 21);
            staticList_.addItem("record_overflow" , 22);
            staticList_.addItem("decompression_failure" , 30);
            staticList_.addItem("handshake_failure" , 40);
            staticList_.addItem("no_certificate_RESERVED" , 41);
            staticList_.addItem("bad_certificate" , 42);
            staticList_.addItem("unsupported_certificate" , 43);
            staticList_.addItem("certificate_revoked" , 44);
            staticList_.addItem("certificate_expired" , 45);
            staticList_.addItem("certificate_unknown" , 46);
            staticList_.addItem("illegal_parameter" , 47);
            staticList_.addItem("unknown_ca" , 48);
            staticList_.addItem("access_denied" , 49);
            staticList_.addItem("decode_error" , 50);
            staticList_.addItem("decrypt_error" , 51);
            staticList_.addItem("export_restriction_RESERVED", 60);
            staticList_.addItem("protocol_version" , 70);
            staticList_.addItem("insufficient_security" , 71);
            staticList_.addItem("internal_error" , 80);
            staticList_.addItem("user_canceled" , 90);
            staticList_.addItem("no_renegotiation" , 100);
            staticList_.addItem("unsupported_extension" , 110);
            staticList_.addFallbackItem("unknown");
        }
    }



    TEnum_AlertDescription* newInstance_() const {

        TEnum_AlertDescription* du = new TEnum_AlertDescription();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_AlertDescription::staticList_;





class TStruct_Alert : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 233, "Alert");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_Alert() : CompositeDataUnit() {

        this->setName("Alert");
    }



    TStruct_Alert* newInstance_() const {

        TStruct_Alert* du = new TStruct_Alert();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_AlertLevel* _M0 = new TEnum_AlertLevel();
            this->appendChildRenamed(_M0, "level");

            TEnum_AlertDescription* _M1 = new TEnum_AlertDescription();
            this->appendChildRenamed(_M1, "description");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TEnum_Type : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 234, "Type");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_Type() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("Type");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("change_cipher_spec", 20);
            staticList_.addItem("alert" , 21);
            staticList_.addItem("handshake" , 22);
            staticList_.addItem("application_data" , 23);
            staticList_.addFallbackItem("unknown");
        }
    }



    TEnum_Type* newInstance_() const {

        TEnum_Type* du = new TEnum_Type();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_Type::staticList_;





class TEnum_Version : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 235, "Version");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_Version() : EnumerationField(BC(0, 16), staticList_) {

        this->setName("Version");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("SSLv3" , 768);
            staticList_.addItem("TLSv1" , 769);
            staticList_.addItem("TLSv1_1" , 770);
            staticList_.addItem("TLSv1_2" , 771);
            staticList_.addItem("DTLSv1_2", 65277);
            staticList_.addFallbackItem("unknown");
        }
    }



    TEnum_Version* newInstance_() const {

        TEnum_Version* du = new TEnum_Version();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_Version::staticList_;





class TEnum_HandshakeType : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 236, "HandshakeType");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_HandshakeType() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("HandshakeType");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("hello_request" , 0);
            staticList_.addItem("client_hello" , 1);
            staticList_.addItem("server_hello" , 2);
            staticList_.addItem("new_session_ticket" , 4);
            staticList_.addItem("certificate" , 11);
            staticList_.addItem("server_key_exchange", 12);
            staticList_.addItem("certificate_request", 13);
            staticList_.addItem("server_hello_done" , 14);
            staticList_.addItem("certificate_verify" , 15);
            staticList_.addItem("client_key_exchange", 16);
            staticList_.addItem("finished" , 20);
            staticList_.addFallbackItem("unknown");
        }
    }



    TEnum_HandshakeType* newInstance_() const {

        TEnum_HandshakeType* du = new TEnum_HandshakeType();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_HandshakeType::staticList_;





class TStruct_DTLSClientHello_cookie : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 237, "DTLSClientHello_cookie");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_DTLSClientHello_cookie() : CompositeDataUnit() {

        this->setName("DTLSClientHello_cookie");
    }



    TStruct_DTLSClientHello_cookie* newInstance_() const {

        TStruct_DTLSClientHello_cookie* du = new TStruct_DTLSClientHello_cookie();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            OpaqueField* _M1 = new OpaqueField(BC(_value__N, 0));
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_ASN1Cert : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 238, "ASN1Cert");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ASN1Cert() : CompositeDataUnit() {

        this->setName("ASN1Cert");
    }



    TStruct_ASN1Cert* newInstance_() const {

        TStruct_ASN1Cert* du = new TStruct_ASN1Cert();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 24), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            OpaqueField* _M1 = new OpaqueField(BC(_value__N, 0));
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_HandshakeMessage_msg__C2_certificates : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 239, "HandshakeMessage_msg__C2_certificates");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_HandshakeMessage_msg__C2_certificates() : CompositeDataUnit() {

        this->setName("HandshakeMessage_msg__C2_certificates");
    }



    TStruct_HandshakeMessage_msg__C2_certificates* newInstance_() const {

        TStruct_HandshakeMessage_msg__C2_certificates* du = new TStruct_HandshakeMessage_msg__C2_certificates();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 24), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TStruct_ASN1Cert* _M1_V = new TStruct_ASN1Cert();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TEnum_ExtensionType : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 240, "ExtensionType");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_ExtensionType() : EnumerationField(BC(0, 16), staticList_) {

        this->setName("ExtensionType");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("server_name" , 0);
            staticList_.addItem("max_fragment_length" , 1);
            staticList_.addItem("client_certificate_url" , 2);
            staticList_.addItem("trusted_ca_keys" , 3);
            staticList_.addItem("truncated_hmac" , 4);
            staticList_.addItem("status_request" , 5);
            staticList_.addItem("user_mapping" , 6);
            staticList_.addItem("client_authz" , 7);
            staticList_.addItem("server_authz" , 8);
            staticList_.addItem("cert_type" , 9);
            staticList_.addItem("supported_groups" , 10);
            staticList_.addItem("ec_point_formats" , 11);
            staticList_.addItem("srp" , 12);
            staticList_.addItem("signature_algorithms" , 13);
            staticList_.addItem("use_srtp" , 14);
            staticList_.addItem("heartbeat" , 15);
            staticList_.addItem("application_layer_protocol_negotiation", 16);
            staticList_.addItem("status_request_v2" , 17);
            staticList_.addItem("signed_certificate_timestamp" , 18);
            staticList_.addItem("client_certificate_type" , 19);
            staticList_.addItem("server_certificate_type" , 20);
            staticList_.addItem("padding" , 21);
            staticList_.addItem("encrypt_then_mac" , 22);
            staticList_.addItem("extended_master_secret" , 23);
            staticList_.addItem("cached_info" , 25);
            staticList_.addItem("SessionTicket_TLS" , 35);
            staticList_.addItem("renegotiation_info" , 65281);
            staticList_.addFallbackItem("unknown");
        }
    }



    TEnum_ExtensionType* newInstance_() const {

        TEnum_ExtensionType* du = new TEnum_ExtensionType();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_ExtensionType::staticList_;





class TEnum_CompressionMethod : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 241, "CompressionMethod");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_CompressionMethod() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("CompressionMethod");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("no_compression", 0);
            staticList_.addFallbackItem("unknown");
        }
    }



    TEnum_CompressionMethod* newInstance_() const {

        TEnum_CompressionMethod* du = new TEnum_CompressionMethod();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_CompressionMethod::staticList_;





class TStruct_ClientHello_compression_methods : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 242, "ClientHello_compression_methods");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ClientHello_compression_methods() : CompositeDataUnit() {

        this->setName("ClientHello_compression_methods");
    }



    TStruct_ClientHello_compression_methods* newInstance_() const {

        TStruct_ClientHello_compression_methods* du = new TStruct_ClientHello_compression_methods();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TEnum_CompressionMethod* _M1_V = new TEnum_CompressionMethod();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_DTLSClientHello_compression_methods : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 243, "DTLSClientHello_compression_methods");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_DTLSClientHello_compression_methods() : CompositeDataUnit() {

        this->setName("DTLSClientHello_compression_methods");
    }



    TStruct_DTLSClientHello_compression_methods* newInstance_() const {

        TStruct_DTLSClientHello_compression_methods* du = new TStruct_DTLSClientHello_compression_methods();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TEnum_CompressionMethod* _M1_V = new TEnum_CompressionMethod();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TEnum_CipherSuite : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 244, "CipherSuite");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_CipherSuite() : EnumerationField(BC(0, 16), staticList_) {

        this->setName("CipherSuite");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("TLS_NULL_WITH_NULL_NULL" , 0);
            staticList_.addItem("TLS_RSA_WITH_NULL_MD5" , 1);
            staticList_.addItem("TLS_RSA_WITH_NULL_SHA" , 2);
            staticList_.addItem("TLS_RSA_EXPORT_WITH_RC4_40_MD5" , 3);
            staticList_.addItem("TLS_RSA_WITH_RC4_128_MD5" , 4);
            staticList_.addItem("TLS_RSA_WITH_RC4_128_SHA" , 5);
            staticList_.addItem("TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5" , 6);
            staticList_.addItem("TLS_RSA_WITH_IDEA_CBC_SHA" , 7);
            staticList_.addItem("TLS_RSA_EXPORT_WITH_DES40_CBC_SHA" , 8);
            staticList_.addItem("TLS_RSA_WITH_DES_CBC_SHA" , 9);
            staticList_.addItem("TLS_RSA_WITH_3DES_EDE_CBC_SHA" , 10);
            staticList_.addItem("TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA" , 11);
            staticList_.addItem("TLS_DH_DSS_WITH_DES_CBC_SHA" , 12);
            staticList_.addItem("TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA" , 13);
            staticList_.addItem("TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA" , 14);
            staticList_.addItem("TLS_DH_RSA_WITH_DES_CBC_SHA" , 15);
            staticList_.addItem("TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA" , 16);
            staticList_.addItem("TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA" , 17);
            staticList_.addItem("TLS_DHE_DSS_WITH_DES_CBC_SHA" , 18);
            staticList_.addItem("TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA" , 19);
            staticList_.addItem("TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA" , 20);
            staticList_.addItem("TLS_DHE_RSA_WITH_DES_CBC_SHA" , 21);
            staticList_.addItem("TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA" , 22);
            staticList_.addItem("TLS_DH_anon_EXPORT_WITH_RC4_40_MD5" , 23);
            staticList_.addItem("TLS_DH_anon_WITH_RC4_128_MD5" , 24);
            staticList_.addItem("TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA" , 25);
            staticList_.addItem("TLS_DH_anon_WITH_DES_CBC_SHA" , 26);
            staticList_.addItem("TLS_DH_anon_WITH_3DES_EDE_CBC_SHA" , 27);
            staticList_.addItem("TLS_KRB5_WITH_DES_CBC_SHA" , 30);
            staticList_.addItem("TLS_KRB5_WITH_3DES_EDE_CBC_SHA" , 31);
            staticList_.addItem("TLS_KRB5_WITH_RC4_128_SHA" , 32);
            staticList_.addItem("TLS_KRB5_WITH_IDEA_CBC_SHA" , 33);
            staticList_.addItem("TLS_KRB5_WITH_DES_CBC_MD5" , 34);
            staticList_.addItem("TLS_KRB5_WITH_3DES_EDE_CBC_MD5" , 35);
            staticList_.addItem("TLS_KRB5_WITH_RC4_128_MD5" , 36);
            staticList_.addItem("TLS_KRB5_WITH_IDEA_CBC_MD5" , 37);
            staticList_.addItem("TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA" , 38);
            staticList_.addItem("TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA" , 39);
            staticList_.addItem("TLS_KRB5_EXPORT_WITH_RC4_40_SHA" , 40);
            staticList_.addItem("TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5" , 41);
            staticList_.addItem("TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5" , 42);
            staticList_.addItem("TLS_KRB5_EXPORT_WITH_RC4_40_MD5" , 43);
            staticList_.addItem("TLS_PSK_WITH_NULL_SHA" , 44);
            staticList_.addItem("TLS_DHE_PSK_WITH_NULL_SHA" , 45);
            staticList_.addItem("TLS_RSA_PSK_WITH_NULL_SHA" , 46);
            staticList_.addItem("TLS_RSA_WITH_AES_128_CBC_SHA" , 47);
            staticList_.addItem("TLS_DH_DSS_WITH_AES_128_CBC_SHA" , 48);
            staticList_.addItem("TLS_DH_RSA_WITH_AES_128_CBC_SHA" , 49);
            staticList_.addItem("TLS_DHE_DSS_WITH_AES_128_CBC_SHA" , 50);
            staticList_.addItem("TLS_DHE_RSA_WITH_AES_128_CBC_SHA" , 51);
            staticList_.addItem("TLS_DH_anon_WITH_AES_128_CBC_SHA" , 52);
            staticList_.addItem("TLS_RSA_WITH_AES_256_CBC_SHA" , 53);
            staticList_.addItem("TLS_DH_DSS_WITH_AES_256_CBC_SHA" , 54);
            staticList_.addItem("TLS_DH_RSA_WITH_AES_256_CBC_SHA" , 55);
            staticList_.addItem("TLS_DHE_DSS_WITH_AES_256_CBC_SHA" , 56);
            staticList_.addItem("TLS_DHE_RSA_WITH_AES_256_CBC_SHA" , 57);
            staticList_.addItem("TLS_DH_anon_WITH_AES_256_CBC_SHA" , 58);
            staticList_.addItem("TLS_RSA_WITH_NULL_SHA256" , 59);
            staticList_.addItem("TLS_RSA_WITH_AES_128_CBC_SHA256" , 60);
            staticList_.addItem("TLS_RSA_WITH_AES_256_CBC_SHA256" , 61);
            staticList_.addItem("TLS_DH_DSS_WITH_AES_128_CBC_SHA256" , 62);
            staticList_.addItem("TLS_DH_RSA_WITH_AES_128_CBC_SHA256" , 63);
            staticList_.addItem("TLS_DHE_DSS_WITH_AES_128_CBC_SHA256" , 64);
            staticList_.addItem("TLS_RSA_WITH_CAMELLIA_128_CBC_SHA" , 65);
            staticList_.addItem("TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA" , 66);
            staticList_.addItem("TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA" , 67);
            staticList_.addItem("TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA" , 68);
            staticList_.addItem("TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA" , 69);
            staticList_.addItem("TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA" , 70);
            staticList_.addItem("TLS_DHE_RSA_WITH_AES_128_CBC_SHA256" , 103);
            staticList_.addItem("TLS_DH_DSS_WITH_AES_256_CBC_SHA256" , 104);
            staticList_.addItem("TLS_DH_RSA_WITH_AES_256_CBC_SHA256" , 105);
            staticList_.addItem("TLS_DHE_DSS_WITH_AES_256_CBC_SHA256" , 106);
            staticList_.addItem("TLS_DHE_RSA_WITH_AES_256_CBC_SHA256" , 107);
            staticList_.addItem("TLS_DH_anon_WITH_AES_128_CBC_SHA256" , 108);
            staticList_.addItem("TLS_DH_anon_WITH_AES_256_CBC_SHA256" , 109);
            staticList_.addItem("TLS_RSA_WITH_CAMELLIA_256_CBC_SHA" , 132);
            staticList_.addItem("TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA" , 133);
            staticList_.addItem("TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA" , 134);
            staticList_.addItem("TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA" , 135);
            staticList_.addItem("TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA" , 136);
            staticList_.addItem("TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA" , 137);
            staticList_.addItem("TLS_PSK_WITH_RC4_128_SHA" , 138);
            staticList_.addItem("TLS_PSK_WITH_3DES_EDE_CBC_SHA" , 139);
            staticList_.addItem("TLS_PSK_WITH_AES_128_CBC_SHA" , 140);
            staticList_.addItem("TLS_PSK_WITH_AES_256_CBC_SHA" , 141);
            staticList_.addItem("TLS_DHE_PSK_WITH_RC4_128_SHA" , 142);
            staticList_.addItem("TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA" , 143);
            staticList_.addItem("TLS_DHE_PSK_WITH_AES_128_CBC_SHA" , 144);
            staticList_.addItem("TLS_DHE_PSK_WITH_AES_256_CBC_SHA" , 145);
            staticList_.addItem("TLS_RSA_PSK_WITH_RC4_128_SHA" , 146);
            staticList_.addItem("TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA" , 147);
            staticList_.addItem("TLS_RSA_PSK_WITH_AES_128_CBC_SHA" , 148);
            staticList_.addItem("TLS_RSA_PSK_WITH_AES_256_CBC_SHA" , 149);
            staticList_.addItem("TLS_RSA_WITH_SEED_CBC_SHA" , 150);
            staticList_.addItem("TLS_DH_DSS_WITH_SEED_CBC_SHA" , 151);
            staticList_.addItem("TLS_DH_RSA_WITH_SEED_CBC_SHA" , 152);
            staticList_.addItem("TLS_DHE_DSS_WITH_SEED_CBC_SHA" , 153);
            staticList_.addItem("TLS_DHE_RSA_WITH_SEED_CBC_SHA" , 154);
            staticList_.addItem("TLS_DH_anon_WITH_SEED_CBC_SHA" , 155);
            staticList_.addItem("TLS_RSA_WITH_AES_128_GCM_SHA256" , 156);
            staticList_.addItem("TLS_RSA_WITH_AES_256_GCM_SHA384" , 157);
            staticList_.addItem("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256" , 158);
            staticList_.addItem("TLS_DHE_RSA_WITH_AES_256_GCM_SHA384" , 159);
            staticList_.addItem("TLS_DH_RSA_WITH_AES_128_GCM_SHA256" , 160);
            staticList_.addItem("TLS_DH_RSA_WITH_AES_256_GCM_SHA384" , 161);
            staticList_.addItem("TLS_DHE_DSS_WITH_AES_128_GCM_SHA256" , 162);
            staticList_.addItem("TLS_DHE_DSS_WITH_AES_256_GCM_SHA384" , 163);
            staticList_.addItem("TLS_DH_DSS_WITH_AES_128_GCM_SHA256" , 164);
            staticList_.addItem("TLS_DH_DSS_WITH_AES_256_GCM_SHA384" , 165);
            staticList_.addItem("TLS_DH_anon_WITH_AES_128_GCM_SHA256" , 166);
            staticList_.addItem("TLS_DH_anon_WITH_AES_256_GCM_SHA384" , 167);
            staticList_.addItem("TLS_PSK_WITH_AES_128_GCM_SHA256" , 168);
            staticList_.addItem("TLS_PSK_WITH_AES_256_GCM_SHA384" , 169);
            staticList_.addItem("TLS_DHE_PSK_WITH_AES_128_GCM_SHA256" , 170);
            staticList_.addItem("TLS_DHE_PSK_WITH_AES_256_GCM_SHA384" , 171);
            staticList_.addItem("TLS_RSA_PSK_WITH_AES_128_GCM_SHA256" , 172);
            staticList_.addItem("TLS_RSA_PSK_WITH_AES_256_GCM_SHA384" , 173);
            staticList_.addItem("TLS_PSK_WITH_AES_128_CBC_SHA256" , 174);
            staticList_.addItem("TLS_PSK_WITH_AES_256_CBC_SHA384" , 175);
            staticList_.addItem("TLS_PSK_WITH_NULL_SHA256" , 176);
            staticList_.addItem("TLS_PSK_WITH_NULL_SHA384" , 177);
            staticList_.addItem("TLS_DHE_PSK_WITH_AES_128_CBC_SHA256" , 178);
            staticList_.addItem("TLS_DHE_PSK_WITH_AES_256_CBC_SHA384" , 179);
            staticList_.addItem("TLS_DHE_PSK_WITH_NULL_SHA256" , 180);
            staticList_.addItem("TLS_DHE_PSK_WITH_NULL_SHA384" , 181);
            staticList_.addItem("TLS_RSA_PSK_WITH_AES_128_CBC_SHA256" , 182);
            staticList_.addItem("TLS_RSA_PSK_WITH_AES_256_CBC_SHA384" , 183);
            staticList_.addItem("TLS_RSA_PSK_WITH_NULL_SHA256" , 184);
            staticList_.addItem("TLS_RSA_PSK_WITH_NULL_SHA384" , 185);
            staticList_.addItem("TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256" , 186);
            staticList_.addItem("TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256" , 187);
            staticList_.addItem("TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256" , 188);
            staticList_.addItem("TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256" , 189);
            staticList_.addItem("TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256" , 190);
            staticList_.addItem("TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256" , 191);
            staticList_.addItem("TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256" , 192);
            staticList_.addItem("TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256" , 193);
            staticList_.addItem("TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256" , 194);
            staticList_.addItem("TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256" , 195);
            staticList_.addItem("TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256" , 196);
            staticList_.addItem("TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256" , 197);
            staticList_.addItem("TLS_EMPTY_RENEGOTIATION_INFO_SCSV" , 255);
            staticList_.addItem("TLS_FALLBACK_SCSV" , 22016);
            staticList_.addItem("TLS_ECDH_ECDSA_WITH_NULL_SHA" , 49153);
            staticList_.addItem("TLS_ECDH_ECDSA_WITH_RC4_128_SHA" , 49154);
            staticList_.addItem("TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA" , 49155);
            staticList_.addItem("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA" , 49156);
            staticList_.addItem("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA" , 49157);
            staticList_.addItem("TLS_ECDHE_ECDSA_WITH_NULL_SHA" , 49158);
            staticList_.addItem("TLS_ECDHE_ECDSA_WITH_RC4_128_SHA" , 49159);
            staticList_.addItem("TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA" , 49160);
            staticList_.addItem("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA" , 49161);
            staticList_.addItem("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA" , 49162);
            staticList_.addItem("TLS_ECDH_RSA_WITH_NULL_SHA" , 49163);
            staticList_.addItem("TLS_ECDH_RSA_WITH_RC4_128_SHA" , 49164);
            staticList_.addItem("TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA" , 49165);
            staticList_.addItem("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA" , 49166);
            staticList_.addItem("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA" , 49167);
            staticList_.addItem("TLS_ECDHE_RSA_WITH_NULL_SHA" , 49168);
            staticList_.addItem("TLS_ECDHE_RSA_WITH_RC4_128_SHA" , 49169);
            staticList_.addItem("TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA" , 49170);
            staticList_.addItem("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA" , 49171);
            staticList_.addItem("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA" , 49172);
            staticList_.addItem("TLS_ECDH_anon_WITH_NULL_SHA" , 49173);
            staticList_.addItem("TLS_ECDH_anon_WITH_RC4_128_SHA" , 49174);
            staticList_.addItem("TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA" , 49175);
            staticList_.addItem("TLS_ECDH_anon_WITH_AES_128_CBC_SHA" , 49176);
            staticList_.addItem("TLS_ECDH_anon_WITH_AES_256_CBC_SHA" , 49177);
            staticList_.addItem("TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA" , 49178);
            staticList_.addItem("TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA" , 49179);
            staticList_.addItem("TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA" , 49180);
            staticList_.addItem("TLS_SRP_SHA_WITH_AES_128_CBC_SHA" , 49181);
            staticList_.addItem("TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA" , 49182);
            staticList_.addItem("TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA" , 49183);
            staticList_.addItem("TLS_SRP_SHA_WITH_AES_256_CBC_SHA" , 49184);
            staticList_.addItem("TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA" , 49185);
            staticList_.addItem("TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA" , 49186);
            staticList_.addItem("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256" , 49187);
            staticList_.addItem("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384" , 49188);
            staticList_.addItem("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256" , 49189);
            staticList_.addItem("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384" , 49190);
            staticList_.addItem("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256" , 49191);
            staticList_.addItem("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384" , 49192);
            staticList_.addItem("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256" , 49193);
            staticList_.addItem("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384" , 49194);
            staticList_.addItem("TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256" , 49195);
            staticList_.addItem("TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384" , 49196);
            staticList_.addItem("TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256" , 49197);
            staticList_.addItem("TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384" , 49198);
            staticList_.addItem("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256" , 49199);
            staticList_.addItem("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384" , 49200);
            staticList_.addItem("TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256" , 49201);
            staticList_.addItem("TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384" , 49202);
            staticList_.addItem("TLS_ECDHE_PSK_WITH_RC4_128_SHA" , 49203);
            staticList_.addItem("TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA" , 49204);
            staticList_.addItem("TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA" , 49205);
            staticList_.addItem("TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA" , 49206);
            staticList_.addItem("TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256" , 49207);
            staticList_.addItem("TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384" , 49208);
            staticList_.addItem("TLS_ECDHE_PSK_WITH_NULL_SHA" , 49209);
            staticList_.addItem("TLS_ECDHE_PSK_WITH_NULL_SHA256" , 49210);
            staticList_.addItem("TLS_ECDHE_PSK_WITH_NULL_SHA384" , 49211);
            staticList_.addItem("TLS_RSA_WITH_ARIA_128_CBC_SHA256" , 49212);
            staticList_.addItem("TLS_RSA_WITH_ARIA_256_CBC_SHA384" , 49213);
            staticList_.addItem("TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256" , 49214);
            staticList_.addItem("TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384" , 49215);
            staticList_.addItem("TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256" , 49216);
            staticList_.addItem("TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384" , 49217);
            staticList_.addItem("TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256" , 49218);
            staticList_.addItem("TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384" , 49219);
            staticList_.addItem("TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256" , 49220);
            staticList_.addItem("TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384" , 49221);
            staticList_.addItem("TLS_DH_anon_WITH_ARIA_128_CBC_SHA256" , 49222);
            staticList_.addItem("TLS_DH_anon_WITH_ARIA_256_CBC_SHA384" , 49223);
            staticList_.addItem("TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256" , 49224);
            staticList_.addItem("TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384" , 49225);
            staticList_.addItem("TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256" , 49226);
            staticList_.addItem("TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384" , 49227);
            staticList_.addItem("TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256" , 49228);
            staticList_.addItem("TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384" , 49229);
            staticList_.addItem("TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256" , 49230);
            staticList_.addItem("TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384" , 49231);
            staticList_.addItem("TLS_RSA_WITH_ARIA_128_GCM_SHA256" , 49232);
            staticList_.addItem("TLS_RSA_WITH_ARIA_256_GCM_SHA384" , 49233);
            staticList_.addItem("TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256" , 49234);
            staticList_.addItem("TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384" , 49235);
            staticList_.addItem("TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256" , 49236);
            staticList_.addItem("TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384" , 49237);
            staticList_.addItem("TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256" , 49238);
            staticList_.addItem("TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384" , 49239);
            staticList_.addItem("TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256" , 49240);
            staticList_.addItem("TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384" , 49241);
            staticList_.addItem("TLS_DH_anon_WITH_ARIA_128_GCM_SHA256" , 49242);
            staticList_.addItem("TLS_DH_anon_WITH_ARIA_256_GCM_SHA384" , 49243);
            staticList_.addItem("TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256" , 49244);
            staticList_.addItem("TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384" , 49245);
            staticList_.addItem("TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256" , 49246);
            staticList_.addItem("TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384" , 49247);
            staticList_.addItem("TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256" , 49248);
            staticList_.addItem("TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384" , 49249);
            staticList_.addItem("TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256" , 49250);
            staticList_.addItem("TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384" , 49251);
            staticList_.addItem("TLS_PSK_WITH_ARIA_128_CBC_SHA256" , 49252);
            staticList_.addItem("TLS_PSK_WITH_ARIA_256_CBC_SHA384" , 49253);
            staticList_.addItem("TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256" , 49254);
            staticList_.addItem("TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384" , 49255);
            staticList_.addItem("TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256" , 49256);
            staticList_.addItem("TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384" , 49257);
            staticList_.addItem("TLS_PSK_WITH_ARIA_128_GCM_SHA256" , 49258);
            staticList_.addItem("TLS_PSK_WITH_ARIA_256_GCM_SHA384" , 49259);
            staticList_.addItem("TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256" , 49260);
            staticList_.addItem("TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384" , 49261);
            staticList_.addItem("TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256" , 49262);
            staticList_.addItem("TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384" , 49263);
            staticList_.addItem("TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256" , 49264);
            staticList_.addItem("TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384" , 49265);
            staticList_.addItem("TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256", 49266);
            staticList_.addItem("TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384", 49267);
            staticList_.addItem("TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256" , 49268);
            staticList_.addItem("TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384" , 49269);
            staticList_.addItem("TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256" , 49270);
            staticList_.addItem("TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384" , 49271);
            staticList_.addItem("TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256" , 49272);
            staticList_.addItem("TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384" , 49273);
            staticList_.addItem("TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256" , 49274);
            staticList_.addItem("TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384" , 49275);
            staticList_.addItem("TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256" , 49276);
            staticList_.addItem("TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384" , 49277);
            staticList_.addItem("TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256" , 49278);
            staticList_.addItem("TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384" , 49279);
            staticList_.addItem("TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256" , 49280);
            staticList_.addItem("TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384" , 49281);
            staticList_.addItem("TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256" , 49282);
            staticList_.addItem("TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384" , 49283);
            staticList_.addItem("TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256" , 49284);
            staticList_.addItem("TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384" , 49285);
            staticList_.addItem("TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256", 49286);
            staticList_.addItem("TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384", 49287);
            staticList_.addItem("TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256" , 49288);
            staticList_.addItem("TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384" , 49289);
            staticList_.addItem("TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256" , 49290);
            staticList_.addItem("TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384" , 49291);
            staticList_.addItem("TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256" , 49292);
            staticList_.addItem("TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384" , 49293);
            staticList_.addItem("TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256" , 49294);
            staticList_.addItem("TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384" , 49295);
            staticList_.addItem("TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256" , 49296);
            staticList_.addItem("TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384" , 49297);
            staticList_.addItem("TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256" , 49298);
            staticList_.addItem("TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384" , 49299);
            staticList_.addItem("TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256" , 49300);
            staticList_.addItem("TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384" , 49301);
            staticList_.addItem("TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256" , 49302);
            staticList_.addItem("TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384" , 49303);
            staticList_.addItem("TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256" , 49304);
            staticList_.addItem("TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384" , 49305);
            staticList_.addItem("TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256" , 49306);
            staticList_.addItem("TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384" , 49307);
            staticList_.addItem("TLS_RSA_WITH_AES_128_CCM" , 49308);
            staticList_.addItem("TLS_RSA_WITH_AES_256_CCM" , 49309);
            staticList_.addItem("TLS_DHE_RSA_WITH_AES_128_CCM" , 49310);
            staticList_.addItem("TLS_DHE_RSA_WITH_AES_256_CCM" , 49311);
            staticList_.addItem("TLS_RSA_WITH_AES_128_CCM_8" , 49312);
            staticList_.addItem("TLS_RSA_WITH_AES_256_CCM_8" , 49313);
            staticList_.addItem("TLS_DHE_RSA_WITH_AES_128_CCM_8" , 49314);
            staticList_.addItem("TLS_DHE_RSA_WITH_AES_256_CCM_8" , 49315);
            staticList_.addItem("TLS_PSK_WITH_AES_128_CCM" , 49316);
            staticList_.addItem("TLS_PSK_WITH_AES_256_CCM" , 49317);
            staticList_.addItem("TLS_DHE_PSK_WITH_AES_128_CCM" , 49318);
            staticList_.addItem("TLS_DHE_PSK_WITH_AES_256_CCM" , 49319);
            staticList_.addItem("TLS_PSK_WITH_AES_128_CCM_8" , 49320);
            staticList_.addItem("TLS_PSK_WITH_AES_256_CCM_8" , 49321);
            staticList_.addItem("TLS_PSK_DHE_WITH_AES_128_CCM_8" , 49322);
            staticList_.addItem("TLS_PSK_DHE_WITH_AES_256_CCM_8" , 49323);
            staticList_.addItem("TLS_ECDHE_ECDSA_WITH_AES_128_CCM" , 49324);
            staticList_.addItem("TLS_ECDHE_ECDSA_WITH_AES_256_CCM" , 49325);
            staticList_.addItem("TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8" , 49326);
            staticList_.addItem("TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8" , 49327);
            staticList_.addFallbackItem("unknown");
        }
    }



    TEnum_CipherSuite* newInstance_() const {

        TEnum_CipherSuite* du = new TEnum_CipherSuite();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_CipherSuite::staticList_;





class TStruct_ClientHello_cipher_suites : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 245, "ClientHello_cipher_suites");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ClientHello_cipher_suites() : CompositeDataUnit() {

        this->setName("ClientHello_cipher_suites");
    }



    TStruct_ClientHello_cipher_suites* newInstance_() const {

        TStruct_ClientHello_cipher_suites* du = new TStruct_ClientHello_cipher_suites();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TEnum_CipherSuite* _M1_V = new TEnum_CipherSuite();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_DTLSClientHello_cipher_suites : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 246, "DTLSClientHello_cipher_suites");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_DTLSClientHello_cipher_suites() : CompositeDataUnit() {

        this->setName("DTLSClientHello_cipher_suites");
    }



    TStruct_DTLSClientHello_cipher_suites* newInstance_() const {

        TStruct_DTLSClientHello_cipher_suites* du = new TStruct_DTLSClientHello_cipher_suites();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TEnum_CipherSuite* _M1_V = new TEnum_CipherSuite();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_Signature_signature : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 247, "Signature_signature");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_Signature_signature() : CompositeDataUnit() {

        this->setName("Signature_signature");
    }



    TStruct_Signature_signature* newInstance_() const {

        TStruct_Signature_signature* du = new TStruct_Signature_signature();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            OpaqueField* _M1 = new OpaqueField(BC(_value__N, 0));
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TEnum_ASN1SequenceOfIntegers_tag : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 248, "ASN1SequenceOfIntegers_tag");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_ASN1SequenceOfIntegers_tag() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("ASN1SequenceOfIntegers_tag");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("sequence", 48);
        }
    }



    TEnum_ASN1SequenceOfIntegers_tag* newInstance_() const {

        TEnum_ASN1SequenceOfIntegers_tag* du = new TEnum_ASN1SequenceOfIntegers_tag();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_ASN1SequenceOfIntegers_tag::staticList_;





class TEnum_ASN1Integer_tag : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 249, "ASN1Integer_tag");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_ASN1Integer_tag() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("ASN1Integer_tag");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("integer", 2);
        }
    }



    TEnum_ASN1Integer_tag* newInstance_() const {

        TEnum_ASN1Integer_tag* du = new TEnum_ASN1Integer_tag();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_ASN1Integer_tag::staticList_;





class TStruct_ASN1Integer_int : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 250, "ASN1Integer_int");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ASN1Integer_int() : CompositeDataUnit() {

        this->setName("ASN1Integer_int");
    }



    TStruct_ASN1Integer_int* newInstance_() const {

        TStruct_ASN1Integer_int* du = new TStruct_ASN1Integer_int();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            OpaqueField* _M1 = new OpaqueField(BC(_value__N, 0));
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_ASN1Integer : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 251, "ASN1Integer");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ASN1Integer() : CompositeDataUnit() {

        this->setName("ASN1Integer");
    }



    TStruct_ASN1Integer* newInstance_() const {

        TStruct_ASN1Integer* du = new TStruct_ASN1Integer();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_ASN1Integer_tag* _M0 = new TEnum_ASN1Integer_tag();
            this->appendChildRenamed(_M0, "tag");

            TStruct_ASN1Integer_int* _M1 = new TStruct_ASN1Integer_int();
            this->appendChildRenamed(_M1, "int");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_ASN1SequenceOfIntegers_ints : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 252, "ASN1SequenceOfIntegers_ints");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ASN1SequenceOfIntegers_ints() : CompositeDataUnit() {

        this->setName("ASN1SequenceOfIntegers_ints");
    }



    TStruct_ASN1SequenceOfIntegers_ints* newInstance_() const {

        TStruct_ASN1SequenceOfIntegers_ints* du = new TStruct_ASN1SequenceOfIntegers_ints();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TStruct_ASN1Integer* _M1_V = new TStruct_ASN1Integer();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_ASN1SequenceOfIntegers : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 253, "ASN1SequenceOfIntegers");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ASN1SequenceOfIntegers() : CompositeDataUnit() {

        this->setName("ASN1SequenceOfIntegers");
    }



    TStruct_ASN1SequenceOfIntegers* newInstance_() const {

        TStruct_ASN1SequenceOfIntegers* du = new TStruct_ASN1SequenceOfIntegers();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_ASN1SequenceOfIntegers_tag* _M0 = new TEnum_ASN1SequenceOfIntegers_tag();
            this->appendChildRenamed(_M0, "tag");

            TStruct_ASN1SequenceOfIntegers_ints* _M1 = new TStruct_ASN1SequenceOfIntegers_ints();
            this->appendChildRenamed(_M1, "ints");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_ECDSASignature : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 254, "ECDSASignature");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ECDSASignature() : CompositeDataUnit() {

        this->setName("ECDSASignature");
    }



    TStruct_ECDSASignature* newInstance_() const {

        TStruct_ECDSASignature* du = new TStruct_ECDSASignature();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_ASN1SequenceOfIntegers* _M0 = new TStruct_ASN1SequenceOfIntegers();
            this->appendChildRenamed(_M0, "rs");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_ClientKeyExchange : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 255, "ClientKeyExchange");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ClientKeyExchange() : CompositeDataUnit() {

        this->setName("ClientKeyExchange");
    }



    TStruct_ClientKeyExchange* newInstance_() const {

        TStruct_ClientKeyExchange* du = new TStruct_ClientKeyExchange();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "length");

        } else if (len == 1 && decoded >= 1) {


            int _value_length = (*this)[0]->propGet<int>(".value");
            OpaqueField* _M1 = new OpaqueField(BC(_value_length, 0));
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "content");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_ECParameters_explicit_prime_prime_p : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 256, "ECParameters_explicit_prime_prime_p");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ECParameters_explicit_prime_prime_p() : CompositeDataUnit() {

        this->setName("ECParameters_explicit_prime_prime_p");
    }



    TStruct_ECParameters_explicit_prime_prime_p* newInstance_() const {

        TStruct_ECParameters_explicit_prime_prime_p* du = new TStruct_ECParameters_explicit_prime_prime_p();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            OpaqueField* _M1 = new OpaqueField(BC(_value__N, 0));
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_ECParameters_explicit_prime_order : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 257, "ECParameters_explicit_prime_order");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ECParameters_explicit_prime_order() : CompositeDataUnit() {

        this->setName("ECParameters_explicit_prime_order");
    }



    TStruct_ECParameters_explicit_prime_order* newInstance_() const {

        TStruct_ECParameters_explicit_prime_order* du = new TStruct_ECParameters_explicit_prime_order();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            OpaqueField* _M1 = new OpaqueField(BC(_value__N, 0));
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_ECParameters_explicit_prime_cofactor : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 258, "ECParameters_explicit_prime_cofactor");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ECParameters_explicit_prime_cofactor() : CompositeDataUnit() {

        this->setName("ECParameters_explicit_prime_cofactor");
    }



    TStruct_ECParameters_explicit_prime_cofactor* newInstance_() const {

        TStruct_ECParameters_explicit_prime_cofactor* du = new TStruct_ECParameters_explicit_prime_cofactor();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            OpaqueField* _M1 = new OpaqueField(BC(_value__N, 0));
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_ECCurve_a : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 259, "ECCurve_a");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ECCurve_a() : CompositeDataUnit() {

        this->setName("ECCurve_a");
    }



    TStruct_ECCurve_a* newInstance_() const {

        TStruct_ECCurve_a* du = new TStruct_ECCurve_a();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            OpaqueField* _M1 = new OpaqueField(BC(_value__N, 0));
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_ECCurve_b : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 260, "ECCurve_b");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ECCurve_b() : CompositeDataUnit() {

        this->setName("ECCurve_b");
    }



    TStruct_ECCurve_b* newInstance_() const {

        TStruct_ECCurve_b* du = new TStruct_ECCurve_b();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            OpaqueField* _M1 = new OpaqueField(BC(_value__N, 0));
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_ECCurve : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 261, "ECCurve");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ECCurve() : CompositeDataUnit() {

        this->setName("ECCurve");
    }



    TStruct_ECCurve* newInstance_() const {

        TStruct_ECCurve* du = new TStruct_ECCurve();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_ECCurve_a* _M0 = new TStruct_ECCurve_a();
            this->appendChildRenamed(_M0, "a");

            TStruct_ECCurve_b* _M1 = new TStruct_ECCurve_b();
            this->appendChildRenamed(_M1, "b");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TEnum_ECCurveType : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 262, "ECCurveType");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_ECCurveType() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("ECCurveType");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("explicit_prime", 1);
            staticList_.addItem("explicit_char2", 2);
            staticList_.addItem("named_curve" , 3);
            staticList_.addFallbackItem("unknown");
        }
    }



    TEnum_ECCurveType* newInstance_() const {

        TEnum_ECCurveType* du = new TEnum_ECCurveType();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_ECCurveType::staticList_;





class TStruct_ECPoint_point : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 263, "ECPoint_point");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ECPoint_point() : CompositeDataUnit() {

        this->setName("ECPoint_point");
    }



    TStruct_ECPoint_point* newInstance_() const {

        TStruct_ECPoint_point* du = new TStruct_ECPoint_point();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            OpaqueField* _M1 = new OpaqueField(BC(_value__N, 0));
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_ECPoint : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 264, "ECPoint");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ECPoint() : CompositeDataUnit() {

        this->setName("ECPoint");
    }



    TStruct_ECPoint* newInstance_() const {

        TStruct_ECPoint* du = new TStruct_ECPoint();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_ECPoint_point* _M0 = new TStruct_ECPoint_point();
            this->appendChildRenamed(_M0, "point");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_ECParameters_explicit_prime : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 265, "ECParameters_explicit_prime");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ECParameters_explicit_prime() : CompositeDataUnit() {

        this->setName("ECParameters_explicit_prime");
    }



    TStruct_ECParameters_explicit_prime* newInstance_() const {

        TStruct_ECParameters_explicit_prime* du = new TStruct_ECParameters_explicit_prime();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_ECParameters_explicit_prime_prime_p* _M0 = new TStruct_ECParameters_explicit_prime_prime_p();
            this->appendChildRenamed(_M0, "prime_p");

            TStruct_ECCurve* _M1 = new TStruct_ECCurve();
            this->appendChildRenamed(_M1, "curve");

            TStruct_ECPoint* _M2 = new TStruct_ECPoint();
            this->appendChildRenamed(_M2, "base");

            TStruct_ECParameters_explicit_prime_order* _M3 = new TStruct_ECParameters_explicit_prime_order();
            this->appendChildRenamed(_M3, "order");

            TStruct_ECParameters_explicit_prime_cofactor* _M4 = new TStruct_ECParameters_explicit_prime_cofactor();
            this->appendChildRenamed(_M4, "cofactor");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TEnum_NameType : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 266, "NameType");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_NameType() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("NameType");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("host_name", 0);
            staticList_.addFallbackItem("unknown");
        }
    }



    TEnum_NameType* newInstance_() const {

        TEnum_NameType* du = new TEnum_NameType();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_NameType::staticList_;





class TStruct_HostName : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 267, "HostName");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_HostName() : CompositeDataUnit() {

        this->setName("HostName");
    }



    TStruct_HostName* newInstance_() const {

        TStruct_HostName* du = new TStruct_HostName();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            OpaqueField* _M1 = new OpaqueField(BC(_value__N, 0));
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_ServerName : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 268, "ServerName");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ServerName() : CompositeDataUnit() {

        this->setName("ServerName");
    }



    TStruct_ServerName* newInstance_() const {

        TStruct_ServerName* du = new TStruct_ServerName();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_NameType* _M0 = new TEnum_NameType();
            this->appendChildRenamed(_M0, "name_type");

        } else if (len == 1 && decoded >= 1) {

            int _value_name_type = (*this)[0]->propGet<int>(".value");
            if (_value_name_type == 0) {

                TStruct_HostName* _C_M0 = new TStruct_HostName();
                this->appendChildRenamed(_C_M0, "hostName");
            } else {

            OpaqueField* _C_M0 = new OpaqueField(BC(-1, 0));
            this->appendChildRenamed(_C_M0, "_M0");}
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

        }
        return ok;
    }
};






class TStruct_ServerNameList_server_name_list : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 269, "ServerNameList_server_name_list");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ServerNameList_server_name_list() : CompositeDataUnit() {

        this->setName("ServerNameList_server_name_list");
    }



    TStruct_ServerNameList_server_name_list* newInstance_() const {

        TStruct_ServerNameList_server_name_list* du = new TStruct_ServerNameList_server_name_list();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TStruct_ServerName* _M1_V = new TStruct_ServerName();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_ServerNameList : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 270, "ServerNameList");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ServerNameList() : CompositeDataUnit() {

        this->setName("ServerNameList");
    }



    TStruct_ServerNameList* newInstance_() const {

        TStruct_ServerNameList* du = new TStruct_ServerNameList();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_ServerNameList_server_name_list* _M0 = new TStruct_ServerNameList_server_name_list();
            this->appendChildRenamed(_M0, "server_name_list");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TEnum_MaxFragmentLength : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 271, "MaxFragmentLength");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_MaxFragmentLength() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("MaxFragmentLength");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("max256" , 1);
            staticList_.addItem("max512" , 2);
            staticList_.addItem("max2048", 3);
            staticList_.addItem("max4096", 4);
            staticList_.addFallbackItem("unknown");
        }
    }



    TEnum_MaxFragmentLength* newInstance_() const {

        TEnum_MaxFragmentLength* du = new TEnum_MaxFragmentLength();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_MaxFragmentLength::staticList_;





class TStruct_MaxFragmentLengthExtension : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 272, "MaxFragmentLengthExtension");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_MaxFragmentLengthExtension() : CompositeDataUnit() {

        this->setName("MaxFragmentLengthExtension");
    }



    TStruct_MaxFragmentLengthExtension* newInstance_() const {

        TStruct_MaxFragmentLengthExtension* du = new TStruct_MaxFragmentLengthExtension();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_MaxFragmentLength* _M0 = new TEnum_MaxFragmentLength();
            this->appendChildRenamed(_M0, "maxFragment");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TEnum_CertChainType : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 273, "CertChainType");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_CertChainType() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("CertChainType");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("individual_certs", 0);
            staticList_.addItem("pkipath" , 1);
        }
    }



    TEnum_CertChainType* newInstance_() const {

        TEnum_CertChainType* du = new TEnum_CertChainType();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_CertChainType::staticList_;





class TEnum_URLAndHashPadding : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 274, "URLAndHashPadding");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_URLAndHashPadding() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("URLAndHashPadding");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("one", 1);
        }
    }



    TEnum_URLAndHashPadding* newInstance_() const {

        TEnum_URLAndHashPadding* du = new TEnum_URLAndHashPadding();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_URLAndHashPadding::staticList_;





class TStruct_URLAndHash_url : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 275, "URLAndHash_url");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_URLAndHash_url() : CompositeDataUnit() {

        this->setName("URLAndHash_url");
    }



    TStruct_URLAndHash_url* newInstance_() const {

        TStruct_URLAndHash_url* du = new TStruct_URLAndHash_url();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            OpaqueField* _M1 = new OpaqueField(BC(_value__N, 0));
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_URLAndHash : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 276, "URLAndHash");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_URLAndHash() : CompositeDataUnit() {

        this->setName("URLAndHash");
    }



    TStruct_URLAndHash* newInstance_() const {

        TStruct_URLAndHash* du = new TStruct_URLAndHash();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_URLAndHash_url* _M0 = new TStruct_URLAndHash_url();
            this->appendChildRenamed(_M0, "url");

            TEnum_URLAndHashPadding* _M1 = new TEnum_URLAndHashPadding();
            this->appendChildRenamed(_M1, "padding");

            OpaqueField* _M2 = new OpaqueField(BC(20, 0));
            this->appendChildRenamed(_M2, "SHA1Hash");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_CertificateURL_url_and_hash_list : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 277, "CertificateURL_url_and_hash_list");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_CertificateURL_url_and_hash_list() : CompositeDataUnit() {

        this->setName("CertificateURL_url_and_hash_list");
    }



    TStruct_CertificateURL_url_and_hash_list* newInstance_() const {

        TStruct_CertificateURL_url_and_hash_list* du = new TStruct_CertificateURL_url_and_hash_list();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TStruct_URLAndHash* _M1_V = new TStruct_URLAndHash();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_CertificateURL : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 278, "CertificateURL");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_CertificateURL() : CompositeDataUnit() {

        this->setName("CertificateURL");
    }



    TStruct_CertificateURL* newInstance_() const {

        TStruct_CertificateURL* du = new TStruct_CertificateURL();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_CertChainType* _M0 = new TEnum_CertChainType();
            this->appendChildRenamed(_M0, "type");

            TStruct_CertificateURL_url_and_hash_list* _M1 = new TStruct_CertificateURL_url_and_hash_list();
            this->appendChildRenamed(_M1, "url_and_hash_list");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TEnum_IdentifierType : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 279, "IdentifierType");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_IdentifierType() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("IdentifierType");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("pre_agreed" , 0);
            staticList_.addItem("key_sha1_hash" , 1);
            staticList_.addItem("x509_name" , 2);
            staticList_.addItem("cert_sha1_hash", 3);
            staticList_.addFallbackItem("unknown");
        }
    }



    TEnum_IdentifierType* newInstance_() const {

        TEnum_IdentifierType* du = new TEnum_IdentifierType();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_IdentifierType::staticList_;





class TStruct_DistinguishedName : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 280, "DistinguishedName");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_DistinguishedName() : CompositeDataUnit() {

        this->setName("DistinguishedName");
    }



    TStruct_DistinguishedName* newInstance_() const {

        TStruct_DistinguishedName* du = new TStruct_DistinguishedName();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            OpaqueField* _M1 = new OpaqueField(BC(_value__N, 0));
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_TrustedAuthority_identifier__C0__M0 : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 281, "TrustedAuthority_identifier__C0__M0");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_TrustedAuthority_identifier__C0__M0() : CompositeDataUnit() {

        this->setName("TrustedAuthority_identifier__C0__M0");
        this->setExpanded();
    }



    TStruct_TrustedAuthority_identifier__C0__M0* newInstance_() const {

        TStruct_TrustedAuthority_identifier__C0__M0* du = new TStruct_TrustedAuthority_identifier__C0__M0();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {

            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_TrustedAuthority : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 282, "TrustedAuthority");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_TrustedAuthority() : CompositeDataUnit() {

        this->setName("TrustedAuthority");
    }



    TStruct_TrustedAuthority* newInstance_() const {

        TStruct_TrustedAuthority* du = new TStruct_TrustedAuthority();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_IdentifierType* _M0 = new TEnum_IdentifierType();
            this->appendChildRenamed(_M0, "identifier_type");

        } else if (len == 1 && decoded >= 1) {

            int _value_identifier_type = (*this)[0]->propGet<int>(".value");
            if (_value_identifier_type == 0) {

                TStruct_TrustedAuthority_identifier__C0__M0* _C_M0 = new TStruct_TrustedAuthority_identifier__C0__M0();
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_identifier_type == 1) {

                OpaqueField* _C_M0 = new OpaqueField(BC(20, 0));
                this->appendChildRenamed(_C_M0, "keySHA1Hash");
            } else if (_value_identifier_type == 2) {

                TStruct_DistinguishedName* _C_M0 = new TStruct_DistinguishedName();
                this->appendChildRenamed(_C_M0, "x509Name");
            } else if (_value_identifier_type == 3) {

                OpaqueField* _C_M0 = new OpaqueField(BC(20, 0));
                this->appendChildRenamed(_C_M0, "certSHA1Hash");
            } else {

            OpaqueField* _C_M0 = new OpaqueField(BC(-1, 0));
            this->appendChildRenamed(_C_M0, "_M0");}
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

        }
        return ok;
    }
};






class TStruct_TrustedAuthorities_trusted_authorities_list : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 283, "TrustedAuthorities_trusted_authorities_list");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_TrustedAuthorities_trusted_authorities_list() : CompositeDataUnit() {

        this->setName("TrustedAuthorities_trusted_authorities_list");
    }



    TStruct_TrustedAuthorities_trusted_authorities_list* newInstance_() const {

        TStruct_TrustedAuthorities_trusted_authorities_list* du = new TStruct_TrustedAuthorities_trusted_authorities_list();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TStruct_TrustedAuthority* _M1_V = new TStruct_TrustedAuthority();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_TrustedAuthorities : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 284, "TrustedAuthorities");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_TrustedAuthorities() : CompositeDataUnit() {

        this->setName("TrustedAuthorities");
    }



    TStruct_TrustedAuthorities* newInstance_() const {

        TStruct_TrustedAuthorities* du = new TStruct_TrustedAuthorities();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_TrustedAuthorities_trusted_authorities_list* _M0 = new TStruct_TrustedAuthorities_trusted_authorities_list();
            this->appendChildRenamed(_M0, "trusted_authorities_list");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_TruncatedHMACExtension : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 285, "TruncatedHMACExtension");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_TruncatedHMACExtension() : CompositeDataUnit() {

        this->setName("TruncatedHMACExtension");
        this->setExpanded();
    }



    TStruct_TruncatedHMACExtension* newInstance_() const {

        TStruct_TruncatedHMACExtension* du = new TStruct_TruncatedHMACExtension();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {

            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_ResponderID : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 286, "ResponderID");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ResponderID() : CompositeDataUnit() {

        this->setName("ResponderID");
    }



    TStruct_ResponderID* newInstance_() const {

        TStruct_ResponderID* du = new TStruct_ResponderID();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            OpaqueField* _M1 = new OpaqueField(BC(_value__N, 0));
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_Extensions : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 287, "Extensions");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_Extensions() : CompositeDataUnit() {

        this->setName("Extensions");
    }



    TStruct_Extensions* newInstance_() const {

        TStruct_Extensions* du = new TStruct_Extensions();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            OpaqueField* _M1 = new OpaqueField(BC(_value__N, 0));
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_OCSPStatusRequest_responder_id_list : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 288, "OCSPStatusRequest_responder_id_list");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_OCSPStatusRequest_responder_id_list() : CompositeDataUnit() {

        this->setName("OCSPStatusRequest_responder_id_list");
    }



    TStruct_OCSPStatusRequest_responder_id_list* newInstance_() const {

        TStruct_OCSPStatusRequest_responder_id_list* du = new TStruct_OCSPStatusRequest_responder_id_list();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TStruct_ResponderID* _M1_V = new TStruct_ResponderID();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_OCSPStatusRequest : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 289, "OCSPStatusRequest");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_OCSPStatusRequest() : CompositeDataUnit() {

        this->setName("OCSPStatusRequest");
    }



    TStruct_OCSPStatusRequest* newInstance_() const {

        TStruct_OCSPStatusRequest* du = new TStruct_OCSPStatusRequest();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_OCSPStatusRequest_responder_id_list* _M0 = new TStruct_OCSPStatusRequest_responder_id_list();
            this->appendChildRenamed(_M0, "responder_id_list");

            TStruct_Extensions* _M1 = new TStruct_Extensions();
            this->appendChildRenamed(_M1, "request_extensions");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TEnum_UserMappingType : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 290, "UserMappingType");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_UserMappingType() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("UserMappingType");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("upn_domain_hint", 64);
            staticList_.addFallbackItem("unknown");
        }
    }



    TEnum_UserMappingType* newInstance_() const {

        TEnum_UserMappingType* du = new TEnum_UserMappingType();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_UserMappingType::staticList_;





class TStruct_UserMappingTypeList_user_mapping_types : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 291, "UserMappingTypeList_user_mapping_types");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_UserMappingTypeList_user_mapping_types() : CompositeDataUnit() {

        this->setName("UserMappingTypeList_user_mapping_types");
    }



    TStruct_UserMappingTypeList_user_mapping_types* newInstance_() const {

        TStruct_UserMappingTypeList_user_mapping_types* du = new TStruct_UserMappingTypeList_user_mapping_types();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TEnum_UserMappingType* _M1_V = new TEnum_UserMappingType();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_UserMappingTypeList : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 292, "UserMappingTypeList");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_UserMappingTypeList() : CompositeDataUnit() {

        this->setName("UserMappingTypeList");
    }



    TStruct_UserMappingTypeList* newInstance_() const {

        TStruct_UserMappingTypeList* du = new TStruct_UserMappingTypeList();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_UserMappingTypeList_user_mapping_types* _M0 = new TStruct_UserMappingTypeList_user_mapping_types();
            this->appendChildRenamed(_M0, "user_mapping_types");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TEnum_AuthzDataFormat : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 293, "AuthzDataFormat");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_AuthzDataFormat() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("AuthzDataFormat");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("x509_attr_cert" , 0);
            staticList_.addItem("saml_assertion" , 1);
            staticList_.addItem("x509_attr_cert_url", 2);
            staticList_.addItem("saml_assertion_url", 3);
            staticList_.addFallbackItem("unknown");
        }
    }



    TEnum_AuthzDataFormat* newInstance_() const {

        TEnum_AuthzDataFormat* du = new TEnum_AuthzDataFormat();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_AuthzDataFormat::staticList_;





class TStruct_AuthzDataFormats : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 294, "AuthzDataFormats");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_AuthzDataFormats() : CompositeDataUnit() {

        this->setName("AuthzDataFormats");
    }



    TStruct_AuthzDataFormats* newInstance_() const {

        TStruct_AuthzDataFormats* du = new TStruct_AuthzDataFormats();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TEnum_AuthzDataFormat* _M1_V = new TEnum_AuthzDataFormat();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TEnum_NamedCurve : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 295, "NamedCurve");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_NamedCurve() : EnumerationField(BC(0, 16), staticList_) {

        this->setName("NamedCurve");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("sect163k1" , 1);
            staticList_.addItem("sect163r1" , 2);
            staticList_.addItem("sect163r2" , 3);
            staticList_.addItem("sect193r1" , 4);
            staticList_.addItem("sect193r2" , 5);
            staticList_.addItem("sect233k1" , 6);
            staticList_.addItem("sect233r1" , 7);
            staticList_.addItem("sect239k1" , 8);
            staticList_.addItem("sect283k1" , 9);
            staticList_.addItem("sect283r1" , 10);
            staticList_.addItem("sect409k1" , 11);
            staticList_.addItem("sect409r1" , 12);
            staticList_.addItem("sect571k1" , 13);
            staticList_.addItem("sect571r1" , 14);
            staticList_.addItem("secp160k1" , 15);
            staticList_.addItem("secp160r1" , 16);
            staticList_.addItem("secp160r2" , 17);
            staticList_.addItem("secp192k1" , 18);
            staticList_.addItem("secp192r1" , 19);
            staticList_.addItem("secp224k1" , 20);
            staticList_.addItem("secp224r1" , 21);
            staticList_.addItem("secp256k1" , 22);
            staticList_.addItem("secp256r1" , 23);
            staticList_.addItem("secp384r1" , 24);
            staticList_.addItem("secp521r1" , 25);
            staticList_.addItem("arbitrary_explicit_prime_curves", 65281);
            staticList_.addItem("arbitrary_explicit_char2_curves", 65282);
            staticList_.addFallbackItem("unknown");
        }
    }



    TEnum_NamedCurve* newInstance_() const {

        TEnum_NamedCurve* du = new TEnum_NamedCurve();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_NamedCurve::staticList_;





class TStruct_ECParameters : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 296, "ECParameters");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ECParameters() : CompositeDataUnit() {

        this->setName("ECParameters");
    }



    TStruct_ECParameters* newInstance_() const {

        TStruct_ECParameters* du = new TStruct_ECParameters();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_ECCurveType* _M0 = new TEnum_ECCurveType();
            this->appendChildRenamed(_M0, "curve_type");

        } else if (len == 1 && decoded >= 1) {

            int _value_curve_type = (*this)[0]->propGet<int>(".value");
            if (_value_curve_type == 1) {

                TStruct_ECParameters_explicit_prime* _C_M0 = new TStruct_ECParameters_explicit_prime();
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_curve_type == 3) {

                TEnum_NamedCurve* _C_M0 = new TEnum_NamedCurve();
                this->appendChildRenamed(_C_M0, "namedcurve");
            } else {

            OpaqueField* _C_M0 = new OpaqueField(BC(-1, 0));
            this->appendChildRenamed(_C_M0, "curve");}
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

        }
        return ok;
    }
};






class TStruct_ServerECDHParams : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 297, "ServerECDHParams");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ServerECDHParams() : CompositeDataUnit() {

        this->setName("ServerECDHParams");
    }



    TStruct_ServerECDHParams* newInstance_() const {

        TStruct_ServerECDHParams* du = new TStruct_ServerECDHParams();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_ECParameters* _M0 = new TStruct_ECParameters();
            this->appendChildRenamed(_M0, "curve_params");

            TStruct_ECPoint* _M1 = new TStruct_ECPoint();
            this->appendChildRenamed(_M1, "public");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_EllipticCurveList_elliptic_curve_list : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 298, "EllipticCurveList_elliptic_curve_list");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_EllipticCurveList_elliptic_curve_list() : CompositeDataUnit() {

        this->setName("EllipticCurveList_elliptic_curve_list");
    }



    TStruct_EllipticCurveList_elliptic_curve_list* newInstance_() const {

        TStruct_EllipticCurveList_elliptic_curve_list* du = new TStruct_EllipticCurveList_elliptic_curve_list();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TEnum_NamedCurve* _M1_V = new TEnum_NamedCurve();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_EllipticCurveList : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 299, "EllipticCurveList");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_EllipticCurveList() : CompositeDataUnit() {

        this->setName("EllipticCurveList");
    }



    TStruct_EllipticCurveList* newInstance_() const {

        TStruct_EllipticCurveList* du = new TStruct_EllipticCurveList();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_EllipticCurveList_elliptic_curve_list* _M0 = new TStruct_EllipticCurveList_elliptic_curve_list();
            this->appendChildRenamed(_M0, "elliptic_curve_list");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TEnum_ECPointFormat : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 300, "ECPointFormat");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_ECPointFormat() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("ECPointFormat");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("uncompressed" , 0);
            staticList_.addItem("ansiX962_compressed_prime", 1);
            staticList_.addItem("ansiX962_compressed_char2", 2);
            staticList_.addFallbackItem("unknown");
            staticList_.addItem("reserved                 ", 248, 255);
        }
    }



    TEnum_ECPointFormat* newInstance_() const {

        TEnum_ECPointFormat* du = new TEnum_ECPointFormat();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_ECPointFormat::staticList_;





class TStruct_ECPointFormatList_ec_point_format_list : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 301, "ECPointFormatList_ec_point_format_list");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ECPointFormatList_ec_point_format_list() : CompositeDataUnit() {

        this->setName("ECPointFormatList_ec_point_format_list");
    }



    TStruct_ECPointFormatList_ec_point_format_list* newInstance_() const {

        TStruct_ECPointFormatList_ec_point_format_list* du = new TStruct_ECPointFormatList_ec_point_format_list();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TEnum_ECPointFormat* _M1_V = new TEnum_ECPointFormat();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_ECPointFormatList : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 302, "ECPointFormatList");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ECPointFormatList() : CompositeDataUnit() {

        this->setName("ECPointFormatList");
    }



    TStruct_ECPointFormatList* newInstance_() const {

        TStruct_ECPointFormatList* du = new TStruct_ECPointFormatList();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_ECPointFormatList_ec_point_format_list* _M0 = new TStruct_ECPointFormatList_ec_point_format_list();
            this->appendChildRenamed(_M0, "ec_point_format_list");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_SRPExtension_srp_I : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 303, "SRPExtension_srp_I");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_SRPExtension_srp_I() : CompositeDataUnit() {

        this->setName("SRPExtension_srp_I");
    }



    TStruct_SRPExtension_srp_I* newInstance_() const {

        TStruct_SRPExtension_srp_I* du = new TStruct_SRPExtension_srp_I();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            OpaqueField* _M1 = new OpaqueField(BC(_value__N, 0));
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_SRPExtension : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 304, "SRPExtension");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_SRPExtension() : CompositeDataUnit() {

        this->setName("SRPExtension");
    }



    TStruct_SRPExtension* newInstance_() const {

        TStruct_SRPExtension* du = new TStruct_SRPExtension();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_SRPExtension_srp_I* _M0 = new TStruct_SRPExtension_srp_I();
            this->appendChildRenamed(_M0, "srp_I");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TEnum_SignatureAlgorithm : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 305, "SignatureAlgorithm");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_SignatureAlgorithm() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("SignatureAlgorithm");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("anonymous", 0);
            staticList_.addItem("rsa" , 1);
            staticList_.addItem("dsa" , 2);
            staticList_.addItem("ecdsa" , 3);
            staticList_.addFallbackItem("unknown");
        }
    }



    TEnum_SignatureAlgorithm* newInstance_() const {

        TEnum_SignatureAlgorithm* du = new TEnum_SignatureAlgorithm();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_SignatureAlgorithm::staticList_;





class TEnum_HashAlgorithm : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 306, "HashAlgorithm");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_HashAlgorithm() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("HashAlgorithm");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("none" , 0);
            staticList_.addItem("md5" , 1);
            staticList_.addItem("sha1" , 2);
            staticList_.addItem("sha224" , 3);
            staticList_.addItem("sha256" , 4);
            staticList_.addItem("sha384" , 5);
            staticList_.addItem("sha512" , 6);
            staticList_.addFallbackItem("unknown");
        }
    }



    TEnum_HashAlgorithm* newInstance_() const {

        TEnum_HashAlgorithm* du = new TEnum_HashAlgorithm();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_HashAlgorithm::staticList_;





class TStruct_SignatureAndHashAlgorithm : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 307, "SignatureAndHashAlgorithm");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_SignatureAndHashAlgorithm() : CompositeDataUnit() {

        this->setName("SignatureAndHashAlgorithm");
    }



    TStruct_SignatureAndHashAlgorithm* newInstance_() const {

        TStruct_SignatureAndHashAlgorithm* du = new TStruct_SignatureAndHashAlgorithm();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_HashAlgorithm* _M0 = new TEnum_HashAlgorithm();
            this->appendChildRenamed(_M0, "hash");

            TEnum_SignatureAlgorithm* _M1 = new TEnum_SignatureAlgorithm();
            this->appendChildRenamed(_M1, "signature");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }


    std::string getDynamicTypeName_() const {

        std::string dynamicType;
        DataUnit* du;
        du = (*this)[0];
        if (du != 0) {
            dynamicType += du->propGetDefault<std::string>(".name", "");
        }
        dynamicType += "+";
        du = (*this)[1];
        if (du != 0) {
            dynamicType += du->propGetDefault<std::string>(".name", "");
        }
        return dynamicType;
    }
};






class TStruct_Signature : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 308, "Signature");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_Signature() : CompositeDataUnit() {

        this->setName("Signature");
    }



    TStruct_Signature* newInstance_() const {

        TStruct_Signature* du = new TStruct_Signature();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_SignatureAndHashAlgorithm* _M0 = new TStruct_SignatureAndHashAlgorithm();
            this->appendChildRenamed(_M0, "algo");

            TStruct_Signature_signature* _M1 = new TStruct_Signature_signature();
            this->appendChildRenamed(_M1, "signature");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_ServerKeyExchange : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 309, "ServerKeyExchange");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ServerKeyExchange() : CompositeDataUnit() {

        this->setName("ServerKeyExchange");
    }



    TStruct_ServerKeyExchange* newInstance_() const {

        TStruct_ServerKeyExchange* du = new TStruct_ServerKeyExchange();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_ServerECDHParams* _M0 = new TStruct_ServerECDHParams();
            this->appendChildRenamed(_M0, "params");

            TStruct_Signature* _M1 = new TStruct_Signature();
            this->appendChildRenamed(_M1, "signed_params");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_SignatureAndHashAlgorithms : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 310, "SignatureAndHashAlgorithms");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_SignatureAndHashAlgorithms() : CompositeDataUnit() {

        this->setName("SignatureAndHashAlgorithms");
    }



    TStruct_SignatureAndHashAlgorithms* newInstance_() const {

        TStruct_SignatureAndHashAlgorithms* du = new TStruct_SignatureAndHashAlgorithms();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TStruct_SignatureAndHashAlgorithm* _M1_V = new TStruct_SignatureAndHashAlgorithm();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TVector_SRTPProtectionProfile : public StreamVectorDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(StreamVectorDataUnit::typeDescriptor(), 311, "SRTPProtectionProfile");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TVector_SRTPProtectionProfile() : StreamVectorDataUnit(BC(2, 0)) {

        this->setName("SRTPProtectionProfile");

        IntegerField* _T = new IntegerField(BC(0, 8), false);
        this->setElementTemplate(_T);
    }



    TVector_SRTPProtectionProfile* newInstance_() const {

        TVector_SRTPProtectionProfile* du = new TVector_SRTPProtectionProfile();
        return du;
    }
};






class TStruct_SRTPProtectionProfiles : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 312, "SRTPProtectionProfiles");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_SRTPProtectionProfiles() : CompositeDataUnit() {

        this->setName("SRTPProtectionProfiles");
    }



    TStruct_SRTPProtectionProfiles* newInstance_() const {

        TStruct_SRTPProtectionProfiles* du = new TStruct_SRTPProtectionProfiles();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TVector_SRTPProtectionProfile* _M1_V = new TVector_SRTPProtectionProfile();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_UseSRTPData_srtp_mki : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 313, "UseSRTPData_srtp_mki");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_UseSRTPData_srtp_mki() : CompositeDataUnit() {

        this->setName("UseSRTPData_srtp_mki");
    }



    TStruct_UseSRTPData_srtp_mki* newInstance_() const {

        TStruct_UseSRTPData_srtp_mki* du = new TStruct_UseSRTPData_srtp_mki();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            OpaqueField* _M1 = new OpaqueField(BC(_value__N, 0));
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_UseSRTPData : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 314, "UseSRTPData");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_UseSRTPData() : CompositeDataUnit() {

        this->setName("UseSRTPData");
    }



    TStruct_UseSRTPData* newInstance_() const {

        TStruct_UseSRTPData* du = new TStruct_UseSRTPData();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_SRTPProtectionProfiles* _M0 = new TStruct_SRTPProtectionProfiles();
            this->appendChildRenamed(_M0, "SRTPProtectionProfilesXX");

            TStruct_UseSRTPData_srtp_mki* _M1 = new TStruct_UseSRTPData_srtp_mki();
            this->appendChildRenamed(_M1, "srtp_mki");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TEnum_HeartbeatMode : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 315, "HeartbeatMode");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_HeartbeatMode() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("HeartbeatMode");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("peer_allowed_to_send" , 1);
            staticList_.addItem("peer_not_allowed_to_send", 2);
            staticList_.addFallbackItem("unknown");
        }
    }



    TEnum_HeartbeatMode* newInstance_() const {

        TEnum_HeartbeatMode* du = new TEnum_HeartbeatMode();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_HeartbeatMode::staticList_;





class TStruct_HeartbeatExtension : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 316, "HeartbeatExtension");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_HeartbeatExtension() : CompositeDataUnit() {

        this->setName("HeartbeatExtension");
    }



    TStruct_HeartbeatExtension* newInstance_() const {

        TStruct_HeartbeatExtension* du = new TStruct_HeartbeatExtension();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_HeartbeatMode* _M0 = new TEnum_HeartbeatMode();
            this->appendChildRenamed(_M0, "mode");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_ProtocolName : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 317, "ProtocolName");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ProtocolName() : CompositeDataUnit() {

        this->setName("ProtocolName");
    }



    TStruct_ProtocolName* newInstance_() const {

        TStruct_ProtocolName* du = new TStruct_ProtocolName();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            OpaqueField* _M1 = new OpaqueField(BC(_value__N, 0));
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_ProtocolNameList_protocol_name_list : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 318, "ProtocolNameList_protocol_name_list");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ProtocolNameList_protocol_name_list() : CompositeDataUnit() {

        this->setName("ProtocolNameList_protocol_name_list");
    }



    TStruct_ProtocolNameList_protocol_name_list* newInstance_() const {

        TStruct_ProtocolNameList_protocol_name_list* du = new TStruct_ProtocolNameList_protocol_name_list();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TStruct_ProtocolName* _M1_V = new TStruct_ProtocolName();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_ProtocolNameList : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 319, "ProtocolNameList");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ProtocolNameList() : CompositeDataUnit() {

        this->setName("ProtocolNameList");
    }



    TStruct_ProtocolNameList* newInstance_() const {

        TStruct_ProtocolNameList* du = new TStruct_ProtocolNameList();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_ProtocolNameList_protocol_name_list* _M0 = new TStruct_ProtocolNameList_protocol_name_list();
            this->appendChildRenamed(_M0, "protocol_name_list");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TEnum_CertificateStatusType : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 320, "CertificateStatusType");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_CertificateStatusType() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("CertificateStatusType");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("ocsp" , 1);
            staticList_.addItem("ocsp_multi", 2);
        }
    }



    TEnum_CertificateStatusType* newInstance_() const {

        TEnum_CertificateStatusType* du = new TEnum_CertificateStatusType();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_CertificateStatusType::staticList_;





class TStruct_CertificateStatusRequest : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 321, "CertificateStatusRequest");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_CertificateStatusRequest() : CompositeDataUnit() {

        this->setName("CertificateStatusRequest");
    }



    TStruct_CertificateStatusRequest* newInstance_() const {

        TStruct_CertificateStatusRequest* du = new TStruct_CertificateStatusRequest();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_CertificateStatusType* _M0 = new TEnum_CertificateStatusType();
            this->appendChildRenamed(_M0, "status_type");

        } else if (len == 1 && decoded >= 1) {

            int _value_status_type = (*this)[0]->propGet<int>(".value");
            if (_value_status_type == 1) {

                TStruct_OCSPStatusRequest* _C_M0 = new TStruct_OCSPStatusRequest();
                this->appendChildRenamed(_C_M0, "_M0");
            } else {

            OpaqueField* _C_M0 = new OpaqueField(BC(-1, 0));
            this->appendChildRenamed(_C_M0, "status");}
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

        }
        return ok;
    }
};






class TStruct_CertificateStatusRequestItemV2 : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 322, "CertificateStatusRequestItemV2");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_CertificateStatusRequestItemV2() : CompositeDataUnit() {

        this->setName("CertificateStatusRequestItemV2");
    }



    TStruct_CertificateStatusRequestItemV2* newInstance_() const {

        TStruct_CertificateStatusRequestItemV2* du = new TStruct_CertificateStatusRequestItemV2();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_CertificateStatusType* _M0 = new TEnum_CertificateStatusType();
            this->appendChildRenamed(_M0, "status_type");

            IntegerField* _M1 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M1, "request_length");

        } else if (len == 2 && decoded >= 2) {

            int _value_status_type = (*this)[0]->propGet<int>(".value");
            int _value_request_length = (*this)[1]->propGet<int>(".value");
            if (_value_status_type == 1) {

                TStruct_OCSPStatusRequest* _C_M0 = new TStruct_OCSPStatusRequest();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_request_length);
                this->appendChildRenamed(_C_M0, "request1");
            } else if (_value_status_type == 2) {

                TStruct_OCSPStatusRequest* _C_M0 = new TStruct_OCSPStatusRequest();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_request_length);
                this->appendChildRenamed(_C_M0, "request2");
            } else {

            OpaqueField* _C_M0 = new OpaqueField(BC(_value_request_length, 0));
            _C_M0->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_C_M0, "_M0");}
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

        } else if (index == 1) {

            int _value_0 = 0;
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            (*this)[1]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_CertificateStatusRequestListV2_certificate_status_req_list : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 323, "CertificateStatusRequestListV2_certificate_status_req_list");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_CertificateStatusRequestListV2_certificate_status_req_list() : CompositeDataUnit() {

        this->setName("CertificateStatusRequestListV2_certificate_status_req_list");
    }



    TStruct_CertificateStatusRequestListV2_certificate_status_req_list* newInstance_() const {

        TStruct_CertificateStatusRequestListV2_certificate_status_req_list* du = new TStruct_CertificateStatusRequestListV2_certificate_status_req_list();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TStruct_CertificateStatusRequestItemV2* _M1_V = new TStruct_CertificateStatusRequestItemV2();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_CertificateStatusRequestListV2 : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 324, "CertificateStatusRequestListV2");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_CertificateStatusRequestListV2() : CompositeDataUnit() {

        this->setName("CertificateStatusRequestListV2");
    }



    TStruct_CertificateStatusRequestListV2* newInstance_() const {

        TStruct_CertificateStatusRequestListV2* du = new TStruct_CertificateStatusRequestListV2();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_CertificateStatusRequestListV2_certificate_status_req_list* _M0 = new TStruct_CertificateStatusRequestListV2_certificate_status_req_list();
            this->appendChildRenamed(_M0, "certificate_status_req_list");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_Client_SignedCertificateTimestamp : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 325, "Client_SignedCertificateTimestamp");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_Client_SignedCertificateTimestamp() : CompositeDataUnit() {

        this->setName("Client_SignedCertificateTimestamp");
        this->setExpanded();
    }



    TStruct_Client_SignedCertificateTimestamp* newInstance_() const {

        TStruct_Client_SignedCertificateTimestamp* du = new TStruct_Client_SignedCertificateTimestamp();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {

            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TEnum_CertificateType : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 326, "CertificateType");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_CertificateType() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("CertificateType");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("X509" , 0);
            staticList_.addItem("OpenPGP" , 1);
            staticList_.addItem("RawPublicKey", 2);
        }
    }



    TEnum_CertificateType* newInstance_() const {

        TEnum_CertificateType* du = new TEnum_CertificateType();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_CertificateType::staticList_;





class TStruct_Client_CertificateTypeExtension_certificate_types : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 327, "Client_CertificateTypeExtension_certificate_types");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_Client_CertificateTypeExtension_certificate_types() : CompositeDataUnit() {

        this->setName("Client_CertificateTypeExtension_certificate_types");
    }



    TStruct_Client_CertificateTypeExtension_certificate_types* newInstance_() const {

        TStruct_Client_CertificateTypeExtension_certificate_types* du = new TStruct_Client_CertificateTypeExtension_certificate_types();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TEnum_CertificateType* _M1_V = new TEnum_CertificateType();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_Client_CertificateTypeExtension : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 328, "Client_CertificateTypeExtension");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_Client_CertificateTypeExtension() : CompositeDataUnit() {

        this->setName("Client_CertificateTypeExtension");
    }



    TStruct_Client_CertificateTypeExtension* newInstance_() const {

        TStruct_Client_CertificateTypeExtension* du = new TStruct_Client_CertificateTypeExtension();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_Client_CertificateTypeExtension_certificate_types* _M0 = new TStruct_Client_CertificateTypeExtension_certificate_types();
            this->appendChildRenamed(_M0, "certificate_types");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_Client_ClientCertTypeExtension_client_certificate_types : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 329, "Client_ClientCertTypeExtension_client_certificate_types");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_Client_ClientCertTypeExtension_client_certificate_types() : CompositeDataUnit() {

        this->setName("Client_ClientCertTypeExtension_client_certificate_types");
    }



    TStruct_Client_ClientCertTypeExtension_client_certificate_types* newInstance_() const {

        TStruct_Client_ClientCertTypeExtension_client_certificate_types* du = new TStruct_Client_ClientCertTypeExtension_client_certificate_types();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TEnum_CertificateType* _M1_V = new TEnum_CertificateType();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_Client_ClientCertTypeExtension : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 330, "Client_ClientCertTypeExtension");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_Client_ClientCertTypeExtension() : CompositeDataUnit() {

        this->setName("Client_ClientCertTypeExtension");
    }



    TStruct_Client_ClientCertTypeExtension* newInstance_() const {

        TStruct_Client_ClientCertTypeExtension* du = new TStruct_Client_ClientCertTypeExtension();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_Client_ClientCertTypeExtension_client_certificate_types* _M0 = new TStruct_Client_ClientCertTypeExtension_client_certificate_types();
            this->appendChildRenamed(_M0, "client_certificate_types");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_Client_ServerCertTypeExtension_server_certificate_types : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 331, "Client_ServerCertTypeExtension_server_certificate_types");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_Client_ServerCertTypeExtension_server_certificate_types() : CompositeDataUnit() {

        this->setName("Client_ServerCertTypeExtension_server_certificate_types");
    }



    TStruct_Client_ServerCertTypeExtension_server_certificate_types* newInstance_() const {

        TStruct_Client_ServerCertTypeExtension_server_certificate_types* du = new TStruct_Client_ServerCertTypeExtension_server_certificate_types();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TEnum_CertificateType* _M1_V = new TEnum_CertificateType();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_Client_ServerCertTypeExtension : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 332, "Client_ServerCertTypeExtension");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_Client_ServerCertTypeExtension() : CompositeDataUnit() {

        this->setName("Client_ServerCertTypeExtension");
    }



    TStruct_Client_ServerCertTypeExtension* newInstance_() const {

        TStruct_Client_ServerCertTypeExtension* du = new TStruct_Client_ServerCertTypeExtension();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_Client_ServerCertTypeExtension_server_certificate_types* _M0 = new TStruct_Client_ServerCertTypeExtension_server_certificate_types();
            this->appendChildRenamed(_M0, "server_certificate_types");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TEnum_PaddingByte : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 333, "PaddingByte");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_PaddingByte() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("PaddingByte");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("zero", 0);
        }
    }



    TEnum_PaddingByte* newInstance_() const {

        TEnum_PaddingByte* du = new TEnum_PaddingByte();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_PaddingByte::staticList_;





class TStruct_PaddingExtension : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 334, "PaddingExtension");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_PaddingExtension() : CompositeDataUnit() {

        this->setName("PaddingExtension");
    }



    TStruct_PaddingExtension* newInstance_() const {

        TStruct_PaddingExtension* du = new TStruct_PaddingExtension();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            VectorDataUnit* _M0 = new StreamVectorDataUnit();
            TEnum_PaddingByte* _M0_V = new TEnum_PaddingByte();
            _M0->setElementTemplate(_M0_V);
            _M0->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M0, "padding");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_EncryptThenMacExtension : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 335, "EncryptThenMacExtension");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_EncryptThenMacExtension() : CompositeDataUnit() {

        this->setName("EncryptThenMacExtension");
        this->setExpanded();
    }



    TStruct_EncryptThenMacExtension* newInstance_() const {

        TStruct_EncryptThenMacExtension* du = new TStruct_EncryptThenMacExtension();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {

            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_ExtendedMasterSecretExtension : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 336, "ExtendedMasterSecretExtension");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ExtendedMasterSecretExtension() : CompositeDataUnit() {

        this->setName("ExtendedMasterSecretExtension");
        this->setExpanded();
    }



    TStruct_ExtendedMasterSecretExtension* newInstance_() const {

        TStruct_ExtendedMasterSecretExtension* du = new TStruct_ExtendedMasterSecretExtension();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {

            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TEnum_CachedInformationType : public EnumerationField {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(EnumerationField::typeDescriptor(), 337, "CachedInformationType");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TEnum_CachedInformationType() : EnumerationField(BC(0, 8), staticList_) {

        this->setName("CachedInformationType");


        if (staticList_.getNItems() == 0) {
            staticList_.addItem("cert" , 1);
            staticList_.addItem("cert_req", 2);
        }
    }



    TEnum_CachedInformationType* newInstance_() const {

        TEnum_CachedInformationType* du = new TEnum_CachedInformationType();
        return du;
    }


    static EnumerationItemList staticList_;



};



EnumerationItemList TEnum_CachedInformationType::staticList_;





class TStruct_Client_CachedObject_hash_value : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 338, "Client_CachedObject_hash_value");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_Client_CachedObject_hash_value() : CompositeDataUnit() {

        this->setName("Client_CachedObject_hash_value");
    }



    TStruct_Client_CachedObject_hash_value* newInstance_() const {

        TStruct_Client_CachedObject_hash_value* du = new TStruct_Client_CachedObject_hash_value();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            OpaqueField* _M1 = new OpaqueField(BC(_value__N, 0));
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_Client_CachedObject : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 339, "Client_CachedObject");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_Client_CachedObject() : CompositeDataUnit() {

        this->setName("Client_CachedObject");
    }



    TStruct_Client_CachedObject* newInstance_() const {

        TStruct_Client_CachedObject* du = new TStruct_Client_CachedObject();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_CachedInformationType* _M0 = new TEnum_CachedInformationType();
            this->appendChildRenamed(_M0, "type");

            TStruct_Client_CachedObject_hash_value* _M1 = new TStruct_Client_CachedObject_hash_value();
            this->appendChildRenamed(_M1, "hash_value");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_Server_CachedObject : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 340, "Server_CachedObject");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_Server_CachedObject() : CompositeDataUnit() {

        this->setName("Server_CachedObject");
    }



    TStruct_Server_CachedObject* newInstance_() const {

        TStruct_Server_CachedObject* du = new TStruct_Server_CachedObject();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_CachedInformationType* _M0 = new TEnum_CachedInformationType();
            this->appendChildRenamed(_M0, "type");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_Client_CachedInformation_cached_info : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 341, "Client_CachedInformation_cached_info");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_Client_CachedInformation_cached_info() : CompositeDataUnit() {

        this->setName("Client_CachedInformation_cached_info");
    }



    TStruct_Client_CachedInformation_cached_info* newInstance_() const {

        TStruct_Client_CachedInformation_cached_info* du = new TStruct_Client_CachedInformation_cached_info();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TStruct_Client_CachedObject* _M1_V = new TStruct_Client_CachedObject();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_Client_CachedInformation : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 342, "Client_CachedInformation");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_Client_CachedInformation() : CompositeDataUnit() {

        this->setName("Client_CachedInformation");
    }



    TStruct_Client_CachedInformation* newInstance_() const {

        TStruct_Client_CachedInformation* du = new TStruct_Client_CachedInformation();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_Client_CachedInformation_cached_info* _M0 = new TStruct_Client_CachedInformation_cached_info();
            this->appendChildRenamed(_M0, "cached_info");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_Server_CachedInformation_cached_info : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 343, "Server_CachedInformation_cached_info");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_Server_CachedInformation_cached_info() : CompositeDataUnit() {

        this->setName("Server_CachedInformation_cached_info");
    }



    TStruct_Server_CachedInformation_cached_info* newInstance_() const {

        TStruct_Server_CachedInformation_cached_info* du = new TStruct_Server_CachedInformation_cached_info();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TStruct_Server_CachedObject* _M1_V = new TStruct_Server_CachedObject();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_Server_CachedInformation : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 344, "Server_CachedInformation");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_Server_CachedInformation() : CompositeDataUnit() {

        this->setName("Server_CachedInformation");
    }



    TStruct_Server_CachedInformation* newInstance_() const {

        TStruct_Server_CachedInformation* du = new TStruct_Server_CachedInformation();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_Server_CachedInformation_cached_info* _M0 = new TStruct_Server_CachedInformation_cached_info();
            this->appendChildRenamed(_M0, "cached_info");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_RenegotiationInfo_renegotiated_connection : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 345, "RenegotiationInfo_renegotiated_connection");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_RenegotiationInfo_renegotiated_connection() : CompositeDataUnit() {

        this->setName("RenegotiationInfo_renegotiated_connection");
    }



    TStruct_RenegotiationInfo_renegotiated_connection* newInstance_() const {

        TStruct_RenegotiationInfo_renegotiated_connection* du = new TStruct_RenegotiationInfo_renegotiated_connection();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            OpaqueField* _M1 = new OpaqueField(BC(_value__N, 0));
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_RenegotiationInfo : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 346, "RenegotiationInfo");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_RenegotiationInfo() : CompositeDataUnit() {

        this->setName("RenegotiationInfo");
    }



    TStruct_RenegotiationInfo* newInstance_() const {

        TStruct_RenegotiationInfo* du = new TStruct_RenegotiationInfo();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TStruct_RenegotiationInfo_renegotiated_connection* _M0 = new TStruct_RenegotiationInfo_renegotiated_connection();
            this->appendChildRenamed(_M0, "renegotiated_connection");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        return ok;
    }
};






class TStruct_Extension : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 347, "Extension");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_Extension() : CompositeDataUnit() {

        this->setName("Extension");
    }



    TStruct_Extension* newInstance_() const {

        TStruct_Extension* du = new TStruct_Extension();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_ExtensionType* _M0 = new TEnum_ExtensionType();
            this->appendChildRenamed(_M0, "type");

            IntegerField* _M1 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M1, "length");

        } else if (len == 2 && decoded >= 2) {

            int _value_type = (*this)[0]->propGet<int>(".value");
            int _value_length = (*this)[1]->propGet<int>(".value");
            if (_value_type == 0) {

                TStruct_ServerNameList* _C_M0 = new TStruct_ServerNameList();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 1) {

                TStruct_MaxFragmentLengthExtension* _C_M0 = new TStruct_MaxFragmentLengthExtension();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 2) {

                TStruct_CertificateURL* _C_M0 = new TStruct_CertificateURL();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 3) {

                TStruct_TrustedAuthorities* _C_M0 = new TStruct_TrustedAuthorities();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 4) {

                TStruct_TruncatedHMACExtension* _C_M0 = new TStruct_TruncatedHMACExtension();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 5) {

                TStruct_CertificateStatusRequest* _C_M0 = new TStruct_CertificateStatusRequest();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 6) {

                TStruct_UserMappingTypeList* _C_M0 = new TStruct_UserMappingTypeList();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if ((_value_type == 7) || (_value_type == 8)) {

                TStruct_AuthzDataFormats* _C_M0 = new TStruct_AuthzDataFormats();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 9) {

                TStruct_Client_CertificateTypeExtension* _C_M0 = new TStruct_Client_CertificateTypeExtension();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 10) {

                TStruct_EllipticCurveList* _C_M0 = new TStruct_EllipticCurveList();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 11) {

                TStruct_ECPointFormatList* _C_M0 = new TStruct_ECPointFormatList();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 12) {

                TStruct_SRPExtension* _C_M0 = new TStruct_SRPExtension();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 13) {

                TStruct_SignatureAndHashAlgorithms* _C_M0 = new TStruct_SignatureAndHashAlgorithms();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 14) {

                TStruct_UseSRTPData* _C_M0 = new TStruct_UseSRTPData();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 15) {

                TStruct_HeartbeatExtension* _C_M0 = new TStruct_HeartbeatExtension();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 16) {

                TStruct_ProtocolNameList* _C_M0 = new TStruct_ProtocolNameList();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 17) {

                TStruct_CertificateStatusRequestListV2* _C_M0 = new TStruct_CertificateStatusRequestListV2();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 18) {

                TStruct_Client_SignedCertificateTimestamp* _C_M0 = new TStruct_Client_SignedCertificateTimestamp();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 19) {

                TStruct_Client_ClientCertTypeExtension* _C_M0 = new TStruct_Client_ClientCertTypeExtension();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 20) {

                TStruct_Client_ServerCertTypeExtension* _C_M0 = new TStruct_Client_ServerCertTypeExtension();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 21) {

                TStruct_PaddingExtension* _C_M0 = new TStruct_PaddingExtension();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 22) {

                TStruct_EncryptThenMacExtension* _C_M0 = new TStruct_EncryptThenMacExtension();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 23) {

                TStruct_ExtendedMasterSecretExtension* _C_M0 = new TStruct_ExtendedMasterSecretExtension();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 25) {

                TStruct_Client_CachedInformation* _C_M0 = new TStruct_Client_CachedInformation();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else if (_value_type == 65281) {

                TStruct_RenegotiationInfo* _C_M0 = new TStruct_RenegotiationInfo();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "_M0");
            } else {

            OpaqueField* _C_M0 = new OpaqueField(BC(_value_length, 0));
            _C_M0->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_C_M0, "data");}
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

        } else if (index == 1) {

            int _value_0 = 0;
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            (*this)[1]->propSet<int>(".value", _value_0);
        }
        return ok;
    }


    std::string getDynamicTypeName_() const {

        DataUnit* du = (*this)[0];
        return (du != 0) ? du->propGetDefault<std::string>(".name", "") : "";
    }
};






class TStruct_ClientHello_extensions : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 348, "ClientHello_extensions");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ClientHello_extensions() : CompositeDataUnit() {

        this->setName("ClientHello_extensions");
    }



    TStruct_ClientHello_extensions* newInstance_() const {

        TStruct_ClientHello_extensions* du = new TStruct_ClientHello_extensions();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TStruct_Extension* _M1_V = new TStruct_Extension();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_ClientHello : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 349, "ClientHello");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ClientHello() : CompositeDataUnit() {

        this->setName("ClientHello");
    }



    TStruct_ClientHello* newInstance_() const {

        TStruct_ClientHello* du = new TStruct_ClientHello();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_Version* _M0 = new TEnum_Version();
            this->appendChildRenamed(_M0, "version");

            OpaqueField* _M1 = new OpaqueField(BC(32, 0));
            this->appendChildRenamed(_M1, "random");

            IntegerField* _M2 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M2, "session_id_length");

        } else if (len == 3 && decoded >= 3) {


            int _value_session_id_length = (*this)[2]->propGet<int>(".value");
            OpaqueField* _M3 = new OpaqueField(BC(_value_session_id_length, 0));
            _M3->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M3, "session_id");

            TStruct_ClientHello_cipher_suites* _M4 = new TStruct_ClientHello_cipher_suites();
            this->appendChildRenamed(_M4, "cipher_suites");

            TStruct_ClientHello_compression_methods* _M5 = new TStruct_ClientHello_compression_methods();
            this->appendChildRenamed(_M5, "compression_methods");

            TStruct_ClientHello_extensions* _M6 = new TStruct_ClientHello_extensions();
            this->appendChildRenamed(_M6, "extensions");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 2) {

            int _value_0 = 0;
            if ((*this)[3] != 0) {
                _value_0 = (*this)[3]->getLength().byteAligned();
            }
            (*this)[2]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_DTLSClientHello_extensions : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 350, "DTLSClientHello_extensions");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_DTLSClientHello_extensions() : CompositeDataUnit() {

        this->setName("DTLSClientHello_extensions");
    }



    TStruct_DTLSClientHello_extensions* newInstance_() const {

        TStruct_DTLSClientHello_extensions* du = new TStruct_DTLSClientHello_extensions();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TStruct_Extension* _M1_V = new TStruct_Extension();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_DTLSClientHello : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 351, "DTLSClientHello");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_DTLSClientHello() : CompositeDataUnit() {

        this->setName("DTLSClientHello");
    }



    TStruct_DTLSClientHello* newInstance_() const {

        TStruct_DTLSClientHello* du = new TStruct_DTLSClientHello();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_Version* _M0 = new TEnum_Version();
            this->appendChildRenamed(_M0, "version");

            OpaqueField* _M1 = new OpaqueField(BC(32, 0));
            this->appendChildRenamed(_M1, "random");

            IntegerField* _M2 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M2, "session_id_length");

        } else if (len == 3 && decoded >= 3) {


            int _value_session_id_length = (*this)[2]->propGet<int>(".value");
            OpaqueField* _M3 = new OpaqueField(BC(_value_session_id_length, 0));
            _M3->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M3, "session_id");

            TStruct_DTLSClientHello_cookie* _M4 = new TStruct_DTLSClientHello_cookie();
            this->appendChildRenamed(_M4, "cookie");

            TStruct_DTLSClientHello_cipher_suites* _M5 = new TStruct_DTLSClientHello_cipher_suites();
            this->appendChildRenamed(_M5, "cipher_suites");

            TStruct_DTLSClientHello_compression_methods* _M6 = new TStruct_DTLSClientHello_compression_methods();
            this->appendChildRenamed(_M6, "compression_methods");

            TStruct_DTLSClientHello_extensions* _M7 = new TStruct_DTLSClientHello_extensions();
            this->appendChildRenamed(_M7, "extensions");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 2) {

            int _value_0 = 0;
            if ((*this)[3] != 0) {
                _value_0 = (*this)[3]->getLength().byteAligned();
            }
            (*this)[2]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_DTLSHandshakeMessage : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 352, "DTLSHandshakeMessage");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_DTLSHandshakeMessage() : CompositeDataUnit() {

        this->setName("DTLSHandshakeMessage");
    }



    TStruct_DTLSHandshakeMessage* newInstance_() const {

        TStruct_DTLSHandshakeMessage* du = new TStruct_DTLSHandshakeMessage();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_HandshakeType* _M0 = new TEnum_HandshakeType();
            this->appendChildRenamed(_M0, "type");

            IntegerField* _M1 = new IntegerField(BC(0, 24), false);
            this->appendChildRenamed(_M1, "length");

            IntegerField* _M2 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M2, "message_seq");

            IntegerField* _M3 = new IntegerField(BC(0, 24), false);
            this->appendChildRenamed(_M3, "fragment_offset");

            IntegerField* _M4 = new IntegerField(BC(0, 24), false);
            this->appendChildRenamed(_M4, "fragment_length");

        } else if (len == 5 && decoded >= 2) {

            int _value_type = (*this)[0]->propGet<int>(".value");
            int _value_length = (*this)[1]->propGet<int>(".value");
            if (_value_type == 1) {

                TStruct_DTLSClientHello* _C_M0 = new TStruct_DTLSClientHello();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "clientHello");
            } else {

            OpaqueField* _C_M0 = new OpaqueField(BC(_value_length, 0));
            _C_M0->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_C_M0, "unknown");}
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

        } else if (index == 1) {

            int _value_0 = 0;
            if (true) {
                if ((*this)[5] != 0) {
                    _value_0 = (*this)[5]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[5] != 0) {
                    _value_0 = (*this)[5]->getLength().byteAligned();
                }
            }
            (*this)[1]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_DTLSRecord : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 353, "DTLSRecord");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_DTLSRecord() : CompositeDataUnit() {

        this->setName("DTLSRecord");
    }



    TStruct_DTLSRecord* newInstance_() const {

        TStruct_DTLSRecord* du = new TStruct_DTLSRecord();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_Type* _M0 = new TEnum_Type();
            this->appendChildRenamed(_M0, "type");

            TEnum_Version* _M1 = new TEnum_Version();
            this->appendChildRenamed(_M1, "version");

            IntegerField* _M2 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M2, "epoch");

            IntegerField* _M3 = new IntegerField(BC(0, 48), false);
            this->appendChildRenamed(_M3, "sequence_number");

            IntegerField* _M4 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M4, "length");

        } else if (len == 5 && decoded >= 5) {

            int _value_type = (*this)[0]->propGet<int>(".value");
            int _value_length = (*this)[4]->propGet<int>(".value");
            if (_value_type == 21) {

                TStruct_Alert* _C_M0 = new TStruct_Alert();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "alert");
            } else if (_value_type == 22) {

                TStruct_DTLSHandshakeMessage* _C_M0 = new TStruct_DTLSHandshakeMessage();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "hsMsg");
            } else {

            OpaqueField* _C_M0 = new OpaqueField(BC(_value_length, 0));
            _C_M0->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_C_M0, "unknown");}
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

        } else if (index == 4) {

            int _value_0 = 0;
            if (true) {
                if ((*this)[5] != 0) {
                    _value_0 = (*this)[5]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[5] != 0) {
                    _value_0 = (*this)[5]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[5] != 0) {
                    _value_0 = (*this)[5]->getLength().byteAligned();
                }
            }
            (*this)[4]->propSet<int>(".value", _value_0);
        }
        return ok;
    }


    std::string getDynamicTypeName_() const {

        DataUnit* du = (*this)[0];
        return (du != 0) ? du->propGetDefault<std::string>(".name", "") : "";
    }
};






class TVector_DTLSMainType : public StreamVectorDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(StreamVectorDataUnit::typeDescriptor(), 354, "DTLSMainType");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TVector_DTLSMainType() : StreamVectorDataUnit() {

        this->setName("DTLSMainType");

        TStruct_DTLSRecord* _T = new TStruct_DTLSRecord();
        this->setElementTemplate(_T);
    }



    TVector_DTLSMainType* newInstance_() const {

        TVector_DTLSMainType* du = new TVector_DTLSMainType();
        return du;
    }
};






class TStruct_ServerHello_extensions : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 355, "ServerHello_extensions");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ServerHello_extensions() : CompositeDataUnit() {

        this->setName("ServerHello_extensions");
    }



    TStruct_ServerHello_extensions* newInstance_() const {

        TStruct_ServerHello_extensions* du = new TStruct_ServerHello_extensions();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            IntegerField* _M0 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M0, "_N");

        } else if (len == 1 && decoded >= 1) {


            int _value__N = (*this)[0]->propGet<int>(".value");
            VectorDataUnit* _M1 = new StreamVectorDataUnit(BC(_value__N, 0));
            TStruct_Extension* _M1_V = new TStruct_Extension();
            _M1->setElementTemplate(_M1_V);
            _M1->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M1, "_V");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

            int _value_0 = 0;
            if ((*this)[1] != 0) {
                _value_0 = (*this)[1]->getLength().byteAligned();
            }
            (*this)[0]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_ServerHello : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 356, "ServerHello");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_ServerHello() : CompositeDataUnit() {

        this->setName("ServerHello");
    }



    TStruct_ServerHello* newInstance_() const {

        TStruct_ServerHello* du = new TStruct_ServerHello();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_Version* _M0 = new TEnum_Version();
            this->appendChildRenamed(_M0, "version");

            OpaqueField* _M1 = new OpaqueField(BC(32, 0));
            this->appendChildRenamed(_M1, "random");

            IntegerField* _M2 = new IntegerField(BC(0, 8), false);
            this->appendChildRenamed(_M2, "session_id_length");

        } else if (len == 3 && decoded >= 3) {


            int _value_session_id_length = (*this)[2]->propGet<int>(".value");
            OpaqueField* _M3 = new OpaqueField(BC(_value_session_id_length, 0));
            _M3->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_M3, "session_id");

            TEnum_CipherSuite* _M4 = new TEnum_CipherSuite();
            this->appendChildRenamed(_M4, "cipher_suite");

            TEnum_CompressionMethod* _M5 = new TEnum_CompressionMethod();
            this->appendChildRenamed(_M5, "compression_method");

            TStruct_ServerHello_extensions* _M6 = new TStruct_ServerHello_extensions();
            this->appendChildRenamed(_M6, "extensions");
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 2) {

            int _value_0 = 0;
            if ((*this)[3] != 0) {
                _value_0 = (*this)[3]->getLength().byteAligned();
            }
            (*this)[2]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_HandshakeMessage : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 357, "HandshakeMessage");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_HandshakeMessage() : CompositeDataUnit() {

        this->setName("HandshakeMessage");
    }



    TStruct_HandshakeMessage* newInstance_() const {

        TStruct_HandshakeMessage* du = new TStruct_HandshakeMessage();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_HandshakeType* _M0 = new TEnum_HandshakeType();
            this->appendChildRenamed(_M0, "type");

            IntegerField* _M1 = new IntegerField(BC(0, 24), false);
            this->appendChildRenamed(_M1, "length");

        } else if (len == 2 && decoded >= 2) {

            int _value_type = (*this)[0]->propGet<int>(".value");
            int _value_length = (*this)[1]->propGet<int>(".value");
            if (_value_type == 1) {

                TStruct_ClientHello* _C_M0 = new TStruct_ClientHello();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "clientHello");
            } else if (_value_type == 2) {

                TStruct_ServerHello* _C_M0 = new TStruct_ServerHello();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "serverHello");
            } else if (_value_type == 11) {

                TStruct_HandshakeMessage_msg__C2_certificates* _C_M0 = new TStruct_HandshakeMessage_msg__C2_certificates();
                this->appendChildRenamed(_C_M0, "certificates");
            } else if (_value_type == 12) {

                TStruct_ServerKeyExchange* _C_M0 = new TStruct_ServerKeyExchange();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "serverKeyExchange");
            } else if (_value_type == 16) {

                TStruct_ClientKeyExchange* _C_M0 = new TStruct_ClientKeyExchange();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "clientKeyExchange");
            } else {

            OpaqueField* _C_M0 = new OpaqueField(BC(_value_length, 0));
            _C_M0->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_C_M0, "unknown");}
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

        } else if (index == 1) {

            int _value_0 = 0;
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {

            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[2] != 0) {
                    _value_0 = (*this)[2]->getLength().byteAligned();
                }
            }
            (*this)[1]->propSet<int>(".value", _value_0);
        }
        return ok;
    }
};






class TStruct_TLSRecord : public CompositeDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(CompositeDataUnit::typeDescriptor(), 358, "TLSRecord");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TStruct_TLSRecord() : CompositeDataUnit() {

        this->setName("TLSRecord");
    }



    TStruct_TLSRecord* newInstance_() const {

        TStruct_TLSRecord* du = new TStruct_TLSRecord();
        return du;
    }


    bool expand_(size_t len, size_t decoded, bool dry, bool ahead) {


        bool complete = false;
        if (len == 0) {


            TEnum_Type* _M0 = new TEnum_Type();
            this->appendChildRenamed(_M0, "type");

            TEnum_Version* _M1 = new TEnum_Version();
            this->appendChildRenamed(_M1, "version");

            IntegerField* _M2 = new IntegerField(BC(0, 16), false);
            this->appendChildRenamed(_M2, "length");

        } else if (len == 3 && decoded >= 3) {

            int _value_type = (*this)[0]->propGet<int>(".value");
            int _value_length = (*this)[2]->propGet<int>(".value");
            if (_value_type == 21) {

                TStruct_Alert* _C_M0 = new TStruct_Alert();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "alert");
            } else if (_value_type == 22) {

                TStruct_HandshakeMessage* _C_M0 = new TStruct_HandshakeMessage();
                _C_M0->propSet<int>("_dynlen", 1);
                _C_M0->dissector().setSize(_value_length);
                this->appendChildRenamed(_C_M0, "hsMsg");
            } else {

            OpaqueField* _C_M0 = new OpaqueField(BC(_value_length, 0));
            _C_M0->propSet<int>("_dynlen", 1);
            this->appendChildRenamed(_C_M0, "unknown");}
            complete = true;

        }
        return complete;
    }


    bool updateMember_(size_t index) {

        bool ok = true;
        if (index == 0) {

        } else if (index == 2) {

            int _value_0 = 0;
            if (true) {
                if ((*this)[3] != 0) {
                    _value_0 = (*this)[3]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[3] != 0) {
                    _value_0 = (*this)[3]->getLength().byteAligned();
                }
            }
            if (true) {
                if ((*this)[3] != 0) {
                    _value_0 = (*this)[3]->getLength().byteAligned();
                }
            }
            (*this)[2]->propSet<int>(".value", _value_0);
        }
        return ok;
    }


    std::string getDynamicTypeName_() const {

        DataUnit* du = (*this)[0];
        return (du != 0) ? du->propGetDefault<std::string>(".name", "") : "";
    }
};






class TVector_MainType : public StreamVectorDataUnit {

    public:



    static inline const TypeDescriptor& typeDescriptor() {

        static const TypeDescriptor desc(StreamVectorDataUnit::typeDescriptor(), 359, "MainType");
        return desc;
    }



    const TypeDescriptor& getTypeDescriptor() const {

        return typeDescriptor();
    }



    TVector_MainType() : StreamVectorDataUnit() {

        this->setName("MainType");

        TStruct_TLSRecord* _T = new TStruct_TLSRecord();
        this->setElementTemplate(_T);
    }



    TVector_MainType* newInstance_() const {

        TVector_MainType* du = new TVector_MainType();
        return du;
    }
};
# 40 "src/generate.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/cryptoman/inc/SHA256.h" 1
# 42 "/home/pany/tls-diff-testing/tls-diff-testing/cryptoman/inc/SHA256.h"
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/cryptoman/inc/MessageDigest.h" 1
# 43 "/home/pany/tls-diff-testing/tls-diff-testing/cryptoman/inc/MessageDigest.h"
class BufferReader;
class BufferWriter;
class BC;
# 54 "/home/pany/tls-diff-testing/tls-diff-testing/cryptoman/inc/MessageDigest.h"
class MessageDigest {

public:


 MessageDigest();


 virtual const BC& getDigestSize() const = 0;


 virtual const BC& getBlockSize() const = 0;



 virtual void reset() = 0;


 virtual void update(const BufferReader& message) = 0;


 virtual void finish(BufferWriter& hash) = 0;



 void digest(const BufferReader& message, BufferWriter& hash);



 virtual ~MessageDigest();

};
# 43 "/home/pany/tls-diff-testing/tls-diff-testing/cryptoman/inc/SHA256.h" 2
# 1 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/sha.h" 1
# 10 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/sha.h"
# 1 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/config.h" 1
# 230 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/config.h"
typedef unsigned char byte;

namespace CryptoPP {

typedef unsigned short word16;
typedef unsigned int word32;





 typedef unsigned long word64;







typedef word64 lword;
const lword LWORD_MAX = 0xffffffffffffffffUL;
# 297 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/config.h"
   typedef word32 hword;
   typedef word64 word;
   typedef __uint128_t dword;
   typedef __uint128_t word128;
# 320 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/config.h"
const unsigned int WORD_SIZE = sizeof(word);
const unsigned int WORD_BITS = WORD_SIZE * 8;

}
# 427 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/config.h"
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wunused-function"
# 11 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/sha.h" 2
# 1 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/iterhash.h" 1



# 1 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h" 1
# 87 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
# 1 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/stdcpp.h" 1
# 10 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/stdcpp.h"
# 1 "/usr/include/c++/5/memory" 1 3
# 46 "/usr/include/c++/5/memory" 3
       
# 47 "/usr/include/c++/5/memory" 3
# 66 "/usr/include/c++/5/memory" 3
# 1 "/usr/include/c++/5/bits/stl_tempbuf.h" 1 3
# 62 "/usr/include/c++/5/bits/stl_tempbuf.h" 3

# 62 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 83 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    pair<_Tp*, ptrdiff_t>
    get_temporary_buffer(ptrdiff_t __len)
    {
      const ptrdiff_t __max =
 __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      if (__len > __max)
 __len = __max;

      while (__len > 0)
 {
   _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp),
       std::nothrow));
   if (__tmp != 0)
     return std::pair<_Tp*, ptrdiff_t>(__tmp, __len);
   __len /= 2;
 }
      return std::pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);
    }
# 110 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    inline void
    return_temporary_buffer(_Tp* __p)
    { ::operator delete(__p, std::nothrow); }







  template<typename _ForwardIterator, typename _Tp>
    class _Temporary_buffer
    {

     

    public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected:
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

    public:

      size_type
      size() const
      { return _M_len; }


      size_type
      requested_size() const
      { return _M_original_len; }


      iterator
      begin()
      { return _M_buffer; }


      iterator
      end()
      { return _M_buffer + _M_len; }





      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);

      ~_Temporary_buffer()
      {
 std::_Destroy(_M_buffer, _M_buffer + _M_len);
 std::return_temporary_buffer(_M_buffer);
      }

    private:

      _Temporary_buffer(const _Temporary_buffer&);

      void
      operator=(const _Temporary_buffer&);
    };


  template<bool>
    struct __uninitialized_construct_buf_dispatch
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer __first, _Pointer __last,
       _ForwardIterator __seed)
        {
   if(__first == __last)
     return;

   _Pointer __cur = __first;
   try
     {
       std::_Construct(std::__addressof(*__first),
         (*__seed));
       _Pointer __prev = __cur;
       ++__cur;
       for(; __cur != __last; ++__cur, ++__prev)
  std::_Construct(std::__addressof(*__cur),
    (*__prev));
       *__seed = (*__prev);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_construct_buf_dispatch<true>
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer, _Pointer, _ForwardIterator) { }
    };
# 229 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
  template<typename _Pointer, typename _ForwardIterator>
    inline void
    __uninitialized_construct_buf(_Pointer __first, _Pointer __last,
      _ForwardIterator __seed)
    {
      typedef typename std::iterator_traits<_Pointer>::value_type
 _ValueType;

      std::__uninitialized_construct_buf_dispatch<
        __has_trivial_constructor(_ValueType)>::
   __ucr(__first, __last, __seed);
    }

  template<typename _ForwardIterator, typename _Tp>
    _Temporary_buffer<_ForwardIterator, _Tp>::
    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)
    : _M_original_len(std::distance(__first, __last)),
      _M_len(0), _M_buffer(0)
    {
      try
 {
   std::pair<pointer, size_type> __p(std::get_temporary_buffer<
         value_type>(_M_original_len));
   _M_buffer = __p.first;
   _M_len = __p.second;
   if (_M_buffer)
     std::__uninitialized_construct_buf(_M_buffer, _M_buffer + _M_len,
            __first);
 }
      catch(...)
 {
   std::return_temporary_buffer(_M_buffer);
   _M_buffer = 0;
   _M_len = 0;
   throw;
 }
    }


}
# 67 "/usr/include/c++/5/memory" 2 3
# 1 "/usr/include/c++/5/bits/stl_raw_storage_iter.h" 1 3
# 59 "/usr/include/c++/5/bits/stl_raw_storage_iter.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{






  template <class _OutputIterator, class _Tp>
    class raw_storage_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _OutputIterator _M_iter;

    public:
      explicit
      raw_storage_iterator(_OutputIterator __x)
      : _M_iter(__x) {}

      raw_storage_iterator&
      operator*() { return *this; }

      raw_storage_iterator&
      operator=(const _Tp& __element)
      {
 std::_Construct(std::__addressof(*_M_iter), __element);
 return *this;
      }

      raw_storage_iterator<_OutputIterator, _Tp>&
      operator++()
      {
 ++_M_iter;
 return *this;
      }

      raw_storage_iterator<_OutputIterator, _Tp>
      operator++(int)
      {
 raw_storage_iterator<_OutputIterator, _Tp> __tmp = *this;
 ++_M_iter;
 return __tmp;
      }
    };


}
# 68 "/usr/include/c++/5/memory" 2 3
# 88 "/usr/include/c++/5/memory" 3
# 1 "/usr/include/c++/5/backward/auto_ptr.h" 1 3
# 36 "/usr/include/c++/5/backward/auto_ptr.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 47 "/usr/include/c++/5/backward/auto_ptr.h" 3
  template<typename _Tp1>
    struct auto_ptr_ref
    {
      _Tp1* _M_ptr;

      explicit
      auto_ptr_ref(_Tp1* __p): _M_ptr(__p) { }
    } ;
# 86 "/usr/include/c++/5/backward/auto_ptr.h" 3
  template<typename _Tp>
    class auto_ptr
    {
    private:
      _Tp* _M_ptr;

    public:

      typedef _Tp element_type;







      explicit
      auto_ptr(element_type* __p = 0) throw() : _M_ptr(__p) { }
# 112 "/usr/include/c++/5/backward/auto_ptr.h" 3
      auto_ptr(auto_ptr& __a) throw() : _M_ptr(__a.release()) { }
# 124 "/usr/include/c++/5/backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr(auto_ptr<_Tp1>& __a) throw() : _M_ptr(__a.release()) { }
# 135 "/usr/include/c++/5/backward/auto_ptr.h" 3
      auto_ptr&
      operator=(auto_ptr& __a) throw()
      {
 reset(__a.release());
 return *this;
      }
# 152 "/usr/include/c++/5/backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr&
        operator=(auto_ptr<_Tp1>& __a) throw()
        {
   reset(__a.release());
   return *this;
 }
# 170 "/usr/include/c++/5/backward/auto_ptr.h" 3
      ~auto_ptr() { delete _M_ptr; }
# 180 "/usr/include/c++/5/backward/auto_ptr.h" 3
      element_type&
      operator*() const throw()
      {
 ;
 return *_M_ptr;
      }







      element_type*
      operator->() const throw()
      {
 ;
 return _M_ptr;
      }
# 210 "/usr/include/c++/5/backward/auto_ptr.h" 3
      element_type*
      get() const throw() { return _M_ptr; }
# 224 "/usr/include/c++/5/backward/auto_ptr.h" 3
      element_type*
      release() throw()
      {
 element_type* __tmp = _M_ptr;
 _M_ptr = 0;
 return __tmp;
      }
# 239 "/usr/include/c++/5/backward/auto_ptr.h" 3
      void
      reset(element_type* __p = 0) throw()
      {
 if (__p != _M_ptr)
   {
     delete _M_ptr;
     _M_ptr = __p;
   }
      }
# 260 "/usr/include/c++/5/backward/auto_ptr.h" 3
      auto_ptr(auto_ptr_ref<element_type> __ref) throw()
      : _M_ptr(__ref._M_ptr) { }

      auto_ptr&
      operator=(auto_ptr_ref<element_type> __ref) throw()
      {
 if (__ref._M_ptr != this->get())
   {
     delete _M_ptr;
     _M_ptr = __ref._M_ptr;
   }
 return *this;
      }

      template<typename _Tp1>
        operator auto_ptr_ref<_Tp1>() throw()
        { return auto_ptr_ref<_Tp1>(this->release()); }

      template<typename _Tp1>
        operator auto_ptr<_Tp1>() throw()
        { return auto_ptr<_Tp1>(this->release()); }
    } ;



  template<>
    class auto_ptr<void>
    {
    public:
      typedef void element_type;
    } ;
# 326 "/usr/include/c++/5/backward/auto_ptr.h" 3

}
# 89 "/usr/include/c++/5/memory" 2 3
# 11 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/stdcpp.h" 2

# 1 "/usr/include/c++/5/typeinfo" 1 3
# 32 "/usr/include/c++/5/typeinfo" 3
       
# 33 "/usr/include/c++/5/typeinfo" 3






#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 80 "/usr/include/c++/5/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const
    { return __name[0] == '*' ? __name + 1 : __name; }
# 115 "/usr/include/c++/5/typeinfo" 3
    bool before(const type_info& __arg) const
    { return (__name[0] == '*' && __arg.__name[0] == '*')
 ? __name < __arg.__name
 : __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const
    {
      return ((__name == __arg.__name)
       || (__name[0] != '*' &&
    __builtin_strcmp (__name, __arg.__name) == 0));
    }
# 136 "/usr/include/c++/5/typeinfo" 3
    bool operator!=(const type_info& __arg) const
    { return !operator==(__arg); }
# 152 "/usr/include/c++/5/typeinfo" 3
    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() throw() { }



    virtual ~bad_cast() throw();


    virtual const char* what() const throw();
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () throw() { }



    virtual ~bad_typeid() throw();


    virtual const char* what() const throw();
  };
}

}

#pragma GCC visibility pop
# 13 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/stdcpp.h" 2
# 1 "/usr/include/c++/5/algorithm" 1 3
# 58 "/usr/include/c++/5/algorithm" 3
       
# 59 "/usr/include/c++/5/algorithm" 3



# 1 "/usr/include/c++/5/bits/stl_algo.h" 1 3
# 59 "/usr/include/c++/5/bits/stl_algo.h" 3
# 1 "/usr/include/c++/5/cstdlib" 1 3
# 39 "/usr/include/c++/5/cstdlib" 3
       
# 40 "/usr/include/c++/5/cstdlib" 3
# 60 "/usr/include/c++/5/bits/stl_algo.h" 2 3
# 1 "/usr/include/c++/5/bits/algorithmfwd.h" 1 3
# 33 "/usr/include/c++/5/bits/algorithmfwd.h" 3
       
# 34 "/usr/include/c++/5/bits/algorithmfwd.h" 3
# 42 "/usr/include/c++/5/bits/algorithmfwd.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 203 "/usr/include/c++/5/bits/algorithmfwd.h" 3
  template<typename _FIter, typename _Tp>
    bool
    binary_search(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    bool
    binary_search(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _IIter, typename _OIter>
    _OIter
    copy(_IIter, _IIter, _OIter);

  template<typename _BIter1, typename _BIter2>
    _BIter2
    copy_backward(_BIter1, _BIter1, _BIter2);
# 232 "/usr/include/c++/5/bits/algorithmfwd.h" 3
  template<typename _FIter, typename _Tp>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _FIter, typename _Tp>
    void
    fill(_FIter, _FIter, const _Tp&);

  template<typename _OIter, typename _Size, typename _Tp>
    _OIter
    fill_n(_OIter, _Size, const _Tp&);



  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);
# 271 "/usr/include/c++/5/bits/algorithmfwd.h" 3
  template<typename _IIter1, typename _IIter2>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _BIter>
    void
    inplace_merge(_BIter, _BIter, _BIter);

  template<typename _BIter, typename _Compare>
    void
    inplace_merge(_BIter, _BIter, _BIter, _Compare);
# 334 "/usr/include/c++/5/bits/algorithmfwd.h" 3
  template<typename _FIter1, typename _FIter2>
    void
    iter_swap(_FIter1, _FIter2);

  template<typename _FIter, typename _Tp>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _RAIter>
    void
    make_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    make_heap(_RAIter, _RAIter, _Compare);

  template<typename _Tp>
   
    const _Tp&
    max(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
   
    const _Tp&
    max(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
   
    const _Tp&
    min(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
   
    const _Tp&
    min(const _Tp&, const _Tp&, _Compare);
# 433 "/usr/include/c++/5/bits/algorithmfwd.h" 3
  template<typename _BIter>
    bool
    next_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    next_permutation(_BIter, _BIter, _Compare);
# 450 "/usr/include/c++/5/bits/algorithmfwd.h" 3
  template<typename _IIter, typename _RAIter>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);

  template<typename _IIter, typename _RAIter, typename _Compare>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);
# 471 "/usr/include/c++/5/bits/algorithmfwd.h" 3
  template<typename _RAIter>
    void
    pop_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    pop_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter>
    bool
    prev_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    prev_permutation(_BIter, _BIter, _Compare);

  template<typename _RAIter>
    void
    push_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    push_heap(_RAIter, _RAIter, _Compare);



  template<typename _FIter, typename _Tp>
    _FIter
    remove(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Predicate>
    _FIter
    remove_if(_FIter, _FIter, _Predicate);

  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    remove_copy(_IIter, _IIter, _OIter, const _Tp&);

  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    remove_copy_if(_IIter, _IIter, _OIter, _Predicate);



  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);

  template<typename _Iter, typename _OIter, typename _Predicate, typename _Tp>
    _OIter
    replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);



  template<typename _BIter>
    void
    reverse(_BIter, _BIter);

  template<typename _BIter, typename _OIter>
    _OIter
    reverse_copy(_BIter, _BIter, _OIter);

  inline namespace _V2
  {
    template<typename _FIter>
      _FIter
      rotate(_FIter, _FIter, _FIter);
  }

  template<typename _FIter, typename _OIter>
    _OIter
    rotate_copy(_FIter, _FIter, _FIter, _OIter);
# 557 "/usr/include/c++/5/bits/algorithmfwd.h" 3
  template<typename _RAIter>
    void
    sort_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    stable_partition(_BIter, _BIter, _Predicate);

  template<typename _Tp>
    void
    swap(_Tp&, _Tp&)




    ;

  template<typename _Tp, size_t _Nm>
    void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])



    ;

  template<typename _FIter1, typename _FIter2>
    _FIter2
    swap_ranges(_FIter1, _FIter1, _FIter2);



  template<typename _FIter>
    _FIter
    unique(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    unique(_FIter, _FIter, _BinaryPredicate);



  template<typename _FIter, typename _Tp>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&, _Compare);





  template<typename _FIter>
    _FIter
    adjacent_find(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    adjacent_find(_FIter, _FIter, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    typename iterator_traits<_IIter>::difference_type
    count(_IIter, _IIter, const _Tp&);

  template<typename _IIter, typename _Predicate>
    typename iterator_traits<_IIter>::difference_type
    count_if(_IIter, _IIter, _Predicate);

  template<typename _IIter1, typename _IIter2>
    bool
    equal(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    bool
    equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    _IIter
    find(_IIter, _IIter, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _IIter, typename _Predicate>
    _IIter
    find_if(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Funct>
    _Funct
    for_each(_IIter, _IIter, _Funct);

  template<typename _FIter, typename _Generator>
    void
    generate(_FIter, _FIter, _Generator);

  template<typename _OIter, typename _Size, typename _Generator>
    _OIter
    generate_n(_OIter, _Size, _Generator);

  template<typename _IIter1, typename _IIter2>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _FIter>
   
    _FIter
    max_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
   
    _FIter
    max_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _FIter>
   
    _FIter
    min_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
   
    _FIter
    min_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _RAIter>
    void
    nth_element(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    nth_element(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    partial_sort(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    partial_sort(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    partition(_BIter, _BIter, _Predicate);

  template<typename _RAIter>
    void
    random_shuffle(_RAIter, _RAIter);

  template<typename _RAIter, typename _Generator>
    void
    random_shuffle(_RAIter, _RAIter,



     _Generator&);


  template<typename _FIter, typename _Tp>
    void
    replace(_FIter, _FIter, const _Tp&, const _Tp&);

  template<typename _FIter, typename _Predicate, typename _Tp>
    void
    replace_if(_FIter, _FIter, _Predicate, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _FIter, typename _Size, typename _Tp>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&);

  template<typename _FIter, typename _Size, typename _Tp,
    typename _BinaryPredicate>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2,
        _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _RAIter>
    void
    sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    stable_sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    stable_sort(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _OIter, typename _UnaryOperation>
    _OIter
    transform(_IIter, _IIter, _OIter, _UnaryOperation);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _BinaryOperation>
    _OIter
    transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);

  template<typename _IIter, typename _OIter>
    _OIter
    unique_copy(_IIter, _IIter, _OIter);

  template<typename _IIter, typename _OIter, typename _BinaryPredicate>
    _OIter
    unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);


}
# 61 "/usr/include/c++/5/bits/stl_algo.h" 2 3
# 1 "/usr/include/c++/5/bits/stl_heap.h" 1 3
# 62 "/usr/include/c++/5/bits/stl_heap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n,
      _Compare __comp)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__comp(__first + __parent, __first + __child))
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }



  template<typename _RandomAccessIterator, typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Distance __n)
    {
      return std::__is_heap_until(__first, __n,
   __gnu_cxx::__ops::__iter_less_iter()) == __n;
    }

  template<typename _RandomAccessIterator, typename _Compare,
    typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
    {
      return std::__is_heap_until(__first, __n,
 __gnu_cxx::__ops::__iter_comp_iter(__comp)) == __n;
    }

  template<typename _RandomAccessIterator>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::__is_heap(__first, std::distance(__first, __last)); }

  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    { return std::__is_heap(__first, __comp, std::distance(__first, __last)); }




  template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
    typename _Compare>
    void
    __push_heap(_RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value,
  _Compare __comp)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 {
   *(__first + __holeIndex) = (*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = (__value);
    }
# 148 "/usr/include/c++/5/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

     
      ;
      ;

      _ValueType __value = (*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), (__value),
         __gnu_cxx::__ops::__iter_less_val());
    }
# 182 "/usr/include/c++/5/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

      ;
      ;

      _ValueType __value = (*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), (__value),
         __gnu_cxx::__ops::__iter_comp_val(__comp));
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (__comp(__first + __secondChild,
       __first + (__secondChild - 1)))
     __secondChild--;
   *(__first + __holeIndex) = (*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = (*(__first + (__secondChild - 1)))
                                  ;
   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex,
         (__value),
         __gnu_cxx::__ops::__iter_comp_val(__comp));
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = (*__result);
      *__result = (*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    (__value), __comp);
    }
# 261 "/usr/include/c++/5/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     
      ;
      ;
      ;

      if (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last,
     __gnu_cxx::__ops::__iter_less_iter());
 }
    }
# 295 "/usr/include/c++/5/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    pop_heap(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {

     

      ;
      ;
      ;

      if (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last,
     __gnu_cxx::__ops::__iter_comp_iter(__comp));
 }
    }

  template<typename _RandomAccessIterator, typename _Compare>
    void
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = (*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, (__value),
        __comp);
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 349 "/usr/include/c++/5/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;

      std::__make_heap(__first, __last,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 374 "/usr/include/c++/5/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {

     

      ;

      std::__make_heap(__first, __last,
         __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _RandomAccessIterator, typename _Compare>
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 408 "/usr/include/c++/5/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      std::__sort_heap(__first, __last,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 434 "/usr/include/c++/5/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {

     

      ;
      ;

      std::__sort_heap(__first, __last,
         __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 529 "/usr/include/c++/5/bits/stl_heap.h" 3

}
# 62 "/usr/include/c++/5/bits/stl_algo.h" 2 3
# 71 "/usr/include/c++/5/bits/stl_algo.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Iterator, typename _Compare>
    void
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
      _Iterator __c, _Compare __comp)
    {
      if (__comp(__a, __b))
 {
   if (__comp(__b, __c))
     std::iter_swap(__result, __b);
   else if (__comp(__a, __c))
     std::iter_swap(__result, __c);
   else
     std::iter_swap(__result, __a);
 }
      else if (__comp(__a, __c))
 std::iter_swap(__result, __a);
      else if (__comp(__b, __c))
 std::iter_swap(__result, __c);
      else
 std::iter_swap(__result, __b);
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !__pred(__first))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (__pred(__first))
     return __first;
   ++__first;
 case 2:
   if (__pred(__first))
     return __first;
   ++__first;
 case 1:
   if (__pred(__first))
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }

  template<typename _Iterator, typename _Predicate>
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
    {
      return __find_if(__first, __last, __pred,
         std::__iterator_category(__first));
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if_not(_InputIterator __first, _InputIterator __last,
    _Predicate __pred)
    {
      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__negate(__pred),
       std::__iterator_category(__first));
    }




  template<typename _InputIterator, typename _Predicate, typename _Distance>
    _InputIterator
    __find_if_not_n(_InputIterator __first, _Distance& __len, _Predicate __pred)
    {
      for (; __len; --__len, ++__first)
 if (!__pred(__first))
   break;
      return __first;
    }
# 202 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __predicate)
    {

      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 return std::__find_if(__first1, __last1,
  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   __first1 =
     std::__find_if(__first1, __last1,
  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));

   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (__predicate(__current, __p))
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }






  template<typename _ForwardIterator, typename _Integer,
    typename _UnaryPredicate>
    _ForwardIterator
    __search_n_aux(_ForwardIterator __first, _ForwardIterator __last,
     _Integer __count, _UnaryPredicate __unary_pred,
     std::forward_iterator_tag)
    {
      __first = std::__find_if(__first, __last, __unary_pred);
      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && __unary_pred(__i))
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = std::__find_if(++__i, __last, __unary_pred);
 }
      return __last;
    }





  template<typename _RandomAccessIter, typename _Integer,
    typename _UnaryPredicate>
    _RandomAccessIter
    __search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last,
     _Integer __count, _UnaryPredicate __unary_pred,
     std::random_access_iterator_tag)
    {
      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      _DistanceType __remainder = __count;

      while (__remainder <= __tailSize)
 {
   __first += __remainder;
   __tailSize -= __remainder;


   _RandomAccessIter __backTrack = __first;
   while (__unary_pred(--__backTrack))
     {
       if (--__remainder == 0)
         return (__first - __count);
     }
   __remainder = __count + 1 - (__first - __backTrack);
 }
      return __last;
    }

  template<typename _ForwardIterator, typename _Integer,
           typename _UnaryPredicate>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count,
        _UnaryPredicate __unary_pred)
    {
      if (__count <= 0)
 return __first;

      if (__count == 1)
 return std::__find_if(__first, __last, __unary_pred);

      return std::__search_n_aux(__first, __last, __count, __unary_pred,
     std::__iterator_category(__first));
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp)
    {
      if (__first2 == __last2)
 return __last1;

      _ForwardIterator1 __result = __last1;
      while (1)
 {
   _ForwardIterator1 __new_result
     = std::__search(__first1, __last1, __first2, __last2, __comp);
   if (__new_result == __last1)
     return __result;
   else
     {
       __result = __new_result;
       __first1 = __new_result;
       ++__first1;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp)
    {

     

     


      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::__search(_RevIterator1(__last1), __rlast1,
           _RevIterator2(__last2), __rlast2,
           __comp);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }
# 423 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 471 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp)
    {

     
     
     


      ;
      ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 636 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    __remove_copy_if(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _Predicate __pred)
    {
      for (; __first != __last; ++__first)
 if (!__pred(__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 665 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    inline _OutputIterator
    remove_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp& __value)
    {

     
     

     

      ;

      return std::__remove_copy_if(__first, __last, __result,
 __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 697 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    inline _OutputIterator
    remove_copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {

     
     

     

      ;

      return std::__remove_copy_if(__first, __last, __result,
       __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 855 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __remove_if(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred)
    {
      __first = std::__find_if(__first, __last, __pred);
      if (__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for (; __first != __last; ++__first)
        if (!__pred(__first))
          {
            *__result = (*__first);
            ++__result;
          }
      return __result;
    }
# 891 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __value)
    {

     

     

      ;

      return std::__remove_if(__first, __last,
  __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 924 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      return std::__remove_if(__first, __last,
         __gnu_cxx::__ops::__pred_iter(__pred));
    }

  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    __adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
      _BinaryPredicate __binary_pred)
    {
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while (++__next != __last)
 {
   if (__binary_pred(__first, __next))
     return __first;
   __first = __next;
 }
      return __last;
    }

  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    __unique(_ForwardIterator __first, _ForwardIterator __last,
      _BinaryPredicate __binary_pred)
    {

      __first = std::__adjacent_find(__first, __last, __binary_pred);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!__binary_pred(__dest, __first))
   *++__dest = (*__first);
      return ++__dest;
    }
# 990 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last)
    {

     

     

      ;

      return std::__unique(__first, __last,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1020 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    inline _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last,
           _BinaryPredicate __binary_pred)
    {

     

     


      ;

      return std::__unique(__first, __last,
      __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }







  template<typename _ForwardIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    forward_iterator_tag, output_iterator_tag)
    {

     



      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!__binary_pred(__first, __next))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, output_iterator_tag)
    {

     



      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      __decltype(__gnu_cxx::__ops::__iter_comp_val(__binary_pred))
 __rebound_pred
 = __gnu_cxx::__ops::__iter_comp_val(__binary_pred);
      *__result = __value;
      while (++__first != __last)
 if (!__rebound_pred(__first, __value))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, forward_iterator_tag)
    {

     


      *__result = *__first;
      while (++__first != __last)
 if (!__binary_pred(__result, __first))
   *++__result = *__first;
      return ++__result;
    }






  template<typename _BidirectionalIterator>
    void
    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {
      while (true)
 if (__first == __last || __first == --__last)
   return;
 else
   {
     std::iter_swap(__first, __last);
     ++__first;
   }
    }






  template<typename _RandomAccessIterator>
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag)
    {
      if (__first == __last)
 return;
      --__last;
      while (__first < __last)
 {
   std::iter_swap(__first, __last);
   ++__first;
   --__last;
 }
    }
# 1175 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline void
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
    {

     

      ;
      std::__reverse(__first, __last, std::__iterator_category(__first));
    }
# 1202 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _OutputIterator>
    _OutputIterator
    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
   _OutputIterator __result)
    {

     

     

      ;

      while (__first != __last)
 {
   --__last;
   *__result = *__last;
   ++__result;
 }
      return __result;
    }





  template<typename _EuclideanRingElement>
    _EuclideanRingElement
    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
    {
      while (__n != 0)
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }

  inline namespace _V2
  {


  template<typename _ForwardIterator>
    _ForwardIterator
    __rotate(_ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag)
    {
      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      _ForwardIterator __first2 = __middle;
      do
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
 }
      while (__first2 != __last);

      _ForwardIterator __ret = __first;

      __first2 = __middle;

      while (__first2 != __last)
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
   else if (__first2 == __last)
     __first2 = __middle;
 }
      return __ret;
    }


  template<typename _BidirectionalIterator>
    _BidirectionalIterator
    __rotate(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {

     


      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      std::__reverse(__first, __middle, bidirectional_iterator_tag());
      std::__reverse(__middle, __last, bidirectional_iterator_tag());

      while (__first != __middle && __middle != __last)
 {
   std::iter_swap(__first, --__last);
   ++__first;
 }

      if (__first == __middle)
 {
   std::__reverse(__middle, __last, bidirectional_iterator_tag());
   return __last;
 }
      else
 {
   std::__reverse(__first, __middle, bidirectional_iterator_tag());
   return __first;
 }
    }


  template<typename _RandomAccessIterator>
    _RandomAccessIterator
    __rotate(_RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag)
    {

     


      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      _Distance __n = __last - __first;
      _Distance __k = __middle - __first;

      if (__k == __n - __k)
 {
   std::swap_ranges(__first, __middle, __middle);
   return __middle;
 }

      _RandomAccessIterator __p = __first;
      _RandomAccessIterator __ret = __first + (__last - __middle);

      for (;;)
 {
   if (__k < __n - __k)
     {
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = (*__p);
    std::copy(__p + 1, __p + __n, __p);
    *(__p + __n - 1) = (__t);
    return __ret;
  }
       _RandomAccessIterator __q = __p + __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    std::iter_swap(__p, __q);
    ++__p;
    ++__q;
  }
       __n %= __k;
       if (__n == 0)
  return __ret;
       std::swap(__n, __k);
       __k = __n - __k;
     }
   else
     {
       __k = __n - __k;
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = (*(__p + __n - 1));
    std::copy_backward(__p, __p + __n - 1, __p + __n);
    *__p = (__t);
    return __ret;
  }
       _RandomAccessIterator __q = __p + __n;
       __p = __q - __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    --__p;
    --__q;
    std::iter_swap(__p, __q);
  }
       __n %= __k;
       if (__n == 0)
  return __ret;
       std::swap(__n, __k);
     }
 }
    }
# 1429 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last)
    {

     

      ;
      ;

      return std::__rotate(__first, __middle, __last,
      std::__iterator_category(__first));
    }

  }
# 1466 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _OutputIterator>
    inline _OutputIterator
    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
                _ForwardIterator __last, _OutputIterator __result)
    {

     
     

      ;
      ;

      return std::copy(__first, __middle,
                       std::copy(__middle, __last, __result));
    }


  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __partition(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred, forward_iterator_tag)
    {
      if (__first == __last)
 return __first;

      while (__pred(*__first))
 if (++__first == __last)
   return __first;

      _ForwardIterator __next = __first;

      while (++__next != __last)
 if (__pred(*__next))
   {
     std::iter_swap(__first, __next);
     ++__first;
   }

      return __first;
    }


  template<typename _BidirectionalIterator, typename _Predicate>
    _BidirectionalIterator
    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred, bidirectional_iterator_tag)
    {
      while (true)
 {
   while (true)
     if (__first == __last)
       return __first;
     else if (__pred(*__first))
       ++__first;
     else
       break;
   --__last;
   while (true)
     if (__first == __last)
       return __first;
     else if (!bool(__pred(*__last)))
       --__last;
     else
       break;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }
# 1543 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance>
    _ForwardIterator
    __stable_partition_adaptive(_ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size)
    {
      if (__len == 1)
 return __first;

      if (__len <= __buffer_size)
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;




   *__result2 = (*__first);
   ++__result2;
   ++__first;
   for (; __first != __last; ++__first)
     if (__pred(__first))
       {
  *__result1 = (*__first);
  ++__result1;
       }
     else
       {
  *__result2 = (*__first);
  ++__result2;
       }

   std::copy(__buffer, __result2, __result1);
   return __result1;
 }

      _ForwardIterator __middle = __first;
      std::advance(__middle, __len / 2);
      _ForwardIterator __left_split =
 std::__stable_partition_adaptive(__first, __middle, __pred,
      __len / 2, __buffer,
      __buffer_size);



      _Distance __right_len = __len - __len / 2;
      _ForwardIterator __right_split =
 std::__find_if_not_n(__middle, __right_len, __pred);

      if (__right_len)
 __right_split =
   std::__stable_partition_adaptive(__right_split, __last, __pred,
        __right_len,
        __buffer, __buffer_size);

      std::rotate(__left_split, __middle, __right_split);
      std::advance(__left_split, std::distance(__middle, __right_split));
      return __left_split;
    }

  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __stable_partition(_ForwardIterator __first, _ForwardIterator __last,
         _Predicate __pred)
    {
      __first = std::__find_if_not(__first, __last, __pred);

      if (__first == __last)
 return __first;

      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _Temporary_buffer<_ForwardIterator, _ValueType> __buf(__first, __last);
      return
 std::__stable_partition_adaptive(__first, __last, __pred,
      _DistanceType(__buf.requested_size()),
      __buf.begin(),
      _DistanceType(__buf.size()));
    }
# 1646 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    stable_partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      return std::__stable_partition(__first, __last,
         __gnu_cxx::__ops::__pred_iter(__pred));
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last, _Compare __comp)
    {
      std::__make_heap(__first, __middle, __comp);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (__comp(__i, __first))
   std::__pop_heap(__first, __middle, __i, __comp);
    }



  template<typename _InputIterator, typename _RandomAccessIterator,
    typename _Compare>
    _RandomAccessIterator
    __partial_sort_copy(_InputIterator __first, _InputIterator __last,
   _RandomAccessIterator __result_first,
   _RandomAccessIterator __result_last,
   _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef iterator_traits<_RandomAccessIterator> _RItTraits;
      typedef typename _RItTraits::difference_type _DistanceType;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while (__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }

      std::__make_heap(__result_first, __result_real_last, __comp);
      while (__first != __last)
 {
   if (__comp(__first, __result_first))
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first), __comp);
   ++__first;
 }
      std::__sort_heap(__result_first, __result_real_last, __comp);
      return __result_real_last;
    }
# 1732 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator>
    inline _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;


     
     

     

     
      ;
      ;

      return std::__partial_sort_copy(__first, __last,
          __result_first, __result_last,
          __gnu_cxx::__ops::__iter_less_iter());
    }
# 1780 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator,
    typename _Compare>
    inline _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;


     
     

     

     

     

      ;
      ;

      return std::__partial_sort_copy(__first, __last,
          __result_first, __result_last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
         _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = (*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, __next))
 {
   *__last = (*__next);
   __last = __next;
   --__next;
 }
      *__last = (__val);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (__comp(__i, __first))
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = (*__i);
       std::copy_backward(__first, __i, __i + 1);
       *__first = (__val);
     }
   else
     std::__unguarded_linear_insert(__i,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp)
    {
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }





  enum { _S_threshold = 16 };


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
       __comp);
 }
      else
 std::__insertion_sort(__first, __last, __comp);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last,
     _RandomAccessIterator __pivot, _Compare __comp)
    {
      while (true)
 {
   while (__comp(__first, __pivot))
     ++__first;
   --__last;
   while (__comp(__pivot, __last))
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last, _Compare __comp)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
      __comp);
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __partial_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __middle,
     _RandomAccessIterator __last,
     _Compare __comp)
    {
      std::__heap_select(__first, __middle, __last, __comp);
      std::__sort_heap(__first, __middle, __comp);
    }


  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::__partial_sort(__first, __last, __last, __comp);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   __last = __cut;
 }
    }



  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {
      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2,
    __comp);
   std::__final_insertion_sort(__first, __last, __comp);
 }
    }

  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit,
    _Compare __comp)
    {
      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last, __comp);

       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last, __comp);
    }
# 2016 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;


     
     

     
                    ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_comp_val(__comp));
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __upper_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__val, __middle))
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2073 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;


     
     
      ;

      return std::__upper_bound(__first, __last, __val,
    __gnu_cxx::__ops::__val_less_iter());
    }
# 2105 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;


     
     

     
                    ;

      return std::__upper_bound(__first, __last, __val,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Tp,
    typename _CompareItTp, typename _CompareTpIt>
    pair<_ForwardIterator, _ForwardIterator>
    __equal_range(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val,
    _CompareItTp __comp_it_val, _CompareTpIt __comp_val_it)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp_it_val(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__comp_val_it(__val, __middle))
     __len = __half;
   else
     {
       _ForwardIterator __left
  = std::__lower_bound(__first, __middle, __val, __comp_it_val);
       std::advance(__first, __len);
       _ForwardIterator __right
  = std::__upper_bound(++__middle, __first, __val, __comp_val_it);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2179 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;


     
     
     
      ;
      ;

      return std::__equal_range(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val(),
    __gnu_cxx::__ops::__val_less_iter());
    }
# 2216 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    inline pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;


     
     

     

     
                    ;
     
                    ;

      return std::__equal_range(__first, __last, __val,
    __gnu_cxx::__ops::__iter_comp_val(__comp),
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }
# 2252 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;


     
     
      ;
      ;

      _ForwardIterator __i
 = std::__lower_bound(__first, __last, __val,
        __gnu_cxx::__ops::__iter_less_val());
      return __i != __last && !(__val < *__i);
    }
# 2287 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;


     
     

     
                    ;
     
                    ;

      _ForwardIterator __i
 = std::__lower_bound(__first, __last, __val,
        __gnu_cxx::__ops::__iter_comp_val(__comp));
      return __i != __last && !bool(__comp(__val, *__i));
    }




  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = (*__first2);
       ++__first2;
     }
   else
     {
       *__result = (*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::copy(__first1, __last1, __result);
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp)
    {
      if (__first1 == __last1)
 {
   std::copy_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (__comp(__last2, __last1))
     {
       *--__result = (*__last1);
       if (__first1 == __last1)
  {
    std::copy_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = (*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance>
    _BidirectionalIterator1
    __rotate_adaptive(_BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size)
    {
      _BidirectionalIterator2 __buffer_end;
      if (__len1 > __len2 && __len2 <= __buffer_size)
 {
   if (__len2)
     {
       __buffer_end = std::copy(__middle, __last, __buffer);
       std::copy_backward(__first, __middle, __last);
       return std::copy(__buffer, __buffer_end, __first);
     }
   else
     return __first;
 }
      else if (__len1 <= __buffer_size)
 {
   if (__len1)
     {
       __buffer_end = std::copy(__first, __middle, __buffer);
       std::copy(__middle, __last, __first);
       return std::copy_backward(__buffer, __buffer_end, __last);
     }
   else
     return __last;
 }
      else
 {
   std::rotate(__first, __middle, __last);
   std::advance(__first, std::distance(__middle, __last));
   return __first;
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first, __comp);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last, __comp);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut
  = std::__lower_bound(__middle, __last, *__first_cut,
         __gnu_cxx::__ops::__iter_comp_val(__comp));
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut
  = std::__upper_bound(__first, __middle, *__second_cut,
         __gnu_cxx::__ops::__val_comp_iter(__comp));
       __len11 = std::distance(__first, __first_cut);
     }

   _BidirectionalIterator __new_middle
     = std::__rotate_adaptive(__first_cut, __middle, __second_cut,
         __len1 - __len11, __len22, __buffer,
         __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size, __comp);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer,
    __buffer_size, __comp);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Compare>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
                           _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp)
    {
      if (__len1 == 0 || __len2 == 0)
 return;

      if (__len1 + __len2 == 2)
 {
   if (__comp(__middle, __first))
     std::iter_swap(__first, __middle);
   return;
 }

      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut
     = std::__lower_bound(__middle, __last, *__first_cut,
     __gnu_cxx::__ops::__iter_comp_val(__comp));
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut
     = std::__upper_bound(__first, __middle, *__second_cut,
     __gnu_cxx::__ops::__val_comp_iter(__comp));
   __len11 = std::distance(__first, __first_cut);
 }

      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22, __comp);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp);
    }

  template<typename _BidirectionalIterator, typename _Compare>
    void
    __inplace_merge(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Compare __comp)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;

      if (__first == __middle || __middle == __last)
 return;

      const _DistanceType __len1 = std::distance(__first, __middle);
      const _DistanceType __len2 = std::distance(__middle, __last);

      typedef _Temporary_buffer<_BidirectionalIterator, _ValueType> _TmpBuf;
      _TmpBuf __buf(__first, __last);

      if (__buf.begin() == 0)
 std::__merge_without_buffer
   (__first, __middle, __last, __len1, __len2, __comp);
      else
 std::__merge_adaptive
   (__first, __middle, __last, __len1, __len2, __buf.begin(),
    _DistanceType(__buf.size()), __comp);
    }
# 2584 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last)
    {

     

     

      ;
      ;

      std::__inplace_merge(__first, __middle, __last,
      __gnu_cxx::__ops::__iter_less_iter());
    }
# 2624 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    inline void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp)
    {

     

     


      ;
      ;

      std::__inplace_merge(__first, __middle, __last,
      __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }



  template<typename _InputIterator, typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __move_merge(_InputIterator __first1, _InputIterator __last1,
   _InputIterator __first2, _InputIterator __last2,
   _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = (*__first2);
       ++__first2;
     }
   else
     {
       *__result = (*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1, __result))

                  ;
    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step,
           __result, __comp);
   __first += __two_step;
 }
      __step_size = std::min(_Distance(__last - __first), __step_size);

      std::__move_merge(__first, __first + __step_size,
   __first + __step_size, __last, __result, __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size, __comp);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last, __comp);
    }

  enum { _S_chunk_size = 7 };

  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size, __comp);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer,
     __step_size, __comp);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first,
     __step_size, __comp);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size,
                           _Compare __comp)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle, __buffer,
          __buffer_size, __comp);
   std::__stable_sort_adaptive(__middle, __last, __buffer,
          __buffer_size, __comp);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
   std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size,
       __comp);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last, __comp);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle, __comp);
      std::__inplace_stable_sort(__middle, __last, __comp);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp);
    }
# 2795 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    bool
    __includes(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first2, __first1))
   return false;
 else if (__comp(__first1, __first2))
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 2831 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {

     
     
     


     


      ;
      ;

      return std::__includes(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 2873 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    inline bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _Compare __comp)
    {

     
     
     


     


      ;
      ;

      return std::__includes(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 2906 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    __next_permutation(_BidirectionalIterator __first,
         _BidirectionalIterator __last, _Compare __comp)
    {
      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(__i, __ii))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(__i, --__j))
  {}
       std::iter_swap(__i, __j);
       std::__reverse(__ii, __last,
        std::__iterator_category(__first));
       return true;
     }
   if (__i == __first)
     {
       std::__reverse(__first, __last,
        std::__iterator_category(__first));
       return false;
     }
 }
    }
# 2955 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {

     

     

      ;

      return std::__next_permutation
 (__first, __last, __gnu_cxx::__ops::__iter_less_iter());
    }
# 2986 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    inline bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {

     

     


      ;

      return std::__next_permutation
 (__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _BidirectionalIterator, typename _Compare>
    bool
    __prev_permutation(_BidirectionalIterator __first,
         _BidirectionalIterator __last, _Compare __comp)
    {
      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(__ii, __i))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(--__j, __i))
  {}
       std::iter_swap(__i, __j);
       std::__reverse(__ii, __last,
        std::__iterator_category(__first));
       return true;
     }
   if (__i == __first)
     {
       std::__reverse(__first, __last,
        std::__iterator_category(__first));
       return false;
     }
 }
    }
# 3053 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {

     

     

      ;

      return std::__prev_permutation(__first, __last,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 3084 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    inline bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {

     

     


      ;

      return std::__prev_permutation(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }




  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    _OutputIterator
    __replace_copy_if(_InputIterator __first, _InputIterator __last,
        _OutputIterator __result,
        _Predicate __pred, const _Tp& __new_value)
    {
      for (; __first != __last; ++__first, ++__result)
 if (__pred(__first))
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 3133 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    inline _OutputIterator
    replace_copy(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp& __old_value, const _Tp& __new_value)
    {

     
     

     

      ;

      return std::__replace_copy_if(__first, __last, __result,
   __gnu_cxx::__ops::__iter_equals_val(__old_value),
           __new_value);
    }
# 3167 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    inline _OutputIterator
    replace_copy_if(_InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp& __new_value)
    {

     
     

     

      ;

      return std::__replace_copy_if(__first, __last, __result,
    __gnu_cxx::__ops::__pred_iter(__pred),
           __new_value);
    }

  template<typename _InputIterator, typename _Predicate>
    typename iterator_traits<_InputIterator>::difference_type
    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (__pred(__first))
   ++__n;
      return __n;
    }
# 3743 "/usr/include/c++/5/bits/stl_algo.h" 3



# 3759 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Function>
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
    {

     
      ;
      for (; __first != __last; ++__first)
 __f(*__first);
      return (__f);
    }
# 3780 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
  const _Tp& __val)
    {

     
     

      ;
      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__iter_equals_val(__val));
    }
# 3804 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {

     
     

      ;

      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 3835 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2)
    {

     
     
     


      ;
      ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (*__first1 == *__iter)
     return __first1;
      return __last1;
    }
# 3875 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp)
    {

     
     
     


      ;
      ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (__comp(*__first1, *__iter))
     return __first1;
      return __last1;
    }
# 3907 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;

      return std::__adjacent_find(__first, __last,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 3932 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    inline _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {

     
     


      ;

      return std::__adjacent_find(__first, __last,
   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }
# 3957 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    inline typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
    {

     
     

      ;

      return std::__count_if(__first, __last,
        __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 3980 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline typename iterator_traits<_InputIterator>::difference_type
    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {

     
     

      ;

      return std::__count_if(__first, __last,
        __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 4020 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__search(__first1, __last1, __first2, __last2,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 4059 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate)
    {

     
     
     


      ;
      ;

      return std::__search(__first1, __last1, __first2, __last2,
      __gnu_cxx::__ops::__iter_comp_iter(__predicate));
    }
# 4094 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    inline _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val)
    {

     
     

      ;

      return std::__search_n(__first, __last, __count,
        __gnu_cxx::__ops::__iter_equals_val(__val));
    }
# 4127 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    inline _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val,
      _BinaryPredicate __binary_pred)
    {

     
     

      ;

      return std::__search_n(__first, __last, __count,
  __gnu_cxx::__ops::__iter_comp_val(__binary_pred, __val));
    }
# 4161 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation>
    _OutputIterator
    transform(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op)
    {

     
     


      ;

      for (; __first != __last; ++__first, ++__result)
 *__result = __unary_op(*__first);
      return __result;
    }
# 4198 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation>
    _OutputIterator
    transform(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op)
    {

     
     
     


      ;

      for (; __first1 != __last1; ++__first1, ++__first2, ++__result)
 *__result = __binary_op(*__first1, *__first2);
      return __result;
    }
# 4231 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    void
    replace(_ForwardIterator __first, _ForwardIterator __last,
     const _Tp& __old_value, const _Tp& __new_value)
    {

     

     

     

      ;

      for (; __first != __last; ++__first)
 if (*__first == __old_value)
   *__first = __new_value;
    }
# 4263 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate, typename _Tp>
    void
    replace_if(_ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp& __new_value)
    {

     

     

     

      ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   *__first = __new_value;
    }
# 4295 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Generator>
    void
    generate(_ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen)
    {

     
     

      ;

      for (; __first != __last; ++__first)
 *__first = __gen();
    }
# 4326 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _OutputIterator, typename _Size, typename _Generator>
    _OutputIterator
    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
    {

     



      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __gen();
      return __first;
    }
# 4362 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {

     
     

     

      ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
    __gnu_cxx::__ops::__iter_equal_to_iter(),
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4402 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred)
    {

     
     

      ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred),
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4434 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

      ;

      if (__first != __last)
 for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   {

     _RandomAccessIterator __j = __first
     + std::rand() % ((__i - __first) + 1);
     if (__i != __j)
       std::iter_swap(__i, __j);
   }
    }
# 4468 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _RandomNumberGenerator>
    void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,



     _RandomNumberGenerator& __rand)

    {

     

      ;

      if (__first == __last)
 return;
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   _RandomAccessIterator __j = __first + __rand((__i - __first) + 1);
   if (__i != __j)
     std::iter_swap(__i, __j);
 }
    }
# 4508 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      return std::__partition(__first, __last, __pred,
         std::__iterator_category(__first));
    }
# 4541 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      std::__partial_sort(__first, __middle, __last,
     __gnu_cxx::__ops::__iter_less_iter());
    }
# 4578 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp)
    {

     

     


      ;
      ;

      std::__partial_sort(__first, __middle, __last,
     __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 4613 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 4651 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last, _Compare __comp)
    {

     

     


      ;
      ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 4687 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
    }
# 4716 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {

     

     


      ;

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    __merge(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 4776 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {

     
     
     

     

     


      ;
      ;

      return std::__merge(__first1, __last1,
         __first2, __last2, __result,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 4824 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {

     
     
     

     

     


      ;
      ;

      return std::__merge(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      typedef _Temporary_buffer<_RandomAccessIterator, _ValueType> _TmpBuf;
      _TmpBuf __buf(__first, __last);

      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last, __comp);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()), __comp);
    }
# 4886 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;

      std::__stable_sort(__first, __last,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 4919 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {

     

     


      ;

      std::__stable_sort(__first, __last,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_union(_InputIterator1 __first1, _InputIterator1 __last1,
  _InputIterator2 __first2, _InputIterator2 __last2,
  _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first1, __first2))
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (__comp(__first2, __first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 4986 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {

     
     
     

     

     


     


      ;
      ;

      return std::__set_union(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5033 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {

     
     
     

     

     


     


      ;
      ;

      return std::__set_union(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
         _InputIterator2 __first2, _InputIterator2 __last2,
         _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   ++__first1;
 else if (__comp(__first2, __first1))
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5101 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {

     
     
     

     


     


      ;
      ;

      return std::__set_intersection(__first1, __last1,
         __first2, __last2, __result,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 5147 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {

     
     
     

     


     


      ;
      ;

      return std::__set_intersection(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(__first2, __first1))
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 5217 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {

     
     
     

     


     


      ;
      ;

      return std::__set_difference(__first1, __last1,
       __first2, __last2, __result,
       __gnu_cxx::__ops::__iter_less_iter());
    }
# 5265 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {

     
     
     

     


     


      ;
      ;

      return std::__set_difference(__first1, __last1,
       __first2, __last2, __result,
       __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_symmetric_difference(_InputIterator1 __first1,
          _InputIterator1 __last1,
          _InputIterator2 __first2,
          _InputIterator2 __last2,
          _OutputIterator __result,
          _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(__first2, __first1))
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 5341 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result)
    {

     
     
     

     

     


     


      ;
      ;

      return std::__set_symmetric_difference(__first1, __last1,
     __first2, __last2, __result,
     __gnu_cxx::__ops::__iter_less_iter());
    }
# 5389 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp)
    {

     
     
     

     

     


     


      ;
      ;

      return std::__set_symmetric_difference(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Compare>
   
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
    _Compare __comp)
    {
      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(__first, __result))
   __result = __first;
      return __result;
    }
# 5440 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
   
    _ForwardIterator
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;

      return std::__min_element(__first, __last,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5464 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
   
    inline _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {

     
     


      ;

      return std::__min_element(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Compare>
   
    _ForwardIterator
    __max_element(_ForwardIterator __first, _ForwardIterator __last,
    _Compare __comp)
    {
      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(__result, __first))
   __result = __first;
      return __result;
    }
# 5502 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
   
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;

      return std::__max_element(__first, __last,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5526 "/usr/include/c++/5/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
   
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {

     
     


      ;

      return std::__max_element(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }


}
# 63 "/usr/include/c++/5/algorithm" 2 3
# 14 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/stdcpp.h" 2
# 1 "/usr/include/c++/5/functional" 1 3
# 46 "/usr/include/c++/5/functional" 3
       
# 47 "/usr/include/c++/5/functional" 3
# 15 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/stdcpp.h" 2


# 1 "/usr/include/c++/5/limits" 1 3
# 40 "/usr/include/c++/5/limits" 3
       
# 41 "/usr/include/c++/5/limits" 3
# 158 "/usr/include/c++/5/limits" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 202 "/usr/include/c++/5/limits" 3
  struct __numeric_limits_base
  {


    static const bool is_specialized = false;




    static const int digits = 0;


    static const int digits10 = 0;
# 223 "/usr/include/c++/5/limits" 3
    static const bool is_signed = false;


    static const bool is_integer = false;




    static const bool is_exact = false;



    static const int radix = 0;



    static const int min_exponent = 0;



    static const int min_exponent10 = 0;




    static const int max_exponent = 0;



    static const int max_exponent10 = 0;


    static const bool has_infinity = false;



    static const bool has_quiet_NaN = false;



    static const bool has_signaling_NaN = false;


    static const float_denorm_style has_denorm = denorm_absent;



    static const bool has_denorm_loss = false;



    static const bool is_iec559 = false;




    static const bool is_bounded = false;
# 288 "/usr/include/c++/5/limits" 3
    static const bool is_modulo = false;


    static const bool traps = false;


    static const bool tinyness_before = false;




    static const float_round_style round_style =
          round_toward_zero;
  };
# 314 "/usr/include/c++/5/limits" 3
  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static _Tp
      min() throw() { return _Tp(); }


      static _Tp
      max() throw() { return _Tp(); }
# 335 "/usr/include/c++/5/limits" 3
      static _Tp
      epsilon() throw() { return _Tp(); }


      static _Tp
      round_error() throw() { return _Tp(); }


      static _Tp
      infinity() throw() { return _Tp(); }



      static _Tp
      quiet_NaN() throw() { return _Tp(); }



      static _Tp
      signaling_NaN() throw() { return _Tp(); }




      static _Tp
      denorm_min() throw() { return _Tp(); }
    };
# 381 "/usr/include/c++/5/limits" 3
  template<>
    struct numeric_limits<bool>
    {
      static const bool is_specialized = true;

      static bool
      min() throw() { return false; }

      static bool
      max() throw() { return true; }





      static const int digits = 1;
      static const int digits10 = 0;



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static bool
      epsilon() throw() { return false; }

      static bool
      round_error() throw() { return false; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static bool
      infinity() throw() { return false; }

      static bool
      quiet_NaN() throw() { return false; }

      static bool
      signaling_NaN() throw() { return false; }

      static bool
      denorm_min() throw() { return false; }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;




      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static const bool is_specialized = true;

      static char
      min() throw() { return (((char)(-1) < 0) ? -(((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0) - 1 : (char)0); }

      static char
      max() throw() { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }






      static const int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static const int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = ((char)(-1) < 0);
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static char
      epsilon() throw() { return 0; }

      static char
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static
      char infinity() throw() { return char(); }

      static char
      quiet_NaN() throw() { return char(); }

      static char
      signaling_NaN() throw() { return char(); }

      static char
      denorm_min() throw() { return static_cast<char>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = !is_signed;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static const bool is_specialized = true;

      static signed char
      min() throw() { return -0x7f - 1; }

      static signed char
      max() throw() { return 0x7f; }






      static const int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static const int digits10
       = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static signed char
      epsilon() throw() { return 0; }

      static signed char
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static signed char
      infinity() throw() { return static_cast<signed char>(0); }

      static signed char
      quiet_NaN() throw() { return static_cast<signed char>(0); }

      static signed char
      signaling_NaN() throw()
      { return static_cast<signed char>(0); }

      static signed char
      denorm_min() throw()
      { return static_cast<signed char>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static const bool is_specialized = true;

      static unsigned char
      min() throw() { return 0; }

      static unsigned char
      max() throw() { return 0x7f * 2U + 1; }






      static const int digits
       = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned char
      epsilon() throw() { return 0; }

      static unsigned char
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned char
      infinity() throw()
      { return static_cast<unsigned char>(0); }

      static unsigned char
      quiet_NaN() throw()
      { return static_cast<unsigned char>(0); }

      static unsigned char
      signaling_NaN() throw()
      { return static_cast<unsigned char>(0); }

      static unsigned char
      denorm_min() throw()
      { return static_cast<unsigned char>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static const bool is_specialized = true;

      static wchar_t
      min() throw() { return (((wchar_t)(-1) < 0) ? -(((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0) - 1 : (wchar_t)0); }

      static wchar_t
      max() throw() { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }






      static const int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static const int digits10
       = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = ((wchar_t)(-1) < 0);
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static wchar_t
      epsilon() throw() { return 0; }

      static wchar_t
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static wchar_t
      infinity() throw() { return wchar_t(); }

      static wchar_t
      quiet_NaN() throw() { return wchar_t(); }

      static wchar_t
      signaling_NaN() throw() { return wchar_t(); }

      static wchar_t
      denorm_min() throw() { return wchar_t(); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = !is_signed;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };
# 852 "/usr/include/c++/5/limits" 3
  template<>
    struct numeric_limits<short>
    {
      static const bool is_specialized = true;

      static short
      min() throw() { return -0x7fff - 1; }

      static short
      max() throw() { return 0x7fff; }






      static const int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static const int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static short
      epsilon() throw() { return 0; }

      static short
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static short
      infinity() throw() { return short(); }

      static short
      quiet_NaN() throw() { return short(); }

      static short
      signaling_NaN() throw() { return short(); }

      static short
      denorm_min() throw() { return short(); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static const bool is_specialized = true;

      static unsigned short
      min() throw() { return 0; }

      static unsigned short
      max() throw() { return 0x7fff * 2U + 1; }






      static const int digits
       = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned short
      epsilon() throw() { return 0; }

      static unsigned short
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned short
      infinity() throw()
      { return static_cast<unsigned short>(0); }

      static unsigned short
      quiet_NaN() throw()
      { return static_cast<unsigned short>(0); }

      static unsigned short
      signaling_NaN() throw()
      { return static_cast<unsigned short>(0); }

      static unsigned short
      denorm_min() throw()
      { return static_cast<unsigned short>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static const bool is_specialized = true;

      static int
      min() throw() { return -0x7fffffff - 1; }

      static int
      max() throw() { return 0x7fffffff; }






      static const int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static const int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static int
      epsilon() throw() { return 0; }

      static int
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static int
      infinity() throw() { return static_cast<int>(0); }

      static int
      quiet_NaN() throw() { return static_cast<int>(0); }

      static int
      signaling_NaN() throw() { return static_cast<int>(0); }

      static int
      denorm_min() throw() { return static_cast<int>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static const bool is_specialized = true;

      static unsigned int
      min() throw() { return 0; }

      static unsigned int
      max() throw() { return 0x7fffffff * 2U + 1; }






      static const int digits
       = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned int
      epsilon() throw() { return 0; }

      static unsigned int
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned int
      infinity() throw() { return static_cast<unsigned int>(0); }

      static unsigned int
      quiet_NaN() throw()
      { return static_cast<unsigned int>(0); }

      static unsigned int
      signaling_NaN() throw()
      { return static_cast<unsigned int>(0); }

      static unsigned int
      denorm_min() throw()
      { return static_cast<unsigned int>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static const bool is_specialized = true;

      static long
      min() throw() { return -0x7fffffffffffffffL - 1; }

      static long
      max() throw() { return 0x7fffffffffffffffL; }






      static const int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static const int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static long
      epsilon() throw() { return 0; }

      static long
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static long
      infinity() throw() { return static_cast<long>(0); }

      static long
      quiet_NaN() throw() { return static_cast<long>(0); }

      static long
      signaling_NaN() throw() { return static_cast<long>(0); }

      static long
      denorm_min() throw() { return static_cast<long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static const bool is_specialized = true;

      static unsigned long
      min() throw() { return 0; }

      static unsigned long
      max() throw() { return 0x7fffffffffffffffL * 2UL + 1; }






      static const int digits
       = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned long
      epsilon() throw() { return 0; }

      static unsigned long
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned long
      infinity() throw()
      { return static_cast<unsigned long>(0); }

      static unsigned long
      quiet_NaN() throw()
      { return static_cast<unsigned long>(0); }

      static unsigned long
      signaling_NaN() throw()
      { return static_cast<unsigned long>(0); }

      static unsigned long
      denorm_min() throw()
      { return static_cast<unsigned long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static const bool is_specialized = true;

      static long long
      min() throw() { return -0x7fffffffffffffffLL - 1; }

      static long long
      max() throw() { return 0x7fffffffffffffffLL; }






      static const int digits
       = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static const int digits10
       = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static long long
      epsilon() throw() { return 0; }

      static long long
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static long long
      infinity() throw() { return static_cast<long long>(0); }

      static long long
      quiet_NaN() throw() { return static_cast<long long>(0); }

      static long long
      signaling_NaN() throw()
      { return static_cast<long long>(0); }

      static long long
      denorm_min() throw() { return static_cast<long long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static const bool is_specialized = true;

      static unsigned long long
      min() throw() { return 0; }

      static unsigned long long
      max() throw() { return 0x7fffffffffffffffLL * 2ULL + 1; }






      static const int digits
       = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned long long
      epsilon() throw() { return 0; }

      static unsigned long long
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned long long
      infinity() throw()
      { return static_cast<unsigned long long>(0); }

      static unsigned long long
      quiet_NaN() throw()
      { return static_cast<unsigned long long>(0); }

      static unsigned long long
      signaling_NaN() throw()
      { return static_cast<unsigned long long>(0); }

      static unsigned long long
      denorm_min() throw()
      { return static_cast<unsigned long long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };
# 1569 "/usr/include/c++/5/limits" 3
  template<> struct numeric_limits<__int128> { static const bool is_specialized = true; static __int128 min() throw() { return (((__int128)(-1) < 0) ? -(((__int128)(-1) < 0) ? (((((__int128)1 << ((128 - ((__int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(__int128)0) - 1 : (__int128)0); } static __int128 max() throw() { return (((__int128)(-1) < 0) ? (((((__int128)1 << ((128 - ((__int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(__int128)0); } static const int digits = 128 - 1; static const int digits10 = (128 - 1) * 643L / 2136; static const bool is_signed = true; static const bool is_integer = true; static const bool is_exact = true; static const int radix = 2; static __int128 epsilon() throw() { return 0; } static __int128 round_error() throw() { return 0; } static const int min_exponent = 0; static const int min_exponent10 = 0; static const int max_exponent = 0; static const int max_exponent10 = 0; static const bool has_infinity = false; static const bool has_quiet_NaN = false; static const bool has_signaling_NaN = false; static const float_denorm_style has_denorm = denorm_absent; static const bool has_denorm_loss = false; static __int128 infinity() throw() { return static_cast<__int128>(0); } static __int128 quiet_NaN() throw() { return static_cast<__int128>(0); } static __int128 signaling_NaN() throw() { return static_cast<__int128>(0); } static __int128 denorm_min() throw() { return static_cast<__int128>(0); } static const bool is_iec559 = false; static const bool is_bounded = true; static const bool is_modulo = false; static const bool traps = true; static const bool tinyness_before = false; static const float_round_style round_style = round_toward_zero; }; template<> struct numeric_limits<unsigned __int128> { static const bool is_specialized = true; static unsigned __int128 min() throw() { return 0; } static unsigned __int128 max() throw() { return (((unsigned __int128)(-1) < 0) ? (((((unsigned __int128)1 << ((128 - ((unsigned __int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(unsigned __int128)0); } static const int digits = 128; static const int digits10 = 128 * 643L / 2136; static const bool is_signed = false; static const bool is_integer = true; static const bool is_exact = true; static const int radix = 2; static unsigned __int128 epsilon() throw() { return 0; } static unsigned __int128 round_error() throw() { return 0; } static const int min_exponent = 0; static const int min_exponent10 = 0; static const int max_exponent = 0; static const int max_exponent10 = 0; static const bool has_infinity = false; static const bool has_quiet_NaN = false; static const bool has_signaling_NaN = false; static const float_denorm_style has_denorm = denorm_absent; static const bool has_denorm_loss = false; static unsigned __int128 infinity() throw() { return static_cast<unsigned __int128>(0); } static unsigned __int128 quiet_NaN() throw() { return static_cast<unsigned __int128>(0); } static unsigned __int128 signaling_NaN() throw() { return static_cast<unsigned __int128>(0); } static unsigned __int128 denorm_min() throw() { return static_cast<unsigned __int128>(0); } static const bool is_iec559 = false; static const bool is_bounded = true; static const bool is_modulo = true; static const bool traps = true; static const bool tinyness_before = false; static const float_round_style round_style = round_toward_zero; };
# 1592 "/usr/include/c++/5/limits" 3
  template<>
    struct numeric_limits<float>
    {
      static const bool is_specialized = true;

      static float
      min() throw() { return 1.17549435082228750797e-38F; }

      static float
      max() throw() { return 3.40282346638528859812e+38F; }






      static const int digits = 24;
      static const int digits10 = 6;




      static const bool is_signed = true;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 2;

      static float
      epsilon() throw() { return 1.19209289550781250000e-7F; }

      static float
      round_error() throw() { return 0.5F; }

      static const int min_exponent = (-125);
      static const int min_exponent10 = (-37);
      static const int max_exponent = 128;
      static const int max_exponent10 = 38;

      static const bool has_infinity = 1;
      static const bool has_quiet_NaN = 1;
      static const bool has_signaling_NaN = has_quiet_NaN;
      static const float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static const bool has_denorm_loss
       = false;

      static float
      infinity() throw() { return __builtin_huge_valf(); }

      static float
      quiet_NaN() throw() { return __builtin_nanf(""); }

      static float
      signaling_NaN() throw() { return __builtin_nansf(""); }

      static float
      denorm_min() throw() { return 1.40129846432481707092e-45F; }

      static const bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = false;
      static const bool tinyness_before
       = false;
      static const float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<double>
    {
      static const bool is_specialized = true;

      static double
      min() throw() { return double(2.22507385850720138309e-308L); }

      static double
      max() throw() { return double(1.79769313486231570815e+308L); }






      static const int digits = 53;
      static const int digits10 = 15;




      static const bool is_signed = true;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 2;

      static double
      epsilon() throw() { return double(2.22044604925031308085e-16L); }

      static double
      round_error() throw() { return 0.5; }

      static const int min_exponent = (-1021);
      static const int min_exponent10 = (-307);
      static const int max_exponent = 1024;
      static const int max_exponent10 = 308;

      static const bool has_infinity = 1;
      static const bool has_quiet_NaN = 1;
      static const bool has_signaling_NaN = has_quiet_NaN;
      static const float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static const bool has_denorm_loss
        = false;

      static double
      infinity() throw() { return __builtin_huge_val(); }

      static double
      quiet_NaN() throw() { return __builtin_nan(""); }

      static double
      signaling_NaN() throw() { return __builtin_nans(""); }

      static double
      denorm_min() throw() { return double(4.94065645841246544177e-324L); }

      static const bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = false;
      static const bool tinyness_before
       = false;
      static const float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<long double>
    {
      static const bool is_specialized = true;

      static long double
      min() throw() { return 3.36210314311209350626e-4932L; }

      static long double
      max() throw() { return 1.18973149535723176502e+4932L; }






      static const int digits = 64;
      static const int digits10 = 18;




      static const bool is_signed = true;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 2;

      static long double
      epsilon() throw() { return 1.08420217248550443401e-19L; }

      static long double
      round_error() throw() { return 0.5L; }

      static const int min_exponent = (-16381);
      static const int min_exponent10 = (-4931);
      static const int max_exponent = 16384;
      static const int max_exponent10 = 4932;

      static const bool has_infinity = 1;
      static const bool has_quiet_NaN = 1;
      static const bool has_signaling_NaN = has_quiet_NaN;
      static const float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static const bool has_denorm_loss
 = false;

      static long double
      infinity() throw() { return __builtin_huge_vall(); }

      static long double
      quiet_NaN() throw() { return __builtin_nanl(""); }

      static long double
      signaling_NaN() throw() { return __builtin_nansl(""); }

      static long double
      denorm_min() throw() { return 3.64519953188247460253e-4951L; }

      static const bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = false;
      static const bool tinyness_before =
      false;
      static const float_round_style round_style =
            round_to_nearest;
    };






}
# 18 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/stdcpp.h" 2

# 1 "/usr/include/c++/5/list" 1 3
# 58 "/usr/include/c++/5/list" 3
       
# 59 "/usr/include/c++/5/list" 3




# 1 "/usr/include/c++/5/bits/stl_list.h" 1 3
# 64 "/usr/include/c++/5/bits/stl_list.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
  namespace __detail
  {
 
# 77 "/usr/include/c++/5/bits/stl_list.h" 3
    struct _List_node_base
    {
      _List_node_base* _M_next;
      _List_node_base* _M_prev;

      static void
      swap(_List_node_base& __x, _List_node_base& __y) throw();

      void
      _M_transfer(_List_node_base* const __first,
    _List_node_base* const __last) throw();

      void
      _M_reverse() throw();

      void
      _M_hook(_List_node_base* const __position) throw();

      void
      _M_unhook() throw();
    };

 
  }




  template<typename _Tp>
    struct _List_node : public __detail::_List_node_base
    {

      _Tp _M_data;







    };






  template<typename _Tp>
    struct _List_iterator
    {
      typedef _List_iterator<_Tp> _Self;
      typedef _List_node<_Tp> _Node;

      typedef ptrdiff_t difference_type;
      typedef std::bidirectional_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;

      _List_iterator()
      : _M_node() { }

      explicit
      _List_iterator(__detail::_List_node_base* __x)
      : _M_node(__x) { }

      _Self
      _M_const_cast() const
      { return *this; }


      reference
      operator*() const
      { return static_cast<_Node*>(_M_node)->_M_data; }

      pointer
      operator->() const
      { return std::__addressof(static_cast<_Node*>(_M_node)->_M_data); }

      _Self&
      operator++()
      {
 _M_node = _M_node->_M_next;
 return *this;
      }

      _Self
      operator++(int)
      {
 _Self __tmp = *this;
 _M_node = _M_node->_M_next;
 return __tmp;
      }

      _Self&
      operator--()
      {
 _M_node = _M_node->_M_prev;
 return *this;
      }

      _Self
      operator--(int)
      {
 _Self __tmp = *this;
 _M_node = _M_node->_M_prev;
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const
      { return _M_node != __x._M_node; }


      __detail::_List_node_base* _M_node;
    };






  template<typename _Tp>
    struct _List_const_iterator
    {
      typedef _List_const_iterator<_Tp> _Self;
      typedef const _List_node<_Tp> _Node;
      typedef _List_iterator<_Tp> iterator;

      typedef ptrdiff_t difference_type;
      typedef std::bidirectional_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;

      _List_const_iterator()
      : _M_node() { }

      explicit
      _List_const_iterator(const __detail::_List_node_base* __x)
     
      : _M_node(__x) { }

      _List_const_iterator(const iterator& __x)
      : _M_node(__x._M_node) { }

      iterator
      _M_const_cast() const
      { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }



      reference
      operator*() const
      { return static_cast<_Node*>(_M_node)->_M_data; }

      pointer
      operator->() const
      { return std::__addressof(static_cast<_Node*>(_M_node)->_M_data); }

      _Self&
      operator++()
      {
 _M_node = _M_node->_M_next;
 return *this;
      }

      _Self
      operator++(int)
      {
 _Self __tmp = *this;
 _M_node = _M_node->_M_next;
 return __tmp;
      }

      _Self&
      operator--()
      {
 _M_node = _M_node->_M_prev;
 return *this;
      }

      _Self
      operator--(int)
      {
 _Self __tmp = *this;
 _M_node = _M_node->_M_prev;
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const
      { return _M_node != __x._M_node; }


      const __detail::_List_node_base* _M_node;
    };

  template<typename _Val>
    inline bool
    operator==(const _List_iterator<_Val>& __x,
        const _List_const_iterator<_Val>& __y)
    { return __x._M_node == __y._M_node; }

  template<typename _Val>
    inline bool
    operator!=(const _List_iterator<_Val>& __x,
               const _List_const_iterator<_Val>& __y)
    { return __x._M_node != __y._M_node; }

namespace __cxx11 {

  template<typename _Tp, typename _Alloc>
    class _List_base
    {
    protected:
# 314 "/usr/include/c++/5/bits/stl_list.h" 3
      typedef typename _Alloc::template rebind<_List_node<_Tp> >::other
        _Node_alloc_type;

      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;

      static size_t
      _S_distance(const __detail::_List_node_base* __first,
    const __detail::_List_node_base* __last)
      {
 size_t __n = 0;
 while (__first != __last)
   {
     __first = __first->_M_next;
     ++__n;
   }
 return __n;
      }

      struct _List_impl
      : public _Node_alloc_type
      {

 _List_node<size_t> _M_node;




 _List_impl()
 : _Node_alloc_type(), _M_node()
 { }

 _List_impl(const _Node_alloc_type& __a)
 : _Node_alloc_type(__a), _M_node()
 { }






      };

      _List_impl _M_impl;


      size_t _M_get_size() const { return _M_impl._M_node._M_data; }

      void _M_set_size(size_t __n) { _M_impl._M_node._M_data = __n; }

      void _M_inc_size(size_t __n) { _M_impl._M_node._M_data += __n; }

      void _M_dec_size(size_t __n) { _M_impl._M_node._M_data -= __n; }

      size_t
      _M_distance(const __detail::_List_node_base* __first,
    const __detail::_List_node_base* __last) const
      { return _S_distance(__first, __last); }


      size_t _M_node_count() const { return _M_impl._M_node._M_data; }
# 390 "/usr/include/c++/5/bits/stl_list.h" 3
      _List_node<_Tp>*
      _M_get_node()
      { return _M_impl._Node_alloc_type::allocate(1); }

      void
      _M_put_node(_List_node<_Tp>* __p)
      { _M_impl._Node_alloc_type::deallocate(__p, 1); }

  public:
      typedef _Alloc allocator_type;

      _Node_alloc_type&
      _M_get_Node_allocator()
      { return *static_cast<_Node_alloc_type*>(&_M_impl); }

      const _Node_alloc_type&
      _M_get_Node_allocator() const
      { return *static_cast<const _Node_alloc_type*>(&_M_impl); }

      _Tp_alloc_type
      _M_get_Tp_allocator() const
      { return _Tp_alloc_type(_M_get_Node_allocator()); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Node_allocator()); }

      _List_base()
      : _M_impl()
      { _M_init(); }

      _List_base(const _Node_alloc_type& __a)
      : _M_impl(__a)
      { _M_init(); }
# 445 "/usr/include/c++/5/bits/stl_list.h" 3
      ~_List_base()
      { _M_clear(); }

      void
      _M_clear() ;

      void
      _M_init()
      {
        this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
        this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
 _M_set_size(0);
      }
    };
# 506 "/usr/include/c++/5/bits/stl_list.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class list : protected _List_base<_Tp, _Alloc>
    {

      typedef typename _Alloc::value_type _Alloc_value_type;
     
     

      typedef _List_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef typename _Base::_Node_alloc_type _Node_alloc_type;

    public:
      typedef _Tp value_type;
      typedef typename _Tp_alloc_type::pointer pointer;
      typedef typename _Tp_alloc_type::const_pointer const_pointer;
      typedef typename _Tp_alloc_type::reference reference;
      typedef typename _Tp_alloc_type::const_reference const_reference;
      typedef _List_iterator<_Tp> iterator;
      typedef _List_const_iterator<_Tp> const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:


      typedef _List_node<_Tp> _Node;

      using _Base::_M_impl;
      using _Base::_M_put_node;
      using _Base::_M_get_node;
      using _Base::_M_get_Tp_allocator;
      using _Base::_M_get_Node_allocator;
# 550 "/usr/include/c++/5/bits/stl_list.h" 3
      _Node*
      _M_create_node(const value_type& __x)
      {
 _Node* __p = this->_M_get_node();
 try
   {
     _M_get_Tp_allocator().construct
       (std::__addressof(__p->_M_data), __x);
   }
 catch(...)
   {
     _M_put_node(__p);
     throw;
   }
 return __p;
      }
# 586 "/usr/include/c++/5/bits/stl_list.h" 3
    public:






      list()



      : _Base() { }





      explicit
      list(const allocator_type& __a)
      : _Base(_Node_alloc_type(__a)) { }
# 641 "/usr/include/c++/5/bits/stl_list.h" 3
      explicit
      list(size_type __n, const value_type& __value = value_type(),
    const allocator_type& __a = allocator_type())
      : _Base(_Node_alloc_type(__a))
      { _M_fill_initialize(__n, __value); }
# 655 "/usr/include/c++/5/bits/stl_list.h" 3
      list(const list& __x)
      : _Base(__x._M_get_Node_allocator())
      { _M_initialize_dispatch(__x.begin(), __x.end(), __false_type()); }
# 702 "/usr/include/c++/5/bits/stl_list.h" 3
      template<typename _InputIterator>
        list(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
 : _Base(_Node_alloc_type(__a))
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_initialize_dispatch(__first, __last, _Integral());
 }
# 728 "/usr/include/c++/5/bits/stl_list.h" 3
      list&
      operator=(const list& __x);
# 774 "/usr/include/c++/5/bits/stl_list.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 797 "/usr/include/c++/5/bits/stl_list.h" 3
      template<typename _InputIterator>
        void
        assign(_InputIterator __first, _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_assign_dispatch(__first, __last, _Integral());
 }
# 821 "/usr/include/c++/5/bits/stl_list.h" 3
      allocator_type
      get_allocator() const
      { return _Base::get_allocator(); }






      iterator
      begin()
      { return iterator(this->_M_impl._M_node._M_next); }






      const_iterator
      begin() const
      { return const_iterator(this->_M_impl._M_node._M_next); }






      iterator
      end()
      { return iterator(&this->_M_impl._M_node); }






      const_iterator
      end() const
      { return const_iterator(&this->_M_impl._M_node); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(begin()); }
# 940 "/usr/include/c++/5/bits/stl_list.h" 3
      bool
      empty() const
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }


      size_type
      size() const
      { return this->_M_node_count(); }


      size_type
      max_size() const
      { return _M_get_Node_allocator().max_size(); }
# 990 "/usr/include/c++/5/bits/stl_list.h" 3
      void
      resize(size_type __new_size, value_type __x = value_type());







      reference
      front()
      { return *begin(); }





      const_reference
      front() const
      { return *begin(); }





      reference
      back()
      {
 iterator __tmp = end();
 --__tmp;
 return *__tmp;
      }





      const_reference
      back() const
      {
 const_iterator __tmp = end();
 --__tmp;
 return *__tmp;
      }
# 1046 "/usr/include/c++/5/bits/stl_list.h" 3
      void
      push_front(const value_type& __x)
      { this->_M_insert(begin(), __x); }
# 1073 "/usr/include/c++/5/bits/stl_list.h" 3
      void
      pop_front()
      { this->_M_erase(begin()); }
# 1087 "/usr/include/c++/5/bits/stl_list.h" 3
      void
      push_back(const value_type& __x)
      { this->_M_insert(end(), __x); }
# 1113 "/usr/include/c++/5/bits/stl_list.h" 3
      void
      pop_back()
      { this->_M_erase(iterator(this->_M_impl._M_node._M_prev)); }
# 1159 "/usr/include/c++/5/bits/stl_list.h" 3
      iterator
      insert(iterator __position, const value_type& __x);
# 1229 "/usr/include/c++/5/bits/stl_list.h" 3
      void
      insert(iterator __position, size_type __n, const value_type& __x)
      {
 list __tmp(__n, __x, get_allocator());
 splice(__position, __tmp);
      }
# 1272 "/usr/include/c++/5/bits/stl_list.h" 3
      template<typename _InputIterator>
        void
        insert(iterator __position, _InputIterator __first,
        _InputIterator __last)
        {
   list __tmp(__first, __last, get_allocator());
   splice(__position, __tmp);
 }
# 1297 "/usr/include/c++/5/bits/stl_list.h" 3
      iterator



      erase(iterator __position);
# 1322 "/usr/include/c++/5/bits/stl_list.h" 3
      iterator



      erase(iterator __first, iterator __last)

      {
 while (__first != __last)
   __first = erase(__first);
 return __last._M_const_cast();
      }
# 1343 "/usr/include/c++/5/bits/stl_list.h" 3
      void
      swap(list& __x)
      {
 __detail::_List_node_base::swap(this->_M_impl._M_node,
     __x._M_impl._M_node);

 size_t __xsize = __x._M_get_size();
 __x._M_set_size(this->_M_get_size());
 this->_M_set_size(__xsize);



 std::__alloc_swap<typename _Base::_Node_alloc_type>::
   _S_do_it(_M_get_Node_allocator(), __x._M_get_Node_allocator());
      }







      void
      clear()
      {
        _Base::_M_clear();
        _Base::_M_init();
      }
# 1384 "/usr/include/c++/5/bits/stl_list.h" 3
      void



      splice(iterator __position, list& __x)

      {
 if (!__x.empty())
   {
     _M_check_equal_allocators(__x);

     this->_M_transfer(__position._M_const_cast(),
         __x.begin(), __x.end());

     this->_M_inc_size(__x._M_get_size());
     __x._M_set_size(0);
   }
      }
# 1432 "/usr/include/c++/5/bits/stl_list.h" 3
      void
      splice(iterator __position, list& __x, iterator __i)

      {
 iterator __j = __i._M_const_cast();
 ++__j;
 if (__position == __i || __position == __j)
   return;

 if (this != &__x)
   _M_check_equal_allocators(__x);

 this->_M_transfer(__position._M_const_cast(),
     __i._M_const_cast(), __j);

 this->_M_inc_size(1);
 __x._M_dec_size(1);
      }
# 1497 "/usr/include/c++/5/bits/stl_list.h" 3
      void
      splice(iterator __position, list& __x, iterator __first,
      iterator __last)

      {
 if (__first != __last)
   {
     if (this != &__x)
       _M_check_equal_allocators(__x);

     size_t __n = this->_M_distance(__first._M_node, __last._M_node);
     this->_M_inc_size(__n);
     __x._M_dec_size(__n);

     this->_M_transfer(__position._M_const_cast(),
         __first._M_const_cast(),
         __last._M_const_cast());
   }
      }
# 1548 "/usr/include/c++/5/bits/stl_list.h" 3
      void
      remove(const _Tp& __value);
# 1562 "/usr/include/c++/5/bits/stl_list.h" 3
      template<typename _Predicate>
        void
        remove_if(_Predicate);
# 1576 "/usr/include/c++/5/bits/stl_list.h" 3
      void
      unique();
# 1591 "/usr/include/c++/5/bits/stl_list.h" 3
      template<typename _BinaryPredicate>
        void
        unique(_BinaryPredicate);
# 1612 "/usr/include/c++/5/bits/stl_list.h" 3
      void
      merge(list& __x);
# 1639 "/usr/include/c++/5/bits/stl_list.h" 3
      template<typename _StrictWeakOrdering>
        void
        merge(list& __x, _StrictWeakOrdering __comp);







      void
      reverse()
      { this->_M_impl._M_node._M_reverse(); }







      void
      sort();







      template<typename _StrictWeakOrdering>
        void
        sort(_StrictWeakOrdering);

    protected:






      template<typename _Integer>
        void
        _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
        { _M_fill_initialize(static_cast<size_type>(__n), __x); }


      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
        {
   for (; __first != __last; ++__first)



     push_back(*__first);

 }



      void
      _M_fill_initialize(size_type __n, const value_type& __x)
      {
 for (; __n; --__n)
   push_back(__x);
      }
# 1727 "/usr/include/c++/5/bits/stl_list.h" 3
      template<typename _Integer>
        void
        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
        void
        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type);



      void
      _M_fill_assign(size_type __n, const value_type& __val);



      void
      _M_transfer(iterator __position, iterator __first, iterator __last)
      { __position._M_node->_M_transfer(__first._M_node, __last._M_node); }



      void
      _M_insert(iterator __position, const value_type& __x)
      {
        _Node* __tmp = _M_create_node(__x);
        __tmp->_M_hook(__position._M_node);
 this->_M_inc_size(1);
      }
# 1770 "/usr/include/c++/5/bits/stl_list.h" 3
      void
      _M_erase(iterator __position)
      {
 this->_M_dec_size(1);
        __position._M_node->_M_unhook();
        _Node* __n = static_cast<_Node*>(__position._M_node);



 _M_get_Tp_allocator().destroy(std::__addressof(__n->_M_data));

        _M_put_node(__n);
      }


      void
      _M_check_equal_allocators(list& __x)
      {
 if (std::__alloc_neq<typename _Base::_Node_alloc_type>::
     _S_do_it(_M_get_Node_allocator(), __x._M_get_Node_allocator()))
   __builtin_abort();
      }
    };
}
# 1805 "/usr/include/c++/5/bits/stl_list.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    {
      typedef typename list<_Tp, _Alloc>::const_iterator const_iterator;
      const_iterator __end1 = __x.end();
      const_iterator __end2 = __y.end();

      const_iterator __i1 = __x.begin();
      const_iterator __i2 = __y.begin();
      while (__i1 != __end1 && __i2 != __end2 && *__i1 == *__i2)
 {
   ++__i1;
   ++__i2;
 }
      return __i1 == __end1 && __i2 == __end2;
    }
# 1834 "/usr/include/c++/5/bits/stl_list.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)
    { __x.swap(__y); }


}
# 64 "/usr/include/c++/5/list" 2 3
# 1 "/usr/include/c++/5/bits/list.tcc" 1 3
# 59 "/usr/include/c++/5/bits/list.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
    _M_clear()
    {
      typedef _List_node<_Tp> _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
      while (__cur != &_M_impl._M_node)
 {
   _Node* __tmp = static_cast<_Node*>(__cur);
   __cur = __tmp->_M_next;



   _M_get_Tp_allocator().destroy(std::__addressof(__tmp->_M_data));

   _M_put_node(__tmp);
 }
    }
# 97 "/usr/include/c++/5/bits/list.tcc" 3
  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::



    insert(iterator __position, const value_type& __x)

    {
      _Node* __tmp = _M_create_node(__x);
      __tmp->_M_hook(__position._M_const_cast()._M_node);
      this->_M_inc_size(1);
      return iterator(__tmp);
    }
# 146 "/usr/include/c++/5/bits/list.tcc" 3
  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::



    erase(iterator __position)

    {
      iterator __ret = iterator(__position._M_node->_M_next);
      _M_erase(__position._M_const_cast());
      return __ret;
    }
# 210 "/usr/include/c++/5/bits/list.tcc" 3
  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    resize(size_type __new_size, value_type __x)
    {
      iterator __i = begin();
      size_type __len = 0;
      for (; __i != end() && __len < __new_size; ++__i, ++__len)
        ;
      if (__len == __new_size)
        erase(__i, end());
      else
        insert(end(), __new_size - __len, __x);
    }


  template<typename _Tp, typename _Alloc>
    list<_Tp, _Alloc>&
    list<_Tp, _Alloc>::
    operator=(const list& __x)
    {
      if (this != &__x)
 {
   iterator __first1 = begin();
   iterator __last1 = end();
   const_iterator __first2 = __x.begin();
   const_iterator __last2 = __x.end();
   for (; __first1 != __last1 && __first2 != __last2;
        ++__first1, ++__first2)
     *__first1 = *__first2;
   if (__first2 == __last2)
     erase(__first1, __last1);
   else
     insert(__last1, __first2, __last2);
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    _M_fill_assign(size_type __n, const value_type& __val)
    {
      iterator __i = begin();
      for (; __i != end() && __n > 0; ++__i, --__n)
        *__i = __val;
      if (__n > 0)
        insert(end(), __n, __val);
      else
        erase(__i, end());
    }

  template<typename _Tp, typename _Alloc>
    template <typename _InputIterator>
      void
      list<_Tp, _Alloc>::
      _M_assign_dispatch(_InputIterator __first2, _InputIterator __last2,
    __false_type)
      {
        iterator __first1 = begin();
        iterator __last1 = end();
        for (; __first1 != __last1 && __first2 != __last2;
      ++__first1, ++__first2)
          *__first1 = *__first2;
        if (__first2 == __last2)
          erase(__first1, __last1);
        else
          insert(__last1, __first2, __last2);
      }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    remove(const value_type& __value)
    {
      iterator __first = begin();
      iterator __last = end();
      iterator __extra = __last;
      while (__first != __last)
 {
   iterator __next = __first;
   ++__next;
   if (*__first == __value)
     {



       if (std::__addressof(*__first) != std::__addressof(__value))
  _M_erase(__first);
       else
  __extra = __first;
     }
   __first = __next;
 }
      if (__extra != __last)
 _M_erase(__extra);
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    unique()
    {
      iterator __first = begin();
      iterator __last = end();
      if (__first == __last)
 return;
      iterator __next = __first;
      while (++__next != __last)
 {
   if (*__first == *__next)
     _M_erase(__next);
   else
     __first = __next;
   __next = __first;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::



    merge(list& __x)

    {


      if (this != &__x)
 {
   _M_check_equal_allocators(__x);

   iterator __first1 = begin();
   iterator __last1 = end();
   iterator __first2 = __x.begin();
   iterator __last2 = __x.end();
   while (__first1 != __last1 && __first2 != __last2)
     if (*__first2 < *__first1)
       {
  iterator __next = __first2;
  _M_transfer(__first1, __first2, ++__next);
  __first2 = __next;
       }
     else
       ++__first1;
   if (__first2 != __last2)
     _M_transfer(__last1, __first2, __last2);

   this->_M_inc_size(__x._M_get_size());
   __x._M_set_size(0);
 }
    }

  template<typename _Tp, typename _Alloc>
    template <typename _StrictWeakOrdering>
      void
      list<_Tp, _Alloc>::



      merge(list& __x, _StrictWeakOrdering __comp)

      {


 if (this != &__x)
   {
     _M_check_equal_allocators(__x);

     iterator __first1 = begin();
     iterator __last1 = end();
     iterator __first2 = __x.begin();
     iterator __last2 = __x.end();
     while (__first1 != __last1 && __first2 != __last2)
       if (__comp(*__first2, *__first1))
  {
    iterator __next = __first2;
    _M_transfer(__first1, __first2, ++__next);
    __first2 = __next;
  }
       else
  ++__first1;
     if (__first2 != __last2)
       _M_transfer(__last1, __first2, __last2);

     this->_M_inc_size(__x._M_get_size());
     __x._M_set_size(0);
   }
      }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    sort()
    {

      if (this->_M_impl._M_node._M_next != &this->_M_impl._M_node
   && this->_M_impl._M_node._M_next->_M_next != &this->_M_impl._M_node)
      {
        list __carry;
        list __tmp[64];
        list * __fill = &__tmp[0];
        list * __counter;

        do
   {
     __carry.splice(__carry.begin(), *this, begin());

     for(__counter = &__tmp[0];
  __counter != __fill && !__counter->empty();
  ++__counter)
       {
  __counter->merge(__carry);
  __carry.swap(*__counter);
       }
     __carry.swap(*__counter);
     if (__counter == __fill)
       ++__fill;
   }
 while ( !empty() );

        for (__counter = &__tmp[1]; __counter != __fill; ++__counter)
          __counter->merge(*(__counter - 1));
        swap( *(__fill - 1) );
      }
    }

  template<typename _Tp, typename _Alloc>
    template <typename _Predicate>
      void
      list<_Tp, _Alloc>::
      remove_if(_Predicate __pred)
      {
        iterator __first = begin();
        iterator __last = end();
        while (__first != __last)
   {
     iterator __next = __first;
     ++__next;
     if (__pred(*__first))
       _M_erase(__first);
     __first = __next;
   }
      }

  template<typename _Tp, typename _Alloc>
    template <typename _BinaryPredicate>
      void
      list<_Tp, _Alloc>::
      unique(_BinaryPredicate __binary_pred)
      {
        iterator __first = begin();
        iterator __last = end();
        if (__first == __last)
   return;
        iterator __next = __first;
        while (++__next != __last)
   {
     if (__binary_pred(*__first, *__next))
       _M_erase(__next);
     else
       __first = __next;
     __next = __first;
   }
      }

  template<typename _Tp, typename _Alloc>
    template <typename _StrictWeakOrdering>
      void
      list<_Tp, _Alloc>::
      sort(_StrictWeakOrdering __comp)
      {

 if (this->_M_impl._M_node._M_next != &this->_M_impl._M_node
     && this->_M_impl._M_node._M_next->_M_next != &this->_M_impl._M_node)
   {
     list __carry;
     list __tmp[64];
     list * __fill = &__tmp[0];
     list * __counter;

     do
       {
  __carry.splice(__carry.begin(), *this, begin());

  for(__counter = &__tmp[0];
      __counter != __fill && !__counter->empty();
      ++__counter)
    {
      __counter->merge(__carry, __comp);
      __carry.swap(*__counter);
    }
  __carry.swap(*__counter);
  if (__counter == __fill)
    ++__fill;
       }
     while ( !empty() );

     for (__counter = &__tmp[1]; __counter != __fill; ++__counter)
       __counter->merge(*(__counter - 1), __comp);
     swap(*(__fill - 1));
   }
      }


}
# 65 "/usr/include/c++/5/list" 2 3
# 20 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/stdcpp.h" 2
# 47 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/stdcpp.h"
# 1 "/usr/include/c++/5/cstdlib" 1 3
# 39 "/usr/include/c++/5/cstdlib" 3
       
# 40 "/usr/include/c++/5/cstdlib" 3
# 48 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/stdcpp.h" 2
# 1 "/usr/include/c++/5/cstddef" 1 3
# 42 "/usr/include/c++/5/cstddef" 3
       
# 43 "/usr/include/c++/5/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 149 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 46 "/usr/include/c++/5/cstddef" 2 3
# 49 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/stdcpp.h" 2
# 1 "/usr/include/c++/5/cstring" 1 3
# 39 "/usr/include/c++/5/cstring" 3
       
# 40 "/usr/include/c++/5/cstring" 3
# 50 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/stdcpp.h" 2
# 1 "/usr/include/c++/5/climits" 1 3
# 39 "/usr/include/c++/5/climits" 3
       
# 40 "/usr/include/c++/5/climits" 3

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 1 3 4
# 168 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 143 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 160 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 144 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 148 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 152 "/usr/include/limits.h" 2 3 4
# 169 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 2 3 4
# 42 "/usr/include/c++/5/climits" 2 3
# 51 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/stdcpp.h" 2
# 88 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h" 2
# 1 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/trap.h" 1
# 95 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/trap.h"

# 95 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/trap.h"
namespace CryptoPP {
# 144 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/trap.h"
}
# 89 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h" 2


# 1 "/usr/include/signal.h" 1 3 4
# 30 "/usr/include/signal.h" 3 4

# 30 "/usr/include/signal.h" 3 4
extern "C" {

# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 102 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
extern int __sigismember (const __sigset_t *, int);
extern int __sigaddset (__sigset_t *, int);
extern int __sigdelset (__sigset_t *, int);
# 33 "/usr/include/signal.h" 2 3 4







typedef __sig_atomic_t sig_atomic_t;

# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/signum.h" 1 3 4
# 58 "/usr/include/signal.h" 2 3 4
# 80 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 2 3 4
# 58 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
typedef __clock_t __sigchld_clock_t;



typedef struct
  {
    int si_signo;
    int si_errno;

    int si_code;

    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __sigchld_clock_t si_utime;
     __sigchld_clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
     short int si_addr_lsb;
     struct
       {
  void *_lower;
  void *_upper;
       } si_addr_bnd;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;


 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;
      } _sifields;
  } siginfo_t ;
# 160 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
enum
{
  SI_ASYNCNL = -60,

  SI_TKILL = -6,

  SI_SIGIO,

  SI_ASYNCIO,

  SI_MESGQ,

  SI_TIMER,

  SI_QUEUE,

  SI_USER,

  SI_KERNEL = 0x80

};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};




enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE

};




enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};
# 81 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     throw ();

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     throw ();







extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     throw ();
# 114 "/usr/include/signal.h" 3 4





extern __sighandler_t bsd_signal (int __sig, __sighandler_t __handler)
     throw ();






extern int kill (__pid_t __pid, int __sig) throw ();






extern int killpg (__pid_t __pgrp, int __sig) throw ();




extern int raise (int __sig) throw ();




extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     throw ();
extern int gsignal (int __sig) throw ();




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 168 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 187 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) throw () __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) throw () __attribute__ ((__deprecated__));


extern int siggetmask (void) throw () __attribute__ ((__deprecated__));
# 202 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     throw () __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (const sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, const sigset_t *__left,
        const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, const sigset_t *__left,
       const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 244 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) throw ();






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) throw ();


extern int sigpending (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));






extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));






extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     throw ();
# 301 "/usr/include/signal.h" 3 4
extern const char *const _sys_siglist[65];
extern const char *const sys_siglist[65];



# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t padding[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short padding[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 121 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t padding[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t reserved1[2];
  __uint64_t reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 307 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) throw ();






# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 317 "/usr/include/signal.h" 2 3 4




extern int siginterrupt (int __sig, int __interrupt) throw ();

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };



enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 49 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 3 4
typedef struct sigaltstack
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 324 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
# 1 "/usr/include/signal.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;





typedef greg_t gregset_t[23];



enum
{
  REG_R8 = 0,

  REG_R9,

  REG_R10,

  REG_R11,

  REG_R12,

  REG_R13,

  REG_R14,

  REG_R15,

  REG_RDI,

  REG_RSI,

  REG_RBP,

  REG_RBX,

  REG_RDX,

  REG_RAX,

  REG_RCX,

  REG_RSP,

  REG_RIP,

  REG_EFL,

  REG_CSGSFS,

  REG_ERR,

  REG_TRAPNO,

  REG_OLDMASK,

  REG_CR2

};


struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int padding[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t padding[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext
  {
    unsigned long int uc_flags;
    struct ucontext *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    __sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
  } ucontext_t;
# 327 "/usr/include/signal.h" 2 3 4





extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     throw () __attribute__ ((__deprecated__));



extern int sigaltstack (const struct sigaltstack *__restrict __ss,
   struct sigaltstack *__restrict __oss) throw ();







extern int sighold (int __sig) throw ();


extern int sigrelse (int __sig) throw ();


extern int sigignore (int __sig) throw ();


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) throw ();






# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)throw ();


extern int pthread_kill (pthread_t __threadid, int __signo) throw ();



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) throw ();
# 363 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) throw ();

extern int __libc_current_sigrtmax (void) throw ();



}
# 92 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h" 2








# 99 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
namespace CryptoPP {


class Integer;
class RandomNumberGenerator;
class BufferedTransformation;



enum CipherDir {

 ENCRYPTION,

 DECRYPTION};


const unsigned long INFINITE_TIME = 
# 115 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h" 3 4
                                   (0x7fffffffffffffffL * 2UL + 1UL)
# 115 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
                                            ;



template <typename ENUM_TYPE, int VALUE>
struct EnumToType
{
 static ENUM_TYPE ToEnum() {return (ENUM_TYPE)VALUE;}
};




enum ByteOrder {

 LITTLE_ENDIAN_ORDER = 0,

 BIG_ENDIAN_ORDER = 1};


typedef EnumToType<ByteOrder, LITTLE_ENDIAN_ORDER> LittleEndian;

typedef EnumToType<ByteOrder, BIG_ENDIAN_ORDER> BigEndian;






class Exception : public std::exception
{
public:


 enum ErrorType {

  NOT_IMPLEMENTED,

  INVALID_ARGUMENT,

  CANNOT_FLUSH,

  DATA_INTEGRITY_CHECK_FAILED,

  INVALID_DATA_FORMAT,

  IO_ERROR,

  OTHER_ERROR
 };


 explicit Exception(ErrorType errorType, const std::string &s) : m_errorType(errorType), m_what(s) {}
 virtual ~Exception() throw() {}


 const char *what() const throw() {return (m_what.c_str());}

 const std::string &GetWhat() const {return m_what;}

 void SetWhat(const std::string &s) {m_what = s;}

 ErrorType GetErrorType() const {return m_errorType;}

 void SetErrorType(ErrorType errorType) {m_errorType = errorType;}

private:
 ErrorType m_errorType;
 std::string m_what;
};


class InvalidArgument : public Exception
{
public:
 explicit InvalidArgument(const std::string &s) : Exception(INVALID_ARGUMENT, s) {}
};


class InvalidDataFormat : public Exception
{
public:
 explicit InvalidDataFormat(const std::string &s) : Exception(INVALID_DATA_FORMAT, s) {}
};


class InvalidCiphertext : public InvalidDataFormat
{
public:
 explicit InvalidCiphertext(const std::string &s) : InvalidDataFormat(s) {}
};


class NotImplemented : public Exception
{
public:
 explicit NotImplemented(const std::string &s) : Exception(NOT_IMPLEMENTED, s) {}
};


class CannotFlush : public Exception
{
public:
 explicit CannotFlush(const std::string &s) : Exception(CANNOT_FLUSH, s) {}
};


class OS_Error : public Exception
{
public:
 OS_Error(ErrorType errorType, const std::string &s, const std::string& operation, int errorCode)
  : Exception(errorType, s), m_operation(operation), m_errorCode(errorCode) {}
 ~OS_Error() throw() {}


 const std::string & GetOperation() const {return m_operation;}

 int GetErrorCode() const {return m_errorCode;}

protected:
 std::string m_operation;
 int m_errorCode;
};



struct DecodingResult
{


 explicit DecodingResult() : isValidCoding(false), messageLength(0) {}



 explicit DecodingResult(size_t len) : isValidCoding(true), messageLength(len) {}




 bool operator==(const DecodingResult &rhs) const {return isValidCoding == rhs.isValidCoding && messageLength == rhs.messageLength;}




 bool operator!=(const DecodingResult &rhs) const {return !operator==(rhs);}


 bool isValidCoding;

 size_t messageLength;




};
# 282 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
class NameValuePairs
{
public:
 virtual ~NameValuePairs() {}




 class ValueTypeMismatch : public InvalidArgument
 {
 public:




  ValueTypeMismatch(const std::string &name, const std::type_info &stored, const std::type_info &retrieving)
   : InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")
   , m_stored(stored), m_retrieving(retrieving) {}



  const std::type_info & GetStoredTypeInfo() const {return m_stored;}



  const std::type_info & GetRetrievingTypeInfo() const {return m_retrieving;}

 private:
  const std::type_info &m_stored;
  const std::type_info &m_retrieving;
 };




 template <class T>
 bool GetThisObject(T &object) const
 {
  return GetValue((std::string("ThisObject:")+typeid(T).name()).c_str(), object);
 }




 template <class T>
 bool GetThisPointer(T *&ptr) const
 {
  return GetValue((std::string("ThisPointer:")+typeid(T).name()).c_str(), ptr);
 }
# 339 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 template <class T>
 bool GetValue(const char *name, T &value) const
 {
  return GetVoidValue(name, typeid(T), &value);
 }
# 352 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 template <class T>
 T GetValueWithDefault(const char *name, T defaultValue) const
 {
  T value;
  bool result = GetValue(name, value);

  if (result) {return value;}
  return defaultValue;
 }




 std::string GetValueNames() const
  {std::string result; GetValue("ValueNames", result); return result;}
# 376 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 bool GetIntValue(const char *name, int &value) const
  {return GetValue(name, value);}







 int GetIntValueWithDefault(const char *name, int defaultValue) const
  {return GetValueWithDefault(name, defaultValue);}
# 397 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 static void ThrowIfTypeMismatch(const char *name, const std::type_info &stored, const std::type_info &retrieving)
  {if (stored != retrieving) throw ValueTypeMismatch(name, stored, retrieving);}
# 410 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 template <class T>
 void GetRequiredParameter(const char *className, const char *name, T &value) const
 {
  if (!GetValue(name, value))
   throw InvalidArgument(std::string(className) + ": missing required parameter '" + name + "'");
 }
# 426 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 void GetRequiredIntParameter(const char *className, const char *name, int &value) const
 {
  if (!GetIntValue(name, value))
   throw InvalidArgument(std::string(className) + ": missing required parameter '" + name + "'");
 }
# 442 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual bool GetVoidValue(const char *name, const std::type_info &valueType, void *pValue) const =0;
};
# 477 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
extern const NameValuePairs &g_nullNameValuePairs;







class Clonable
{
public:
 virtual ~Clonable() {}






 virtual Clonable* Clone() const {throw NotImplemented("Clone() is not implemented yet.");}
};



class Algorithm : public Clonable
{
public:

 virtual ~Algorithm() {}
# 515 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 Algorithm(bool checkSelfTestStatus = true);







 virtual std::string AlgorithmName() const {return "unknown";}
};




class SimpleKeyingInterface
{
public:
 virtual ~SimpleKeyingInterface() {}


 virtual size_t MinKeyLength() const =0;

 virtual size_t MaxKeyLength() const =0;

 virtual size_t DefaultKeyLength() const =0;




 virtual size_t GetValidKeyLength(size_t n) const =0;





 virtual bool IsValidKeyLength(size_t keylength) const
  {return keylength == GetValidKeyLength(keylength);}






 virtual void SetKey(const byte *key, size_t length, const NameValuePairs &params = g_nullNameValuePairs);
# 568 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 void SetKeyWithRounds(const byte *key, size_t length, int rounds);
# 578 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 void SetKeyWithIV(const byte *key, size_t length, const byte *iv, size_t ivLength);
# 587 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 void SetKeyWithIV(const byte *key, size_t length, const byte *iv)
  {SetKeyWithIV(key, length, iv, IVSize());}






 enum IV_Requirement {

  UNIQUE_IV = 0,

  RANDOM_IV,

  UNPREDICTABLE_RANDOM_IV,

  INTERNALLY_GENERATED_IV,

  NOT_RESYNCHRONIZABLE
 };



 virtual IV_Requirement IVRequirement() const =0;





 bool IsResynchronizable() const {return IVRequirement() < NOT_RESYNCHRONIZABLE;}



 bool CanUseRandomIVs() const {return IVRequirement() <= UNPREDICTABLE_RANDOM_IV;}




 bool CanUsePredictableIVs() const {return IVRequirement() <= RANDOM_IV;}





 bool CanUseStructuredIVs() const {return IVRequirement() <= UNIQUE_IV;}





 virtual unsigned int IVSize() const
  {throw NotImplemented(GetAlgorithm().AlgorithmName() + ": this object doesn't support resynchronization");}



 unsigned int DefaultIVLength() const {return IVSize();}




 virtual unsigned int MinIVLength() const {return IVSize();}




 virtual unsigned int MaxIVLength() const {return IVSize();}






 virtual void Resynchronize(const byte *iv, int ivLength=-1) {
  ((void)(iv)); ((void)(ivLength));
  throw NotImplemented(GetAlgorithm().AlgorithmName() + ": this object doesn't support resynchronization");
 }
# 673 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual void GetNextIV(RandomNumberGenerator &rng, byte *iv);

protected:


 virtual const Algorithm & GetAlgorithm() const =0;






 virtual void UncheckedSetKey(const byte *key, unsigned int length, const NameValuePairs &params) =0;




 void ThrowIfInvalidKeyLength(size_t length);






 void ThrowIfResynchronizable();
# 706 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 void ThrowIfInvalidIV(const byte *iv);




 size_t ThrowIfInvalidIVLength(int length);






 const byte * GetIVAndThrowIfInvalid(const NameValuePairs &params, size_t &size);



 inline void AssertValidKeyLength(size_t length) const
  {((void)(length)); ((void)(IsValidKeyLength(length)));}
};






class BlockTransformation : public Algorithm
{
public:

 virtual ~BlockTransformation() {}
# 747 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual void ProcessAndXorBlock(const byte *inBlock, const byte *xorBlock, byte *outBlock) const =0;
# 757 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 void ProcessBlock(const byte *inBlock, byte *outBlock) const
  {ProcessAndXorBlock(inBlock, 
# 758 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h" 3 4
                              __null
# 758 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
                                  , outBlock);}







 void ProcessBlock(byte *inoutBlock) const
  {ProcessAndXorBlock(inoutBlock, 
# 767 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h" 3 4
                                 __null
# 767 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
                                     , inoutBlock);}



 virtual unsigned int BlockSize() const =0;



 virtual unsigned int OptimalDataAlignment() const;


 virtual bool IsPermutation() const {return true;}




 virtual bool IsForwardTransformation() const =0;




 virtual unsigned int OptimalNumberOfParallelBlocks() const {return 1;}


 enum FlagsForAdvancedProcessBlocks {

  BT_InBlockIsCounter=1,

  BT_DontIncrementInOutPointers=2,

  BT_XorInput=4,

  BT_ReverseDirection=8,

  BT_AllowParallel=16};
# 811 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual size_t AdvancedProcessBlocks(const byte *inBlocks, const byte *xorBlocks, byte *outBlocks, size_t length, word32 flags) const;




 inline CipherDir GetCipherDirection() const {return IsForwardTransformation() ? ENCRYPTION : DECRYPTION;}
};




class StreamTransformation : public Algorithm
{
public:

 virtual ~StreamTransformation() {}





 StreamTransformation& Ref() {return *this;}



 virtual unsigned int MandatoryBlockSize() const {return 1;}






 virtual unsigned int OptimalBlockSize() const {return MandatoryBlockSize();}



 virtual unsigned int GetOptimalBlockSizeUsed() const {return 0;}



 virtual unsigned int OptimalDataAlignment() const;






 virtual void ProcessData(byte *outString, const byte *inString, size_t length) =0;







 virtual void ProcessLastBlock(byte *outString, const byte *inString, size_t length);





 virtual unsigned int MinLastBlockSize() const {return 0;}





 inline void ProcessString(byte *inoutString, size_t length)
  {ProcessData(inoutString, inoutString, length);}






 inline void ProcessString(byte *outString, const byte *inString, size_t length)
  {ProcessData(outString, inString, length);}




 inline byte ProcessByte(byte input)
  {ProcessData(&input, &input, 1); return input;}



 virtual bool IsRandomAccess() const =0;






 virtual void Seek(lword pos)
 {
  ((void)(pos));
  ((void)(!IsRandomAccess()));
  throw NotImplemented("StreamTransformation: this object doesn't support random access");
 }





 virtual bool IsSelfInverting() const =0;




 virtual bool IsForwardTransformation() const =0;
};
# 931 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
class HashTransformation : public Algorithm
{
public:

 virtual ~HashTransformation() {}





 HashTransformation& Ref() {return *this;}




 virtual void Update(const byte *input, size_t length) =0;
# 956 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual byte * CreateUpdateSpace(size_t &size) {size=0; return 
# 956 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h" 3 4
                                                               __null
# 956 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
                                                                   ;}






 virtual void Final(byte *digest)
  {TruncatedFinal(digest, DigestSize());}



 virtual void Restart()
  {TruncatedFinal(
# 969 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h" 3 4
                 __null
# 969 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
                     , 0);}



 virtual unsigned int DigestSize() const =0;




 unsigned int TagSize() const {return DigestSize();}





 virtual unsigned int BlockSize() const {return 0;}






 virtual unsigned int OptimalBlockSize() const {return 1;}



 virtual unsigned int OptimalDataAlignment() const;
# 1006 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual void CalculateDigest(byte *digest, const byte *input, size_t length)
  {Update(input, length); Final(digest);}
# 1018 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual bool Verify(const byte *digest)
  {return TruncatedVerify(digest, DigestSize());}
# 1034 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual bool VerifyDigest(const byte *digest, const byte *input, size_t length)
  {Update(input, length); return Verify(digest);}






 virtual void TruncatedFinal(byte *digest, size_t digestSize) =0;
# 1054 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual void CalculateTruncatedDigest(byte *digest, size_t digestSize, const byte *input, size_t length)
  {Update(input, length); TruncatedFinal(digest, digestSize);}
# 1067 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual bool TruncatedVerify(const byte *digest, size_t digestLength);
# 1083 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual bool VerifyTruncatedDigest(const byte *digest, size_t digestLength, const byte *input, size_t length)
  {Update(input, length); return TruncatedVerify(digest, digestLength);}

protected:




 void ThrowIfInvalidTruncatedSize(size_t size) const;
};

typedef HashTransformation HashFunction;



class BlockCipher : public SimpleKeyingInterface, public BlockTransformation
{
protected:
 const Algorithm & GetAlgorithm() const {return *this;}
};



class SymmetricCipher : public SimpleKeyingInterface, public StreamTransformation
{
protected:
 const Algorithm & GetAlgorithm() const {return *this;}
};



class MessageAuthenticationCode : public SimpleKeyingInterface, public HashTransformation
{
protected:
 const Algorithm & GetAlgorithm() const {return *this;}
};





class AuthenticatedSymmetricCipher : public MessageAuthenticationCode, public StreamTransformation
{
public:

 virtual ~AuthenticatedSymmetricCipher() {}





 class BadState : public Exception
 {
 public:
  explicit BadState(const std::string &name, const char *message) : Exception(OTHER_ERROR, name + ": " + message) {}
  explicit BadState(const std::string &name, const char *function, const char *state) : Exception(OTHER_ERROR, name + ": " + function + " was called before " + state) {}
 };



 virtual lword MaxHeaderLength() const =0;


 virtual lword MaxMessageLength() const =0;


 virtual lword MaxFooterLength() const {return 0;}





 virtual bool NeedsPrespecifiedDataLengths() const {return false;}



 void SpecifyDataLengths(lword headerLength, lword messageLength, lword footerLength=0);




 virtual void EncryptAndAuthenticate(byte *ciphertext, byte *mac, size_t macSize, const byte *iv, int ivLength, const byte *header, size_t headerLength, const byte *message, size_t messageLength);




 virtual bool DecryptAndVerify(byte *message, const byte *mac, size_t macLength, const byte *iv, int ivLength, const byte *header, size_t headerLength, const byte *ciphertext, size_t ciphertextLength);






 virtual std::string AlgorithmName() const =0;

protected:
 const Algorithm & GetAlgorithm() const
  {return *static_cast<const MessageAuthenticationCode *>(this);}
 virtual void UncheckedSpecifyDataLengths(lword headerLength, lword messageLength, lword footerLength)
  {((void)(headerLength)); ((void)(messageLength)); ((void)(footerLength));}
};
# 1193 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
class RandomNumberGenerator : public Algorithm
{
public:

 virtual ~RandomNumberGenerator() {}
# 1208 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual void IncorporateEntropy(const byte *input, size_t length)
 {
  ((void)(input)); ((void)(length));
  throw NotImplemented("RandomNumberGenerator: IncorporateEntropy not implemented");
 }



 virtual bool CanIncorporateEntropy() const {return false;}






 virtual byte GenerateByte();






 virtual unsigned int GenerateBit();
# 1240 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual word32 GenerateWord32(word32 min=0, word32 max=0xffffffffUL);
# 1249 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual void GenerateBlock(byte *output, size_t size);
# 1261 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual void GenerateIntoBufferedTransformation(BufferedTransformation &target, const std::string &channel, lword length);



 virtual void DiscardBytes(size_t n);





 template <class IT> void Shuffle(IT begin, IT end)
 {

  for (; begin != end; ++begin)
   std::iter_swap(begin, begin + GenerateWord32(0, end-begin-1));
 }
# 1286 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
};







 RandomNumberGenerator & NullRNG();


class WaitObjectContainer;

class CallStack;


class Waitable
{
public:
 virtual ~Waitable() {}



 virtual unsigned int GetMaxWaitObjectCount() const =0;
# 1319 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual void GetWaitObjects(WaitObjectContainer &container, CallStack const& callStack) =0;





 bool Wait(unsigned long milliseconds, CallStack const& callStack);
};



extern const std::string DEFAULT_CHANNEL;



extern const std::string AAD_CHANNEL;
# 1359 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
class BufferedTransformation : public Algorithm, public Waitable
{
public:

 static const std::string &NULL_CHANNEL;


 virtual ~BufferedTransformation() {}



 BufferedTransformation() : Algorithm(false) {}




 BufferedTransformation& Ref() {return *this;}
# 1385 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  size_t Put(byte inByte, bool blocking=true)
   {return Put(&inByte, 1, blocking);}







  size_t Put(const byte *inString, size_t length, bool blocking=true)
   {return Put2(inString, length, 0, blocking);}






  size_t PutWord16(word16 value, ByteOrder order=BIG_ENDIAN_ORDER, bool blocking=true);






  size_t PutWord32(word32 value, ByteOrder order=BIG_ENDIAN_ORDER, bool blocking=true);
# 1420 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  virtual byte * CreatePutSpace(size_t &size)
   {size=0; return 
# 1421 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h" 3 4
                  __null
# 1421 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
                      ;}




  virtual bool CanModifyInput() const
   {return false;}







  size_t PutModifiable(byte *inString, size_t length, bool blocking=true)
   {return PutModifiable2(inString, length, 0, blocking);}






  bool MessageEnd(int propagation=-1, bool blocking=true)
   {return !!Put2(
# 1444 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h" 3 4
                 __null
# 1444 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
                     , 0, propagation < 0 ? -1 : propagation+1, blocking);}
# 1456 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  size_t PutMessageEnd(const byte *inString, size_t length, int propagation=-1, bool blocking=true)
   {return Put2(inString, length, propagation < 0 ? -1 : propagation+1, blocking);}







  virtual size_t Put2(const byte *inString, size_t length, int messageEnd, bool blocking) =0;







  virtual size_t PutModifiable2(byte *inString, size_t length, int messageEnd, bool blocking)
   {return Put2(inString, length, messageEnd, blocking);}




  struct BlockingInputOnly : public NotImplemented
   {BlockingInputOnly(const std::string &s) : NotImplemented(s + ": Nonblocking input is not implemented by this object.") {}};





  unsigned int GetMaxWaitObjectCount() const;
# 1496 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  void GetWaitObjects(WaitObjectContainer &container, CallStack const& callStack);
# 1512 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  virtual void IsolatedInitialize(const NameValuePairs &parameters) {
   ((void)(parameters));
   throw NotImplemented("BufferedTransformation: this object can't be reinitialized");
  }





  virtual bool IsolatedFlush(bool hardFlush, bool blocking) =0;




  virtual bool IsolatedMessageSeriesEnd(bool blocking)
   {((void)(blocking)); return false;}
# 1537 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  virtual void Initialize(const NameValuePairs &parameters=g_nullNameValuePairs, int propagation=-1);
# 1553 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  virtual bool Flush(bool hardFlush, int propagation=-1, bool blocking=true);
# 1563 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  virtual bool MessageSeriesEnd(int propagation=-1, bool blocking=true);





  virtual void SetAutoSignalPropagation(int propagation)
   {((void)(propagation));}




  virtual int GetAutoSignalPropagation() const {return 0;}
public:
# 1590 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  virtual lword MaxRetrievable() const;



  virtual bool AnyRetrievable() const;





  virtual size_t Get(byte &outByte);






  virtual size_t Get(byte *outString, size_t getMax);






  virtual size_t Peek(byte &outByte) const;







  virtual size_t Peek(byte *outString, size_t peekMax) const;






  size_t GetWord16(word16 &value, ByteOrder order=BIG_ENDIAN_ORDER);






  size_t GetWord32(word32 &value, ByteOrder order=BIG_ENDIAN_ORDER);







  size_t PeekWord16(word16 &value, ByteOrder order=BIG_ENDIAN_ORDER) const;







  size_t PeekWord32(word32 &value, ByteOrder order=BIG_ENDIAN_ORDER) const;
# 1663 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  lword TransferTo(BufferedTransformation &target, lword transferMax=LWORD_MAX, const std::string &channel=DEFAULT_CHANNEL)
   {TransferTo2(target, transferMax, channel); return transferMax;}
# 1676 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  virtual lword Skip(lword skipMax=LWORD_MAX);
# 1687 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  lword CopyTo(BufferedTransformation &target, lword copyMax=LWORD_MAX, const std::string &channel=DEFAULT_CHANNEL) const
   {return CopyRangeTo(target, 0, copyMax, channel);}
# 1700 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  lword CopyRangeTo(BufferedTransformation &target, lword position, lword copyMax=LWORD_MAX, const std::string &channel=DEFAULT_CHANNEL) const
   {lword i = position; CopyRangeTo2(target, i, i+copyMax, channel); return i-position;}
# 1713 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  virtual lword TotalBytesRetrievable() const;





  virtual unsigned int NumberOfMessages() const;




  virtual bool AnyMessages() const;





  virtual bool GetNextMessage();






  virtual unsigned int SkipMessages(unsigned int count=
# 1737 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h" 3 4
                                                      (0x7fffffff * 2U + 1U)
# 1737 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
                                                              );
# 1748 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  unsigned int TransferMessagesTo(BufferedTransformation &target, unsigned int count=
# 1748 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h" 3 4
                                                                                    (0x7fffffff * 2U + 1U)
# 1748 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
                                                                                            , const std::string &channel=DEFAULT_CHANNEL)
   {TransferMessagesTo2(target, count, channel); return count;}
# 1760 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  unsigned int CopyMessagesTo(BufferedTransformation &target, unsigned int count=
# 1760 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h" 3 4
                                                                                (0x7fffffff * 2U + 1U)
# 1760 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
                                                                                        , const std::string &channel=DEFAULT_CHANNEL) const;


  virtual void SkipAll();







  void TransferAllTo(BufferedTransformation &target, const std::string &channel=DEFAULT_CHANNEL)
   {TransferAllTo2(target, channel);}





  void CopyAllTo(BufferedTransformation &target, const std::string &channel=DEFAULT_CHANNEL) const;




  virtual bool GetNextMessageSeries() {return false;}


  virtual unsigned int NumberOfMessagesInThisSeries() const {return NumberOfMessages();}


  virtual unsigned int NumberOfMessageSeries() const {return 0;}
# 1810 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  virtual size_t TransferTo2(BufferedTransformation &target, lword &byteCount, const std::string &channel=DEFAULT_CHANNEL, bool blocking=true) =0;
# 1829 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  virtual size_t CopyRangeTo2(BufferedTransformation &target, lword &begin, lword end=LWORD_MAX, const std::string &channel=DEFAULT_CHANNEL, bool blocking=true) const =0;
# 1844 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  size_t TransferMessagesTo2(BufferedTransformation &target, unsigned int &messageCount, const std::string &channel=DEFAULT_CHANNEL, bool blocking=true);
# 1854 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  size_t TransferAllTo2(BufferedTransformation &target, const std::string &channel=DEFAULT_CHANNEL, bool blocking=true);





  struct NoChannelSupport : public NotImplemented
   {NoChannelSupport(const std::string &name) : NotImplemented(name + ": this object doesn't support multiple channels") {}};

  struct InvalidChannelName : public InvalidArgument
   {InvalidChannelName(const std::string &name, const std::string &channel) : InvalidArgument(name + ": unexpected channel name \"" + channel + "\"") {}};







  size_t ChannelPut(const std::string &channel, byte inByte, bool blocking=true)
   {return ChannelPut(channel, &inByte, 1, blocking);}
# 1882 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  size_t ChannelPut(const std::string &channel, const byte *inString, size_t length, bool blocking=true)
   {return ChannelPut2(channel, inString, length, 0, blocking);}
# 1892 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  size_t ChannelPutModifiable(const std::string &channel, byte *inString, size_t length, bool blocking=true)
   {return ChannelPutModifiable2(channel, inString, length, 0, blocking);}
# 1902 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  size_t ChannelPutWord16(const std::string &channel, word16 value, ByteOrder order=BIG_ENDIAN_ORDER, bool blocking=true);
# 1911 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  size_t ChannelPutWord32(const std::string &channel, word32 value, ByteOrder order=BIG_ENDIAN_ORDER, bool blocking=true);
# 1921 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  bool ChannelMessageEnd(const std::string &channel, int propagation=-1, bool blocking=true)
   {return !!ChannelPut2(channel, 
# 1922 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h" 3 4
                                 __null
# 1922 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
                                     , 0, propagation < 0 ? -1 : propagation+1, blocking);}
# 1933 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  size_t ChannelPutMessageEnd(const std::string &channel, const byte *inString, size_t length, int propagation=-1, bool blocking=true)
   {return ChannelPut2(channel, inString, length, propagation < 0 ? -1 : propagation+1, blocking);}
# 1947 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  virtual byte * ChannelCreatePutSpace(const std::string &channel, size_t &size);
# 1956 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  virtual size_t ChannelPut2(const std::string &channel, const byte *inString, size_t length, int messageEnd, bool blocking);
# 1965 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  virtual size_t ChannelPutModifiable2(const std::string &channel, byte *inString, size_t length, int messageEnd, bool blocking);
# 1975 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  virtual bool ChannelFlush(const std::string &channel, bool hardFlush, int propagation=-1, bool blocking=true);
# 1986 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  virtual bool ChannelMessageSeriesEnd(const std::string &channel, int propagation=-1, bool blocking=true);




  virtual void SetRetrievalChannel(const std::string &channel);
# 2003 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
  virtual bool Attachable() {return false;}





  virtual BufferedTransformation *AttachedTransformation() {((void)(!Attachable())); return 0;}





  virtual const BufferedTransformation *AttachedTransformation() const
   {return const_cast<BufferedTransformation *>(this)->AttachedTransformation();}







  virtual void Detach(BufferedTransformation *newAttachment = 0) {
   ((void)(newAttachment)); ((void)(!Attachable()));
   throw NotImplemented("BufferedTransformation: this object is not attachable");
  }



  virtual void Attach(BufferedTransformation *newAttachment);


protected:


 static int DecrementPropagation(int propagation)
  {return propagation != 0 ? propagation - 1 : 0;}

private:
 byte m_buf[4];
};



 BufferedTransformation & TheBitBucket();



class CryptoMaterial : public NameValuePairs
{
public:

 virtual ~CryptoMaterial() {}



 class InvalidMaterial : public InvalidDataFormat
 {
 public:
  explicit InvalidMaterial(const std::string &s) : InvalidDataFormat(s) {}
 };



 virtual void AssignFrom(const NameValuePairs &source) =0;
# 2082 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual bool Validate(RandomNumberGenerator &rng, unsigned int level) const =0;







 virtual void ThrowIfInvalid(RandomNumberGenerator &rng, unsigned int level) const
  {if (!Validate(rng, level)) throw InvalidMaterial("CryptoMaterial: this object contains invalid values");}
# 2102 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual void Save(BufferedTransformation &bt) const
  {((void)(bt)); throw NotImplemented("CryptoMaterial: this object does not support saving");}
# 2119 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual void Load(BufferedTransformation &bt)
  {((void)(bt)); throw NotImplemented("CryptoMaterial: this object does not support loading");}




 virtual bool SupportsPrecomputation() const {return false;}
# 2135 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual void Precompute(unsigned int precomputationStorage) {
  ((void)(precomputationStorage)); ((void)(!SupportsPrecomputation()));
  throw NotImplemented("CryptoMaterial: this object does not support precomputation");
 }





 virtual void LoadPrecomputation(BufferedTransformation &storedPrecomputation)
  {((void)(storedPrecomputation)); ((void)(!SupportsPrecomputation())); throw NotImplemented("CryptoMaterial: this object does not support precomputation");}




 virtual void SavePrecomputation(BufferedTransformation &storedPrecomputation) const
  {((void)(storedPrecomputation)); ((void)(!SupportsPrecomputation())); throw NotImplemented("CryptoMaterial: this object does not support precomputation");}



 void DoQuickSanityCheck() const {ThrowIfInvalid(NullRNG(), 0);}





};



class GeneratableCryptoMaterial : virtual public CryptoMaterial
{
public:

 virtual ~GeneratableCryptoMaterial() {}
# 2178 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual void GenerateRandom(RandomNumberGenerator &rng, const NameValuePairs &params = g_nullNameValuePairs) {
  ((void)(rng)); ((void)(params));
  throw NotImplemented("GeneratableCryptoMaterial: this object does not support key/parameter generation");
 }







 void GenerateRandomWithKeySize(RandomNumberGenerator &rng, unsigned int keySize);
};


class PublicKey : virtual public CryptoMaterial
{
};


class PrivateKey : public GeneratableCryptoMaterial
{
};


class CryptoParameters : public GeneratableCryptoMaterial
{
};


class AsymmetricAlgorithm : public Algorithm
{
public:

 virtual ~AsymmetricAlgorithm() {}




 virtual CryptoMaterial & AccessMaterial() =0;



 virtual const CryptoMaterial & GetMaterial() const =0;




 void BERDecode(BufferedTransformation &bt)
  {AccessMaterial().Load(bt);}




 void DEREncode(BufferedTransformation &bt) const
  {GetMaterial().Save(bt);}
};


class PublicKeyAlgorithm : public AsymmetricAlgorithm
{
public:

 virtual ~PublicKeyAlgorithm() {}






 CryptoMaterial & AccessMaterial()
  {return AccessPublicKey();}


 const CryptoMaterial & GetMaterial() const
  {return GetPublicKey();}



 virtual PublicKey & AccessPublicKey() =0;


 virtual const PublicKey & GetPublicKey() const
  {return const_cast<PublicKeyAlgorithm *>(this)->AccessPublicKey();}
};


class PrivateKeyAlgorithm : public AsymmetricAlgorithm
{
public:

 virtual ~PrivateKeyAlgorithm() {}




 CryptoMaterial & AccessMaterial() {return AccessPrivateKey();}


 const CryptoMaterial & GetMaterial() const {return GetPrivateKey();}



 virtual PrivateKey & AccessPrivateKey() =0;


 virtual const PrivateKey & GetPrivateKey() const {return const_cast<PrivateKeyAlgorithm *>(this)->AccessPrivateKey();}
};


class KeyAgreementAlgorithm : public AsymmetricAlgorithm
{
public:

 virtual ~KeyAgreementAlgorithm() {}




 CryptoMaterial & AccessMaterial() {return AccessCryptoParameters();}


 const CryptoMaterial & GetMaterial() const {return GetCryptoParameters();}



 virtual CryptoParameters & AccessCryptoParameters() =0;


 virtual const CryptoParameters & GetCryptoParameters() const {return const_cast<KeyAgreementAlgorithm *>(this)->AccessCryptoParameters();}
};




class PK_CryptoSystem
{
public:
 virtual ~PK_CryptoSystem() {}




 virtual size_t MaxPlaintextLength(size_t ciphertextLength) const =0;




 virtual size_t CiphertextLength(size_t plaintextLength) const =0;






 virtual bool ParameterSupported(const char *name) const =0;





 virtual size_t FixedCiphertextLength() const {return 0;}






 virtual size_t FixedMaxPlaintextLength() const {return 0;}





};



class PK_Encryptor : public PK_CryptoSystem, public PublicKeyAlgorithm
{
public:

 class InvalidPlaintextLength : public Exception
 {
 public:
  InvalidPlaintextLength() : Exception(OTHER_ERROR, "PK_Encryptor: invalid plaintext length") {}
 };
# 2376 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual void Encrypt(RandomNumberGenerator &rng,
  const byte *plaintext, size_t plaintextLength,
  byte *ciphertext, const NameValuePairs &parameters = g_nullNameValuePairs) const =0;







 virtual BufferedTransformation * CreateEncryptionFilter(RandomNumberGenerator &rng,
  BufferedTransformation *attachment=
# 2387 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h" 3 4
                                    __null
# 2387 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
                                        , const NameValuePairs &parameters = g_nullNameValuePairs) const;
};



class PK_Decryptor : public PK_CryptoSystem, public PrivateKeyAlgorithm
{
public:

 virtual ~PK_Decryptor() {}
# 2413 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual DecodingResult Decrypt(RandomNumberGenerator &rng,
  const byte *ciphertext, size_t ciphertextLength,
  byte *plaintext, const NameValuePairs &parameters = g_nullNameValuePairs) const =0;







 virtual BufferedTransformation * CreateDecryptionFilter(RandomNumberGenerator &rng,
  BufferedTransformation *attachment=
# 2424 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h" 3 4
                                    __null
# 2424 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
                                        , const NameValuePairs &parameters = g_nullNameValuePairs) const;
# 2439 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 DecodingResult FixedLengthDecrypt(RandomNumberGenerator &rng, const byte *ciphertext, byte *plaintext, const NameValuePairs &parameters = g_nullNameValuePairs) const
  {return Decrypt(rng, ciphertext, FixedCiphertextLength(), plaintext, parameters);}
};
# 2452 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
class PK_SignatureScheme
{
public:




 class InvalidKeyLength : public Exception
 {
 public:
  InvalidKeyLength(const std::string &message) : Exception(OTHER_ERROR, message) {}
 };





 class KeyTooShort : public InvalidKeyLength
 {
 public:
  KeyTooShort() : InvalidKeyLength("PK_Signer: key too short for this signature scheme") {}
 };

 virtual ~PK_SignatureScheme() {}




 virtual size_t SignatureLength() const =0;






 virtual size_t MaxSignatureLength(size_t recoverablePartLength = 0) const
 {((void)(recoverablePartLength)); return SignatureLength();}





 virtual size_t MaxRecoverableLength() const =0;







 virtual size_t MaxRecoverableLengthFromSignatureLength(size_t signatureLength) const =0;





 virtual bool IsProbabilistic() const =0;



 virtual bool AllowNonrecoverablePart() const =0;





 virtual bool SignatureUpfront() const {return false;}





 virtual bool RecoverablePartFirst() const =0;
};





class PK_MessageAccumulator : public HashTransformation
{
public:

 unsigned int DigestSize() const
  {throw NotImplemented("PK_MessageAccumulator: DigestSize() should not be called");}


 void TruncatedFinal(byte *digest, size_t digestSize)
 {
  ((void)(digest)); ((void)(digestSize));
  throw NotImplemented("PK_MessageAccumulator: TruncatedFinal() should not be called");
 }
};



class PK_Signer : public PK_SignatureScheme, public PrivateKeyAlgorithm
{
public:

 virtual ~PK_Signer() {}







 virtual PK_MessageAccumulator * NewSignatureAccumulator(RandomNumberGenerator &rng) const =0;





 virtual void InputRecoverableMessage(PK_MessageAccumulator &messageAccumulator, const byte *recoverableMessage, size_t recoverableMessageLength) const =0;
# 2575 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual size_t Sign(RandomNumberGenerator &rng, PK_MessageAccumulator *messageAccumulator, byte *signature) const;
# 2584 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual size_t SignAndRestart(RandomNumberGenerator &rng, PK_MessageAccumulator &messageAccumulator, byte *signature, bool restart=true) const =0;
# 2593 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual size_t SignMessage(RandomNumberGenerator &rng, const byte *message, size_t messageLen, byte *signature) const;
# 2604 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual size_t SignMessageWithRecovery(RandomNumberGenerator &rng, const byte *recoverableMessage, size_t recoverableMessageLength,
  const byte *nonrecoverableMessage, size_t nonrecoverableMessageLength, byte *signature) const;
};
# 2615 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
class PK_Verifier : public PK_SignatureScheme, public PublicKeyAlgorithm
{
public:

 virtual ~PK_Verifier() {}






 virtual PK_MessageAccumulator * NewVerificationAccumulator() const =0;





 virtual void InputSignature(PK_MessageAccumulator &messageAccumulator, const byte *signature, size_t signatureLength) const =0;





 virtual bool Verify(PK_MessageAccumulator *messageAccumulator) const;





 virtual bool VerifyAndRestart(PK_MessageAccumulator &messageAccumulator) const =0;







 virtual bool VerifyMessage(const byte *message, size_t messageLen,
  const byte *signature, size_t signatureLen) const;







 virtual DecodingResult Recover(byte *recoveredMessage, PK_MessageAccumulator *messageAccumulator) const;







 virtual DecodingResult RecoverAndRestart(byte *recoveredMessage, PK_MessageAccumulator &messageAccumulator) const =0;
# 2679 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual DecodingResult RecoverMessage(byte *recoveredMessage,
  const byte *nonrecoverableMessage, size_t nonrecoverableMessageLength,
  const byte *signature, size_t signatureLength) const;
};






class SimpleKeyAgreementDomain : public KeyAgreementAlgorithm
{
public:

 virtual ~SimpleKeyAgreementDomain() {}




 virtual unsigned int AgreedValueLength() const =0;



 virtual unsigned int PrivateKeyLength() const =0;



 virtual unsigned int PublicKeyLength() const =0;





 virtual void GeneratePrivateKey(RandomNumberGenerator &rng, byte *privateKey) const =0;






 virtual void GeneratePublicKey(RandomNumberGenerator &rng, const byte *privateKey, byte *publicKey) const =0;
# 2728 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual void GenerateKeyPair(RandomNumberGenerator &rng, byte *privateKey, byte *publicKey) const;
# 2742 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual bool Agree(byte *agreedValue, const byte *privateKey, const byte *otherPublicKey, bool validateOtherPublicKey=true) const =0;





};





class AuthenticatedKeyAgreementDomain : public KeyAgreementAlgorithm
{
public:

 virtual ~AuthenticatedKeyAgreementDomain() {}




 virtual unsigned int AgreedValueLength() const =0;



 virtual unsigned int StaticPrivateKeyLength() const =0;



 virtual unsigned int StaticPublicKeyLength() const =0;





 virtual void GenerateStaticPrivateKey(RandomNumberGenerator &rng, byte *privateKey) const =0;






 virtual void GenerateStaticPublicKey(RandomNumberGenerator &rng, const byte *privateKey, byte *publicKey) const =0;
# 2793 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual void GenerateStaticKeyPair(RandomNumberGenerator &rng, byte *privateKey, byte *publicKey) const;



 virtual unsigned int EphemeralPrivateKeyLength() const =0;



 virtual unsigned int EphemeralPublicKeyLength() const =0;





 virtual void GenerateEphemeralPrivateKey(RandomNumberGenerator &rng, byte *privateKey) const =0;






 virtual void GenerateEphemeralPublicKey(RandomNumberGenerator &rng, const byte *privateKey, byte *publicKey) const =0;






 virtual void GenerateEphemeralKeyPair(RandomNumberGenerator &rng, byte *privateKey, byte *publicKey) const;
# 2839 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
 virtual bool Agree(byte *agreedValue,
  const byte *staticPrivateKey, const byte *ephemeralPrivateKey,
  const byte *staticOtherPublicKey, const byte *ephemeralOtherPublicKey,
  bool validateStaticOtherPublicKey=true) const =0;





};
# 2965 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/cryptlib.h"
class BERDecodeErr : public InvalidArgument
{
public:
 BERDecodeErr() : InvalidArgument("BER decode error") {}
 BERDecodeErr(const std::string &s) : InvalidArgument(s) {}
};





class ASN1Object
{
public:
 virtual ~ASN1Object() {}




 virtual void BERDecode(BufferedTransformation &bt) =0;




 virtual void DEREncode(BufferedTransformation &bt) const =0;





 virtual void BEREncode(BufferedTransformation &bt) const {DEREncode(bt);}
};







}
# 5 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/iterhash.h" 2
# 1 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h" 1
# 11 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
# 1 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h" 1
# 24 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
# 1 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h" 1
# 13 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h"
namespace CryptoPP {






template <class T> class simple_ptr
{
public:
 simple_ptr(T *p = 
# 23 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h" 3 4
                  __null
# 23 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h"
                      ) : m_p(p) {}
 ~simple_ptr()
 {
  delete m_p;
  *((volatile T**)&m_p) = 
# 27 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h" 3 4
                         __null
# 27 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h"
                             ;
 }

 T *m_p;
};







template <class T> class member_ptr
{
public:
 explicit member_ptr(T *p = 
# 42 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h" 3 4
                           __null
# 42 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h"
                               ) : m_p(p) {}

 ~member_ptr();

 const T& operator*() const { return *m_p; }
 T& operator*() { return *m_p; }

 const T* operator->() const { return m_p; }
 T* operator->() { return m_p; }

 const T* get() const { return m_p; }
 T* get() { return m_p; }

 T* release()
 {
  T *old_p = m_p;
  *((volatile T**)&m_p) = 
# 58 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h" 3 4
                         __null
# 58 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h"
                             ;
  return old_p;
 }

 void reset(T *p = 0);

protected:
 member_ptr(const member_ptr<T>& rhs);
 void operator=(const member_ptr<T>& rhs);

 T *m_p;
};

template <class T> member_ptr<T>::~member_ptr() {delete m_p;}
template <class T> void member_ptr<T>::reset(T *p) {delete m_p; m_p = p;}






template<class T> class value_ptr : public member_ptr<T>
{
public:
 value_ptr(const T &obj) : member_ptr<T>(new T(obj)) {}
 value_ptr(T *p = 
# 83 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h" 3 4
                 __null
# 83 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h"
                     ) : member_ptr<T>(p) {}
 value_ptr(const value_ptr<T>& rhs)
  : member_ptr<T>(rhs.m_p ? new T(*rhs.m_p) : 
# 85 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h" 3 4
                                             __null
# 85 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h"
                                                 ) {}

 value_ptr<T>& operator=(const value_ptr<T>& rhs);
 bool operator==(const value_ptr<T>& rhs)
 {
  return (!this->m_p && !rhs.m_p) || (this->m_p && rhs.m_p && *this->m_p == *rhs.m_p);
 }
};

template <class T> value_ptr<T>& value_ptr<T>::operator=(const value_ptr<T>& rhs)
{
 T *old_p = this->m_p;
 this->m_p = rhs.m_p ? new T(*rhs.m_p) : 
# 97 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h" 3 4
                                        __null
# 97 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h"
                                            ;
 delete old_p;
 return *this;
}







template<class T> class clonable_ptr : public member_ptr<T>
{
public:
 clonable_ptr(const T &obj) : member_ptr<T>(obj.Clone()) {}
 clonable_ptr(T *p = 
# 112 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h" 3 4
                    __null
# 112 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h"
                        ) : member_ptr<T>(p) {}
 clonable_ptr(const clonable_ptr<T>& rhs)
  : member_ptr<T>(rhs.m_p ? rhs.m_p->Clone() : 
# 114 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h" 3 4
                                              __null
# 114 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h"
                                                  ) {}

 clonable_ptr<T>& operator=(const clonable_ptr<T>& rhs);
};

template <class T> clonable_ptr<T>& clonable_ptr<T>::operator=(const clonable_ptr<T>& rhs)
{
 T *old_p = this->m_p;
 this->m_p = rhs.m_p ? rhs.m_p->Clone() : 
# 122 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h" 3 4
                                         __null
# 122 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h"
                                             ;
 delete old_p;
 return *this;
}
# 134 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h"
template<class T> class counted_ptr
{
public:
 explicit counted_ptr(T *p = 0);
 counted_ptr(const T &r) : m_p(0) {attach(r);}
 counted_ptr(const counted_ptr<T>& rhs);

 ~counted_ptr();

 const T& operator*() const { return *m_p; }
 T& operator*() { return *m_p; }

 const T* operator->() const { return m_p; }
 T* operator->() { return get(); }

 const T* get() const { return m_p; }
 T* get();

 void attach(const T &p);

 counted_ptr<T> & operator=(const counted_ptr<T>& rhs);

private:
 T *m_p;
};

template <class T> counted_ptr<T>::counted_ptr(T *p)
 : m_p(p)
{
 if (m_p)
  m_p->m_referenceCount = 1;
}

template <class T> counted_ptr<T>::counted_ptr(const counted_ptr<T>& rhs)
 : m_p(rhs.m_p)
{
 if (m_p)
  m_p->m_referenceCount++;
}

template <class T> counted_ptr<T>::~counted_ptr()
{
 if (m_p && --m_p->m_referenceCount == 0)
  delete m_p;
}

template <class T> void counted_ptr<T>::attach(const T &r)
{
 if (m_p && --m_p->m_referenceCount == 0)
  delete m_p;
 if (r.m_referenceCount == 0)
 {
  m_p = r.clone();
  m_p->m_referenceCount = 1;
 }
 else
 {
  m_p = const_cast<T *>(&r);
  m_p->m_referenceCount++;
 }
}

template <class T> T* counted_ptr<T>::get()
{
 if (m_p && m_p->m_referenceCount > 1)
 {
  T *temp = m_p->clone();
  m_p->m_referenceCount--;
  m_p = temp;
  m_p->m_referenceCount = 1;
 }
 return m_p;
}

template <class T> counted_ptr<T> & counted_ptr<T>::operator=(const counted_ptr<T>& rhs)
{
 if (m_p != rhs.m_p)
 {
  if (m_p && --m_p->m_referenceCount == 0)
   delete m_p;
  m_p = rhs.m_p;
  if (m_p)
   m_p->m_referenceCount++;
 }
 return *this;
}
# 229 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/smartptr.h"
template <class T> class vector_ptr
{
public:



 vector_ptr(size_t size=0)
  : m_size(size), m_ptr(new T[m_size]) {}
 ~vector_ptr()
  {delete [] m_ptr;}

 T& operator[](size_t index)
  {((void)(m_size && index<this->m_size)); return this->m_ptr[index];}
 const T& operator[](size_t index) const
  {((void)(m_size && index<this->m_size)); return this->m_ptr[index];}

 size_t size() const {return this->m_size;}
 void resize(size_t newSize)
 {
  T *newPtr = new T[newSize];
  for (size_t i=0; i<this->m_size && i<newSize; i++)
   newPtr[i] = m_ptr[i];
  delete [] this->m_ptr;
  this->m_size = newSize;
  this->m_ptr = newPtr;
 }





 operator const void *() const
  {return m_ptr;}
 operator void *()
  {return m_ptr;}

 operator const T *() const
  {return m_ptr;}
 operator T *()
  {return m_ptr;}


private:
 vector_ptr(const vector_ptr<T> &c);
 void operator=(const vector_ptr<T> &x);

 size_t m_size;
 T *m_ptr;
};






template <class T> class vector_member_ptrs
{
public:



 vector_member_ptrs(size_t size=0)
  : m_size(size), m_ptr(new member_ptr<T>[size]) {}
 ~vector_member_ptrs()
  {delete [] this->m_ptr;}

 member_ptr<T>& operator[](size_t index)
  {((void)(index<this->m_size)); return this->m_ptr[index];}
 const member_ptr<T>& operator[](size_t index) const
  {((void)(index<this->m_size)); return this->m_ptr[index];}

 size_t size() const {return this->m_size;}
 void resize(size_t newSize)
 {
  member_ptr<T> *newPtr = new member_ptr<T>[newSize];
  for (size_t i=0; i<this->m_size && i<newSize; i++)
   newPtr[i].reset(this->m_ptr[i].release());
  delete [] this->m_ptr;
  this->m_size = newSize;
  this->m_ptr = newPtr;
 }

private:
 vector_member_ptrs(const vector_member_ptrs<T> &c);
 void operator=(const vector_member_ptrs<T> &x);

 size_t m_size;
 member_ptr<T> *m_ptr;
};

}
# 25 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h" 2
# 60 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
# 1 "/usr/include/byteswap.h" 1 3 4
# 24 "/usr/include/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 25 "/usr/include/byteswap.h" 2 3 4
# 61 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h" 2
# 112 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
namespace CryptoPP {


class Integer;
# 125 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <bool b>
struct CompileAssert
{
 static char dummy[2*b-1];
};
# 177 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
class Empty
{
};


template <class BASE1, class BASE2>
class TwoBases : public BASE1, public BASE2
{
};

template <class BASE1, class BASE2, class BASE3>
class ThreeBases : public BASE1, public BASE2, public BASE3
{
};






template <class T>
class ObjectHolder
{
protected:
 T m_object;
};







class NotCopyable
{
public:
 NotCopyable() {}
private:
    NotCopyable(const NotCopyable &);
    void operator=(const NotCopyable &);
};




template <class T>
struct NewObject
{
 T* operator()() const {return new T;}
};
# 266 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T, class F = NewObject<T>, int instance=0>
class Singleton
{
public:
 Singleton(F objectFactory = F()) : m_objectFactory(objectFactory) {}


 __attribute__((noinline)) const T & Ref() const;

private:
 F m_objectFactory;
};
# 310 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T, class F, int instance>
const T & Singleton<T, F, instance>::Ref() const
{
 static volatile simple_ptr<T> s_pObject;
 T *p = s_pObject.m_p;
 __asm__ __volatile__ ("" ::: "memory");

 if (p)
  return *p;

 T *newObject = m_objectFactory();
 p = s_pObject.m_p;
 __asm__ __volatile__ ("" ::: "memory");

 if (p)
 {
  delete newObject;
  return *p;
 }

 s_pObject.m_p = newObject;
 __asm__ __volatile__ ("" ::: "memory");

 return *newObject;
}
# 359 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
inline void memcpy_s(void *dest, size_t sizeInBytes, const void *src, size_t count)
{



 ((void)(dest != 
# 364 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h" 3 4
__null
# 364 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
)); ((void)(src != 
# 364 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h" 3 4
                               __null
# 364 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
                               ));

 ((void)(sizeInBytes >= count));
 if (count > sizeInBytes)
  throw InvalidArgument("memcpy_s: buffer overflow");
# 377 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
 memcpy(dest, src, count);



}
# 401 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
inline void memmove_s(void *dest, size_t sizeInBytes, const void *src, size_t count)
{



 ((void)(dest != 
# 406 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h" 3 4
__null
# 406 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
)); ((void)(src != 
# 406 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h" 3 4
                               __null
# 406 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
                               ));

 ((void)(sizeInBytes >= count));
 if (count > sizeInBytes)
  throw InvalidArgument("memmove_s: buffer overflow");
# 419 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
 memmove(dest, src, count);



}
# 441 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T>
inline void vec_swap(T& a, T& b)
{
 T t;
 t=a, a=b, b=t;
}







inline void * memset_z(void *ptr, int value, size_t num)
{


 if (__builtin_constant_p(num) && num==0)
  return ptr;

 volatile void* x = memset(ptr, value, num);
 return const_cast<void*>(x);
}






template <class T> inline const T& STDMIN(const T& a, const T& b)
{
 return b < a ? b : a;
}






template <class T> inline const T& STDMAX(const T& a, const T& b)
{

 return a < b ? b : a;
}







#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-compare"



#pragma GCC diagnostic ignored "-Wtype-limits"
# 506 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T1, class T2> inline const T1 UnsignedMin(const T1& a, const T2& b)
{
 static CompileAssert<((sizeof(T1)<=sizeof(T2) && T2(-1)>0) || (sizeof(T1)>sizeof(T2) && T1(-1)>0))> cryptopp_CRYPTOPP_ASSERT_508 __attribute__ ((unused));
 if (sizeof(T1)<=sizeof(T2))
  return b < (T2)a ? (T1)b : a;
 else
  return (T1)b < a ? (T1)b : a;
}





template <class T1, class T2>
inline bool SafeConvert(T1 from, T2 &to)
{
 to = (T2)from;
 if (from != to || (from > 0) != (to > 0))
  return false;
 return true;
}





template <class T>
std::string IntToString(T value, unsigned int base = 10)
{

 static const unsigned int HIGH_BIT = (1U << 31);
 const char CH = !!(base & HIGH_BIT) ? 'A' : 'a';
 base &= ~HIGH_BIT;

 ((void)(base >= 2));
 if (value == 0)
  return "0";

 bool negate = false;
 if (value < 0)
 {
  negate = true;
  value = 0-value;
 }
 std::string result;
 while (value > 0)
 {
  T digit = value % base;
  result = char((digit < 10 ? '0' : (CH - 10)) + digit) + result;
  value /= base;
 }
 if (negate)
  result = "-" + result;
 return result;
}







template <>
std::string IntToString<word64>(word64 value, unsigned int base);
# 590 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <>
std::string IntToString<Integer>(Integer value, unsigned int base);






#pragma GCC diagnostic pop
# 614 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T>
unsigned int Parity(T value)
{
 for (unsigned int i=8*sizeof(value)/2; i>0; i/=2)
  value ^= value >> i;
 return (unsigned int)value&1;
}




template <class T>
unsigned int BytePrecision(const T &value)
{
 if (!value)
  return 0;

 unsigned int l=0, h=8*sizeof(value);
 while (h-l > 8)
 {
  unsigned int t = (l+h)/2;
  if (value >> t)
   l = t;
  else
   h = t;
 }

 return h/8;
}




template <class T>
unsigned int BitPrecision(const T &value)
{
 if (!value)
  return 0;

 unsigned int l=0, h=8*sizeof(value);

 while (h-l > 1)
 {
  unsigned int t = (l+h)/2;
  if (value >> t)
   l = t;
  else
   h = t;
 }

 return h;
}







inline unsigned int TrailingZeros(word32 v)
{



 ((void)(v != 0));



 return (unsigned int)__builtin_ctz(v);
# 696 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
}







inline unsigned int TrailingZeros(word64 v)
{



 ((void)(v != 0));



 return (unsigned int)__builtin_ctzll(v);







}
# 730 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T>
inline T Crop(T value, size_t bits)
{
 if (bits < 8*sizeof(value))
     return T(value & ((T(1) << bits) - 1));
 else
  return value;
}





inline size_t BitsToBytes(size_t bitCount)
{
 return ((bitCount+7)/(8));
}






inline size_t BytesToWords(size_t byteCount)
{
 return ((byteCount+WORD_SIZE-1)/WORD_SIZE);
}






inline size_t BitsToWords(size_t bitCount)
{
 return ((bitCount+WORD_BITS-1)/(WORD_BITS));
}






inline size_t BitsToDwords(size_t bitCount)
{
 return ((bitCount+2*WORD_BITS-1)/(2*WORD_BITS));
}







 void xorbuf(byte *buf, const byte *mask, size_t count);
# 793 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
 void xorbuf(byte *output, const byte *input, const byte *mask, size_t count);
# 804 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
 bool VerifyBufsEqual(const byte *buf1, const byte *buf2, size_t count);






template <class T>
inline bool IsPowerOf2(const T &value)
{
 return value > 0 && (value & (value-1)) == 0;
}
# 840 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T1, class T2>
inline T1 SaturatingSubtract(const T1 &a, const T2 &b)
{

 return T1((a > b) ? (a - b) : 0);
}
# 855 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T1, class T2>
inline T1 SaturatingSubtract1(const T1 &a, const T2 &b)
{

 return T1((a > b) ? (a - b) : 1);
}







template <class T1, class T2>
inline T2 ModPowerOf2(const T1 &a, const T2 &b)
{
 ((void)(IsPowerOf2(b)));

 return T2(a) & SaturatingSubtract(b,1U);
}







template <class T1, class T2>
inline T1 RoundDownToMultipleOf(const T1 &n, const T2 &m)
{
 if (IsPowerOf2(m))
  return n - ModPowerOf2(n, m);
 else
  return n - n%m;
}
# 898 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T1, class T2>
inline T1 RoundUpToMultipleOf(const T1 &n, const T2 &m)
{
 if (n > (
# 901 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h" 3 4
         (18446744073709551615UL)
# 901 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
                 /sizeof(T1))-m-1)
  throw InvalidArgument("RoundUpToMultipleOf: integer overflow");
 return RoundDownToMultipleOf(T1(n+m-1), m);
}
# 916 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T>
inline unsigned int GetAlignmentOf(T *dummy=
# 917 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h" 3 4
                                           __null
# 917 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
                                               )
{





 ((void)(dummy));





 return __alignof__(T);
# 941 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
}







inline bool IsAlignedOn(const void *ptr, unsigned int alignment)
{
 return alignment==1 || (IsPowerOf2(alignment) ? ModPowerOf2((size_t)ptr, alignment) == 0 : (size_t)ptr % alignment == 0);
}






template <class T>
inline bool IsAligned(const void *ptr, T *dummy=
# 960 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h" 3 4
                                               __null
# 960 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
                                                   )
{
 ((void)(dummy));
 return IsAlignedOn(ptr, GetAlignmentOf<T>());
}


 typedef LittleEndian NativeByteOrder;
# 982 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
inline ByteOrder GetNativeByteOrder()
{
 return NativeByteOrder::ToEnum();
}




inline bool NativeByteOrderIs(ByteOrder order)
{
 return order == GetNativeByteOrder();
}
# 1004 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T>
inline CipherDir GetCipherDir(const T &obj)
{
 return obj.IsForwardTransformation() ? ENCRYPTION : DECRYPTION;
}
# 1018 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
 void CallNewHandler();







inline void IncrementCounterByOne(byte *inout, unsigned int size)
{
 ((void)(inout != 
# 1028 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h" 3 4
__null
# 1028 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
)); ((void)(size < 0x7fffffff));
 for (int i=int(size-1), carry=1; i>=0 && carry; i--)
  carry = !++inout[i];
}
# 1040 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
inline void IncrementCounterByOne(byte *output, const byte *input, unsigned int size)
{
 ((void)(output != 
# 1042 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h" 3 4
__null
# 1042 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
)); ((void)(input != 
# 1042 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h" 3 4
                                 __null
# 1042 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
                                 )); ((void)(size < 0x7fffffff));

 int i, carry;
 for (i=int(size-1), carry=1; i>=0 && carry; i--)
  carry = ((output[i] = input[i]+1) == 0);
 memcpy_s(output, size, input, size_t(i)+1);
}





template <class T>
inline void ConditionalSwap(bool c, T &a, T &b)
{
 T t = c * (a ^ b);
 a ^= t;
 b ^= t;
}





template <class T>
inline void ConditionalSwapPointers(bool c, T &a, T &b)
{
 ptrdiff_t t = size_t(c) * (a - b);
 a -= t;
 b += t;
}
# 1081 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T>
void SecureWipeBuffer(T *buf, size_t n)
{

 volatile T *p = buf+n;
 while (n--)
  *((volatile T*)(--p)) = 0;
}







template<> inline void SecureWipeBuffer(byte *buf, size_t n)
{
 volatile byte *p = buf;

 asm volatile("rep stosb" : "+c"(n), "+D"(p) : "a"(0) : "memory");



}





template<> inline void SecureWipeBuffer(word16 *buf, size_t n)
{
 volatile word16 *p = buf;

 asm volatile("rep stosw" : "+c"(n), "+D"(p) : "a"(0) : "memory");



}





template<> inline void SecureWipeBuffer(word32 *buf, size_t n)
{
 volatile word32 *p = buf;

 asm volatile("rep stosl" : "+c"(n), "+D"(p) : "a"(0) : "memory");



}





template<> inline void SecureWipeBuffer(word64 *buf, size_t n)
{

 volatile word64 *p = buf;

 asm volatile("rep stosq" : "+c"(n), "+D"(p) : "a"(0) : "memory");






}
# 1188 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T>
inline void SecureWipeArray(T *buf, size_t n)
{
 if (sizeof(T) % 8 == 0 && GetAlignmentOf<T>() % GetAlignmentOf<word64>() == 0)
  SecureWipeBuffer((word64 *)(void *)buf, n * (sizeof(T)/8));
 else if (sizeof(T) % 4 == 0 && GetAlignmentOf<T>() % GetAlignmentOf<word32>() == 0)
  SecureWipeBuffer((word32 *)(void *)buf, n * (sizeof(T)/4));
 else if (sizeof(T) % 2 == 0 && GetAlignmentOf<T>() % GetAlignmentOf<word16>() == 0)
  SecureWipeBuffer((word16 *)(void *)buf, n * (sizeof(T)/2));
 else
  SecureWipeBuffer((byte *)(void *)buf, n * sizeof(T));
}
# 1214 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
std::string StringNarrow(const wchar_t *str, bool throwOnError = true);
# 1294 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
 void* AlignedAllocate(size_t size);
 void AlignedDeallocate(void *ptr);




 void * UnalignedAllocate(size_t size);



 void UnalignedDeallocate(void *ptr);
# 1318 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T> inline T rotlFixed(T x, unsigned int y)
{




 static const unsigned int THIS_SIZE = sizeof(T)*8;
 static const unsigned int MASK = THIS_SIZE-1;
 ((void)(y < THIS_SIZE));
 return T((x<<y)|(x>>(-y&MASK)));
}
# 1340 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T> inline T rotrFixed(T x, unsigned int y)
{




 static const unsigned int THIS_SIZE = sizeof(T)*8;
 static const unsigned int MASK = THIS_SIZE-1;
 ((void)(y < THIS_SIZE));
 return T((x >> y)|(x<<(-y&MASK)));
}
# 1362 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T> inline T rotlVariable(T x, unsigned int y)
{
 static const unsigned int THIS_SIZE = sizeof(T)*8;
 static const unsigned int MASK = THIS_SIZE-1;
 ((void)(y < THIS_SIZE));
 return T((x<<y)|(x>>(-y&MASK)));
}
# 1380 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T> inline T rotrVariable(T x, unsigned int y)
{
 static const unsigned int THIS_SIZE = sizeof(T)*8;
 static const unsigned int MASK = THIS_SIZE-1;
 ((void)(y < THIS_SIZE));
 return T((x>>y)|(x<<(-y&MASK)));
}
# 1395 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T> inline T rotlMod(T x, unsigned int y)
{
 static const unsigned int THIS_SIZE = sizeof(T)*8;
 static const unsigned int MASK = THIS_SIZE-1;
 return T((x<<(y&MASK))|(x>>(-y&MASK)));
}
# 1409 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T> inline T rotrMod(T x, unsigned int y)
{
 static const unsigned int THIS_SIZE = sizeof(T)*8;
 static const unsigned int MASK = THIS_SIZE-1;
 return T((x>>(y&MASK))|(x<<(-y&MASK)));
}
# 1706 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T>
inline unsigned int GetByte(ByteOrder order, T value, unsigned int index)
{
 if (order == LITTLE_ENDIAN_ORDER)
  return (unsigned int)byte((value)>>(8*(index)));
 else
  return (unsigned int)byte((value)>>(8*(sizeof(T)-index-1)));
}




inline byte ByteReverse(byte value)
{
 return value;
}





inline word16 ByteReverse(word16 value)
{

 return 
# 1730 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h" 3 4
       (__extension__ ({ unsigned short int __v, __x = (unsigned short int) (
# 1730 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
       value
# 1730 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h" 3 4
       ); if (__builtin_constant_p (__x)) __v = ((unsigned short int) ((((__x) >> 8) & 0xff) | (((__x) & 0xff) << 8))); else __asm__ ("rorw $8, %w0" : "=r" (__v) : "0" (__x) : "cc"); __v; }))
# 1730 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
                      ;





}





inline word32 ByteReverse(word32 value)
{

 __asm__ ("bswap %0" : "=r" (value) : "0" (value));
 return value;
# 1761 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
}





inline word64 ByteReverse(word64 value)
{

 __asm__ ("bswap %0" : "=r" (value) : "0" (value));
 return value;
# 1783 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
}




inline byte BitReverse(byte value)
{
 value = byte((value & 0xAA) >> 1) | byte((value & 0x55) << 1);
 value = byte((value & 0xCC) >> 2) | byte((value & 0x33) << 2);
 return rotlFixed(value, 4U);
}




inline word16 BitReverse(word16 value)
{
 value = word16((value & 0xAAAA) >> 1) | word16((value & 0x5555) << 1);
 value = word16((value & 0xCCCC) >> 2) | word16((value & 0x3333) << 2);
 value = word16((value & 0xF0F0) >> 4) | word16((value & 0x0F0F) << 4);
 return ByteReverse(value);
}




inline word32 BitReverse(word32 value)
{
 value = word32((value & 0xAAAAAAAA) >> 1) | word32((value & 0x55555555) << 1);
 value = word32((value & 0xCCCCCCCC) >> 2) | word32((value & 0x33333333) << 2);
 value = word32((value & 0xF0F0F0F0) >> 4) | word32((value & 0x0F0F0F0F) << 4);
 return ByteReverse(value);
}




inline word64 BitReverse(word64 value)
{



 value = word64((value & 0xAAAAAAAAAAAAAAAAUL) >> 1) | word64((value & 0x5555555555555555UL) << 1);
 value = word64((value & 0xCCCCCCCCCCCCCCCCUL) >> 2) | word64((value & 0x3333333333333333UL) << 2);
 value = word64((value & 0xF0F0F0F0F0F0F0F0UL) >> 4) | word64((value & 0x0F0F0F0F0F0F0F0FUL) << 4);
 return ByteReverse(value);

}







template <class T>
inline T BitReverse(T value)
{
 if (sizeof(T) == 1)
  return (T)BitReverse((byte)value);
 else if (sizeof(T) == 2)
  return (T)BitReverse((word16)value);
 else if (sizeof(T) == 4)
  return (T)BitReverse((word32)value);
 else
 {
  ((void)(sizeof(T) == 8));
  return (T)BitReverse((word64)value);
 }
}
# 1861 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T>
inline T ConditionalByteReverse(ByteOrder order, T value)
{
 return NativeByteOrderIs(order) ? value : ByteReverse(value);
}
# 1902 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T>
void ByteReverse(T *out, const T *in, size_t byteCount)
{
 ((void)(byteCount % sizeof(T) == 0));
 size_t count = byteCount/sizeof(T);
 for (size_t i=0; i<count; i++)
  out[i] = ByteReverse(in[i]);
}
# 1924 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T>
inline void ConditionalByteReverse(ByteOrder order, T *out, const T *in, size_t byteCount)
{
 if (!NativeByteOrderIs(order))
  ByteReverse(out, in, byteCount);
 else if (in != out)
  memcpy_s(out, byteCount, in, byteCount);
}

template <class T>
inline void GetUserKey(ByteOrder order, T *out, size_t outlen, const byte *in, size_t inlen)
{
 const size_t U = sizeof(T);
 ((void)(inlen <= outlen*U));
 memcpy_s(out, outlen*U, in, inlen);
 memset_z((byte *)out+inlen, 0, outlen*U-inlen);
 ConditionalByteReverse(order, out, out, RoundUpToMultipleOf(inlen, U));
}


inline byte UnalignedGetWordNonTemplate(ByteOrder order, const byte *block, const byte *)
{
 ((void)(order));
 return block[0];
}

inline word16 UnalignedGetWordNonTemplate(ByteOrder order, const byte *block, const word16 *)
{
 return (order == BIG_ENDIAN_ORDER)
  ? block[1] | (block[0] << 8)
  : block[0] | (block[1] << 8);
}

inline word32 UnalignedGetWordNonTemplate(ByteOrder order, const byte *block, const word32 *)
{
 return (order == BIG_ENDIAN_ORDER)
  ? word32(block[3]) | (word32(block[2]) << 8) | (word32(block[1]) << 16) | (word32(block[0]) << 24)
  : word32(block[0]) | (word32(block[1]) << 8) | (word32(block[2]) << 16) | (word32(block[3]) << 24);
}

inline word64 UnalignedGetWordNonTemplate(ByteOrder order, const byte *block, const word64 *)
{
 return (order == BIG_ENDIAN_ORDER)
  ?
  (word64(block[7]) |
  (word64(block[6]) << 8) |
  (word64(block[5]) << 16) |
  (word64(block[4]) << 24) |
  (word64(block[3]) << 32) |
  (word64(block[2]) << 40) |
  (word64(block[1]) << 48) |
  (word64(block[0]) << 56))
  :
  (word64(block[0]) |
  (word64(block[1]) << 8) |
  (word64(block[2]) << 16) |
  (word64(block[3]) << 24) |
  (word64(block[4]) << 32) |
  (word64(block[5]) << 40) |
  (word64(block[6]) << 48) |
  (word64(block[7]) << 56));
}

inline void UnalignedbyteNonTemplate(ByteOrder order, byte *block, byte value, const byte *xorBlock)
{
 ((void)(order));
 block[0] = (byte)(xorBlock ? (value ^ xorBlock[0]) : value);
}

inline void UnalignedbyteNonTemplate(ByteOrder order, byte *block, word16 value, const byte *xorBlock)
{
 if (order == BIG_ENDIAN_ORDER)
 {
  if (xorBlock)
  {
   block[0] = xorBlock[0] ^ byte((value)>>(8*(1)));
   block[1] = xorBlock[1] ^ byte((value)>>(8*(0)));
  }
  else
  {
   block[0] = byte((value)>>(8*(1)));
   block[1] = byte((value)>>(8*(0)));
  }
 }
 else
 {
  if (xorBlock)
  {
   block[0] = xorBlock[0] ^ byte((value)>>(8*(0)));
   block[1] = xorBlock[1] ^ byte((value)>>(8*(1)));
  }
  else
  {
   block[0] = byte((value)>>(8*(0)));
   block[1] = byte((value)>>(8*(1)));
  }
 }
}

inline void UnalignedbyteNonTemplate(ByteOrder order, byte *block, word32 value, const byte *xorBlock)
{
 if (order == BIG_ENDIAN_ORDER)
 {
  if (xorBlock)
  {
   block[0] = xorBlock[0] ^ byte((value)>>(8*(3)));
   block[1] = xorBlock[1] ^ byte((value)>>(8*(2)));
   block[2] = xorBlock[2] ^ byte((value)>>(8*(1)));
   block[3] = xorBlock[3] ^ byte((value)>>(8*(0)));
  }
  else
  {
   block[0] = byte((value)>>(8*(3)));
   block[1] = byte((value)>>(8*(2)));
   block[2] = byte((value)>>(8*(1)));
   block[3] = byte((value)>>(8*(0)));
  }
 }
 else
 {
  if (xorBlock)
  {
   block[0] = xorBlock[0] ^ byte((value)>>(8*(0)));
   block[1] = xorBlock[1] ^ byte((value)>>(8*(1)));
   block[2] = xorBlock[2] ^ byte((value)>>(8*(2)));
   block[3] = xorBlock[3] ^ byte((value)>>(8*(3)));
  }
  else
  {
   block[0] = byte((value)>>(8*(0)));
   block[1] = byte((value)>>(8*(1)));
   block[2] = byte((value)>>(8*(2)));
   block[3] = byte((value)>>(8*(3)));
  }
 }
}

inline void UnalignedbyteNonTemplate(ByteOrder order, byte *block, word64 value, const byte *xorBlock)
{
 if (order == BIG_ENDIAN_ORDER)
 {
  if (xorBlock)
  {
   block[0] = xorBlock[0] ^ byte((value)>>(8*(7)));
   block[1] = xorBlock[1] ^ byte((value)>>(8*(6)));
   block[2] = xorBlock[2] ^ byte((value)>>(8*(5)));
   block[3] = xorBlock[3] ^ byte((value)>>(8*(4)));
   block[4] = xorBlock[4] ^ byte((value)>>(8*(3)));
   block[5] = xorBlock[5] ^ byte((value)>>(8*(2)));
   block[6] = xorBlock[6] ^ byte((value)>>(8*(1)));
   block[7] = xorBlock[7] ^ byte((value)>>(8*(0)));
  }
  else
  {
   block[0] = byte((value)>>(8*(7)));
   block[1] = byte((value)>>(8*(6)));
   block[2] = byte((value)>>(8*(5)));
   block[3] = byte((value)>>(8*(4)));
   block[4] = byte((value)>>(8*(3)));
   block[5] = byte((value)>>(8*(2)));
   block[6] = byte((value)>>(8*(1)));
   block[7] = byte((value)>>(8*(0)));
  }
 }
 else
 {
  if (xorBlock)
  {
   block[0] = xorBlock[0] ^ byte((value)>>(8*(0)));
   block[1] = xorBlock[1] ^ byte((value)>>(8*(1)));
   block[2] = xorBlock[2] ^ byte((value)>>(8*(2)));
   block[3] = xorBlock[3] ^ byte((value)>>(8*(3)));
   block[4] = xorBlock[4] ^ byte((value)>>(8*(4)));
   block[5] = xorBlock[5] ^ byte((value)>>(8*(5)));
   block[6] = xorBlock[6] ^ byte((value)>>(8*(6)));
   block[7] = xorBlock[7] ^ byte((value)>>(8*(7)));
  }
  else
  {
   block[0] = byte((value)>>(8*(0)));
   block[1] = byte((value)>>(8*(1)));
   block[2] = byte((value)>>(8*(2)));
   block[3] = byte((value)>>(8*(3)));
   block[4] = byte((value)>>(8*(4)));
   block[5] = byte((value)>>(8*(5)));
   block[6] = byte((value)>>(8*(6)));
   block[7] = byte((value)>>(8*(7)));
  }
 }
}


template <class T>
inline T GetWord(bool assumeAligned, ByteOrder order, const byte *block)
{






 ((void)(assumeAligned));



 T temp;
 memcpy(&temp, block, sizeof(T));
 return ConditionalByteReverse(order, temp);

}

template <class T>
inline void GetWord(bool assumeAligned, ByteOrder order, T &result, const byte *block)
{
 result = GetWord<T>(assumeAligned, order, block);
}

template <class T>
inline void PutWord(bool assumeAligned, ByteOrder order, byte *block, T value, const byte *xorBlock = 
# 2142 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h" 3 4
                                                                                                     __null
# 2142 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
                                                                                                         )
{







 ((void)(assumeAligned));



 T t1, t2 = 0;
 t1 = ConditionalByteReverse(order, value);
 if (xorBlock) memcpy(&t2, xorBlock, sizeof(T));
 memmove(block, &(t1 ^= t2), sizeof(T));

}
# 2178 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T, class B, bool A=false>
class GetBlock
{
public:


 GetBlock(const void *block)
  : m_block((const byte *)block) {}





 template <class U>
 inline GetBlock<T, B, A> & operator()(U &x)
 {
  static CompileAssert<(sizeof(U) >= sizeof(T))> cryptopp_CRYPTOPP_ASSERT_2194 __attribute__ ((unused));
  x = GetWord<T>(A, B::ToEnum(), m_block);
  m_block += sizeof(T);
  return *this;
 }

private:
 const byte *m_block;
};
# 2220 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T, class B, bool A=false>
class PutBlock
{
public:



 PutBlock(const void *xorBlock, void *block)
  : m_xorBlock((const byte *)xorBlock), m_block((byte *)block) {}





 template <class U>
 inline PutBlock<T, B, A> & operator()(U x)
 {
  PutWord(A, B::ToEnum(), m_block, (T)x, m_xorBlock);
  m_block += sizeof(T);
  if (m_xorBlock)
   m_xorBlock += sizeof(T);
  return *this;
 }

private:
 const byte *m_xorBlock;
 byte *m_block;
};
# 2258 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <class T, class B, bool GA=false, bool PA=false>
struct BlockGetAndPut
{

 static inline GetBlock<T, B, GA> Get(const void *block) {return GetBlock<T, B, GA>(block);}
 typedef PutBlock<T, B, PA> Put;
};

template <class T>
std::string WordToString(T value, ByteOrder order = BIG_ENDIAN_ORDER)
{
 if (!NativeByteOrderIs(order))
  value = ByteReverse(value);

 return std::string((char *)&value, sizeof(value));
}

template <class T>
T StringToWord(const std::string &str, ByteOrder order = BIG_ENDIAN_ORDER)
{
 T value = 0;
 memcpy_s(&value, sizeof(value), str.data(), UnsignedMin(str.size(), sizeof(value)));
 return NativeByteOrderIs(order) ? value : ByteReverse(value);
}
# 2292 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <bool overflow> struct SafeShifter;





template<> struct SafeShifter<true>
{





 template <class T>
 static inline T RightShift(T value, unsigned int bits)
 {
  ((void)(value)); ((void)(bits));
  return 0;
 }






 template <class T>
 static inline T LeftShift(T value, unsigned int bits)
 {
  ((void)(value)); ((void)(bits));
  return 0;
 }
};





template<> struct SafeShifter<false>
{





 template <class T>
 static inline T RightShift(T value, unsigned int bits)
 {
  return value >> bits;
 }






 template <class T>
 static inline T LeftShift(T value, unsigned int bits)
 {
  return value << bits;
 }
};
# 2363 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <unsigned int bits, class T>
inline T SafeRightShift(T value)
{
 return SafeShifter<(bits>=(8*sizeof(T)))>::RightShift(value, bits);
}
# 2378 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
template <unsigned int bits, class T>
inline T SafeLeftShift(T value)
{
 return SafeShifter<(bits>=(8*sizeof(T)))>::LeftShift(value, bits);
}
# 2396 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/misc.h"
}
# 12 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h" 2
# 21 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
namespace CryptoPP {






template<class T>
class AllocatorBase
{
public:
 typedef T value_type;
 typedef size_t size_type;



 typedef std::ptrdiff_t difference_type;

 typedef T * pointer;
 typedef const T * const_pointer;
 typedef T & reference;
 typedef const T & const_reference;

 pointer address(reference r) const {return (&r);}
 const_pointer address(const_reference r) const {return (&r); }
 void construct(pointer p, const T& val) {new (p) T(val);}
 void destroy(pointer p) {((void)(p)); p->~T();}







 size_type max_size() const {return (
# 55 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h" 3 4
                                                       (18446744073709551615UL)
# 55 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
                                                               /sizeof(T));}
# 78 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
protected:
# 91 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
 static void CheckSize(size_t size)
 {

  if (size > (
# 94 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h" 3 4
             (18446744073709551615UL)
# 94 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
                     /sizeof(T)))
   throw InvalidArgument("AllocatorBase: requested size would cause integer overflow");
 }
};
# 118 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
template <class T, class A>
typename A::pointer StandardReallocate(A& alloc, T *oldPtr, typename A::size_type oldSize, typename A::size_type newSize, bool preserve)
{
 ((void)((oldPtr && oldSize) || !(oldPtr || oldSize)));
 if (oldSize == newSize)
  return oldPtr;

 if (preserve)
 {
  typename A::pointer newPointer = alloc.allocate(newSize, 
# 127 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h" 3 4
                                                          __null
# 127 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
                                                              );
  const size_t copySize = STDMIN(oldSize, newSize) * sizeof(T);

  if (oldPtr && newPointer) {memcpy_s(newPointer, copySize, oldPtr, copySize);}
  alloc.deallocate(oldPtr, oldSize);
  return newPointer;
 }
 else
 {
  alloc.deallocate(oldPtr, oldSize);
  return alloc.allocate(newSize, 
# 137 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h" 3 4
                                __null
# 137 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
                                    );
 }
}
# 150 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
template <class T, bool T_Align16 = false>
class AllocatorWithCleanup : public AllocatorBase<T>
{
public:
 typedef typename AllocatorBase<T>::value_type value_type;typedef typename AllocatorBase<T>::size_type size_type;typedef typename AllocatorBase<T>::difference_type difference_type;typedef typename AllocatorBase<T>::pointer pointer;typedef typename AllocatorBase<T>::const_pointer const_pointer;typedef typename AllocatorBase<T>::reference reference;typedef typename AllocatorBase<T>::const_reference const_reference;
# 171 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
 pointer allocate(size_type size, const void *ptr = 
# 171 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h" 3 4
                                                   __null
# 171 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
                                                       )
 {
  ((void)(ptr)); ((void)(ptr == 
# 173 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h" 3 4
                       __null
# 173 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
                       ));
  this->CheckSize(size);
  if (size == 0)
   return 
# 176 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h" 3 4
         __null
# 176 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
             ;



  if (T_Align16 && size*sizeof(T) >= 16)
   return (pointer)AlignedAllocate(size*sizeof(T));


  return (pointer)UnalignedAllocate(size*sizeof(T));
 }
# 195 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
 void deallocate(void *ptr, size_type size)
 {
  ((void)((ptr && size) || !(ptr || size)));
  SecureWipeArray((pointer)ptr, size);


  if (T_Align16 && size*sizeof(T) >= 16)
   return AlignedDeallocate(ptr);


  UnalignedDeallocate(ptr);
 }
# 221 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
 pointer reallocate(T *oldPtr, size_type oldSize, size_type newSize, bool preserve)
 {
  ((void)((oldPtr && oldSize) || !(oldPtr || oldSize)));
  return StandardReallocate(*this, oldPtr, oldSize, newSize, preserve);
 }
# 236 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
    template <class U> struct rebind { typedef AllocatorWithCleanup<U, T_Align16> other; };




};

extern template class AllocatorWithCleanup<byte>;
extern template class AllocatorWithCleanup<word16>;
extern template class AllocatorWithCleanup<word32>;
extern template class AllocatorWithCleanup<word64>;

extern template class AllocatorWithCleanup<word128, true>;
# 262 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
template <class T>
class NullAllocator : public AllocatorBase<T>
{
public:

 typedef typename AllocatorBase<T>::value_type value_type;typedef typename AllocatorBase<T>::size_type size_type;typedef typename AllocatorBase<T>::difference_type difference_type;typedef typename AllocatorBase<T>::pointer pointer;typedef typename AllocatorBase<T>::const_pointer const_pointer;typedef typename AllocatorBase<T>::reference reference;typedef typename AllocatorBase<T>::const_reference const_reference;




 pointer allocate(size_type n, const void* unused = 
# 272 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h" 3 4
                                                   __null
# 272 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
                                                       )
 {
  ((void)(n)); ((void)(unused));
  ((void)(false)); return 
# 275 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h" 3 4
                                __null
# 275 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
                                    ;
 }

 void deallocate(void *p, size_type n)
 {
  ((void)(p)); ((void)(n));
  ((void)(false));
 }

 size_type max_size() const {return 0;}

};
# 300 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
template <class T, size_t S, class A = NullAllocator<T>, bool T_Align16 = false>
class FixedSizeAllocatorWithCleanup : public AllocatorBase<T>
{
public:
 typedef typename AllocatorBase<T>::value_type value_type;typedef typename AllocatorBase<T>::size_type size_type;typedef typename AllocatorBase<T>::difference_type difference_type;typedef typename AllocatorBase<T>::pointer pointer;typedef typename AllocatorBase<T>::const_pointer const_pointer;typedef typename AllocatorBase<T>::reference reference;typedef typename AllocatorBase<T>::const_reference const_reference;


 FixedSizeAllocatorWithCleanup() : m_allocated(false) {}
# 321 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
 pointer allocate(size_type size)
 {
  ((void)(IsAlignedOn(m_array, 8)));

  if (size <= S && !m_allocated)
  {
   m_allocated = true;
   return GetAlignedArray();
  }
  else
   return m_fallbackAllocator.allocate(size);
 }
# 347 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
 pointer allocate(size_type size, const void *hint)
 {
  if (size <= S && !m_allocated)
  {
   m_allocated = true;
   return GetAlignedArray();
  }
  else
   return m_fallbackAllocator.allocate(size, hint);
 }
# 366 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
 void deallocate(void *ptr, size_type size)
 {
  if (ptr == GetAlignedArray())
  {
   ((void)(size <= S));
   ((void)(m_allocated));
   m_allocated = false;
   SecureWipeArray((pointer)ptr, size);
  }
  else
   m_fallbackAllocator.deallocate(ptr, size);
 }
# 396 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
 pointer reallocate(pointer oldPtr, size_type oldSize, size_type newSize, bool preserve)
 {
  if (oldPtr == GetAlignedArray() && newSize <= S)
  {
   ((void)(oldSize <= S));
   if (oldSize > newSize)
    SecureWipeArray(oldPtr+newSize, oldSize-newSize);
   return oldPtr;
  }

  pointer newPointer = allocate(newSize, 
# 406 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h" 3 4
                                        __null
# 406 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
                                            );
  if (preserve && newSize)
  {
   const size_t copySize = STDMIN(oldSize, newSize);
   memcpy_s(newPointer, sizeof(T)*newSize, oldPtr, sizeof(T)*copySize);
  }
  deallocate(oldPtr, oldSize);
  return newPointer;
 }

 size_type max_size() const {return STDMAX(m_fallbackAllocator.max_size(), S);}

private:





 T* GetAlignedArray() {return (1 && T_Align16) ? (T*)(void *)(((byte *)m_array) + (0-(size_t)m_array)%16) : m_array;}
 __attribute__((aligned(8))) T m_array[(1 && T_Align16) ? S+8/sizeof(T) : S];


 A m_fallbackAllocator;
 bool m_allocated;
};





template <class T, class A = AllocatorWithCleanup<T> >
class SecBlock
{
public:
 typedef typename A::value_type value_type;
 typedef typename A::pointer iterator;
 typedef typename A::const_pointer const_iterator;
 typedef typename A::size_type size_type;






 explicit SecBlock(size_type size=0)
  : m_size(size), m_ptr(m_alloc.allocate(size, 
# 451 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h" 3 4
                                              __null
# 451 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
                                                  )) { }




 SecBlock(const SecBlock<T, A> &t)
  : m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, 
# 457 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h" 3 4
                                                      __null
# 457 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
                                                          )) {
   ((void)((!t.m_ptr && !m_size) || (t.m_ptr && m_size)));
   if (t.m_ptr) {memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, t.m_size*sizeof(T));}
  }
# 470 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
 SecBlock(const T *ptr, size_type len)
  : m_size(len), m_ptr(m_alloc.allocate(len, 
# 471 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h" 3 4
                                            __null
# 471 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
                                                )) {
   ((void)((!m_ptr && !m_size) || (m_ptr && m_size)));
   if (ptr && m_ptr)
    memcpy_s(m_ptr, m_size*sizeof(T), ptr, len*sizeof(T));
   else if (m_size)
    memset(m_ptr, 0, m_size*sizeof(T));
  }

 ~SecBlock()
  {m_alloc.deallocate(m_ptr, m_size);}





 operator const void *() const
  {return m_ptr;}
 operator void *()
  {return m_ptr;}

 operator const T *() const
  {return m_ptr;}
 operator T *()
  {return m_ptr;}




 iterator begin()
  {return m_ptr;}


 const_iterator begin() const
  {return m_ptr;}


 iterator end()
  {return m_ptr+m_size;}


 const_iterator end() const
  {return m_ptr+m_size;}



 typename A::pointer data() {return m_ptr;}


 typename A::const_pointer data() const {return m_ptr;}




 size_type size() const {return m_size;}


 bool empty() const {return m_size == 0;}



 byte * BytePtr() {return (byte *)m_ptr;}


 const byte * BytePtr() const {return (const byte *)m_ptr;}



 size_type SizeInBytes() const {return m_size*sizeof(T);}





 void Assign(const T *ptr, size_type len)
 {
  New(len);
  if (m_ptr && ptr && len)
   {memcpy_s(m_ptr, m_size*sizeof(T), ptr, len*sizeof(T));}
 }





 void Assign(const SecBlock<T, A> &t)
 {
  if (this != &t)
  {
   New(t.m_size);
   if (m_ptr && t.m_ptr && t.m_size)
    {memcpy_s(m_ptr, m_size*sizeof(T), t, t.m_size*sizeof(T));}
  }
 }





 SecBlock<T, A>& operator=(const SecBlock<T, A> &t)
 {

  Assign(t);
  return *this;
 }




 SecBlock<T, A>& operator+=(const SecBlock<T, A> &t)
 {
  ((void)((!t.m_ptr && !t.m_size) || (t.m_ptr && t.m_size)));

  if(t.m_size)
  {
   const size_type oldSize = m_size;
   if(this != &t)
   {
    Grow(m_size+t.m_size);
    memcpy_s(m_ptr+oldSize, (m_size-oldSize)*sizeof(T), t.m_ptr, t.m_size*sizeof(T));
   }
   else
   {
    Grow(m_size*2);
    memcpy_s(m_ptr+oldSize, (m_size-oldSize)*sizeof(T), m_ptr, oldSize*sizeof(T));
   }
  }
  return *this;
 }





 SecBlock<T, A> operator+(const SecBlock<T, A> &t)
 {
  ((void)((!m_ptr && !m_size) || (m_ptr && m_size)));
  ((void)((!t.m_ptr && !t.m_size) || (t.m_ptr && t.m_size)));
  if(!t.m_size) return SecBlock(*this);

  SecBlock<T, A> result(m_size+t.m_size);
  if(m_size) {memcpy_s(result.m_ptr, result.m_size*sizeof(T), m_ptr, m_size*sizeof(T));}
  memcpy_s(result.m_ptr+m_size, (result.m_size-m_size)*sizeof(T), t.m_ptr, t.m_size*sizeof(T));
  return result;
 }







 bool operator==(const SecBlock<T, A> &t) const
 {
  return m_size == t.m_size &&
   VerifyBufsEqual(reinterpret_cast<const byte*>(m_ptr), reinterpret_cast<const byte*>(t.m_ptr), m_size*sizeof(T));
 }
# 635 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
 bool operator!=(const SecBlock<T, A> &t) const
 {
  return !operator==(t);
 }
# 647 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
 void New(size_type newSize)
 {
  m_ptr = m_alloc.reallocate(m_ptr, m_size, newSize, false);
  m_size = newSize;
 }
# 660 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
 void CleanNew(size_type newSize)
 {
  New(newSize);
  if (m_ptr) {memset_z(m_ptr, 0, m_size*sizeof(T));}
 }
# 673 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
 void Grow(size_type newSize)
 {
  if (newSize > m_size)
  {
   m_ptr = m_alloc.reallocate(m_ptr, m_size, newSize, true);
   m_size = newSize;
  }
 }
# 689 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
 void CleanGrow(size_type newSize)
 {
  if (newSize > m_size)
  {
   m_ptr = m_alloc.reallocate(m_ptr, m_size, newSize, true);
   memset_z(m_ptr+m_size, 0, (newSize-m_size)*sizeof(T));
   m_size = newSize;
  }
 }







 void resize(size_type newSize)
 {
  m_ptr = m_alloc.reallocate(m_ptr, m_size, newSize, true);
  m_size = newSize;
 }




 void swap(SecBlock<T, A> &b)
 {

  std::swap(m_alloc, b.m_alloc);
  std::swap(m_size, b.m_size);
  std::swap(m_ptr, b.m_ptr);
 }


 A m_alloc;
 size_type m_size;
 T *m_ptr;
};
# 739 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
typedef SecBlock<byte> SecByteBlock;
typedef SecBlock<word> SecWordBlock;
typedef SecBlock<byte, AllocatorWithCleanup<byte, true> > AlignedSecByteBlock;
# 752 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
template <class T, unsigned int S, class A = FixedSizeAllocatorWithCleanup<T, S> >
class FixedSizeSecBlock : public SecBlock<T, A>
{
public:

 explicit FixedSizeSecBlock() : SecBlock<T, A>(S) {}
};






template <class T, unsigned int S, bool T_Align16 = true>
class FixedSizeAlignedSecBlock : public FixedSizeSecBlock<T, S, FixedSizeAllocatorWithCleanup<T, S, NullAllocator<T>, T_Align16> >
{
};






template <class T, unsigned int S, class A = FixedSizeAllocatorWithCleanup<T, S, AllocatorWithCleanup<T> > >
class SecBlockWithHint : public SecBlock<T, A>
{
public:

 explicit SecBlockWithHint(size_t size) : SecBlock<T, A>(size) {}
};

template<class T, bool A, class U, bool B>
inline bool operator==(const CryptoPP::AllocatorWithCleanup<T, A>&, const CryptoPP::AllocatorWithCleanup<U, B>&) {return (true);}
template<class T, bool A, class U, bool B>
inline bool operator!=(const CryptoPP::AllocatorWithCleanup<T, A>&, const CryptoPP::AllocatorWithCleanup<U, B>&) {return (false);}

}

namespace std {
template <class T, class A>
inline void swap(CryptoPP::SecBlock<T, A> &a, CryptoPP::SecBlock<T, A> &b)
{
 a.swap(b);
}
# 807 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/secblock.h"
}
# 6 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/iterhash.h" 2

# 1 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/simple.h" 1
# 19 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/simple.h"
namespace CryptoPP {





template <class DERIVED, class BASE>
class ClonableImpl : public BASE
{
public:
 Clonable * Clone() const {return new DERIVED(*static_cast<const DERIVED *>(this));}
};






template <class BASE, class ALGORITHM_INFO=BASE>
class AlgorithmImpl : public BASE
{
public:
 static std::string StaticAlgorithmName() {return ALGORITHM_INFO::StaticAlgorithmName();}
 std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}
};



class InvalidKeyLength : public InvalidArgument
{
public:
 explicit InvalidKeyLength(const std::string &algorithm, size_t length) : InvalidArgument(algorithm + ": " + IntToString(length) + " is not a valid key length") {}
};



class InvalidRounds : public InvalidArgument
{
public:
 explicit InvalidRounds(const std::string &algorithm, unsigned int rounds) : InvalidArgument(algorithm + ": " + IntToString(rounds) + " is not a valid number of rounds") {}
};



class InvalidPersonalizationLength : public InvalidArgument
{
public:
 explicit InvalidPersonalizationLength(const std::string &algorithm, size_t length) : InvalidArgument(algorithm + ": " + IntToString(length) + " is not a valid salt length") {}
};



class InvalidSaltLength : public InvalidArgument
{
public:
 explicit InvalidSaltLength(const std::string &algorithm, size_t length) : InvalidArgument(algorithm + ": " + IntToString(length) + " is not a valid salt length") {}
};






template <class T>
class Bufferless : public T
{
public:
 bool IsolatedFlush(bool hardFlush, bool blocking)
  {((void)(hardFlush)); ((void)(blocking)); return false;}
};




template <class T>
class Unflushable : public T
{
public:
 bool Flush(bool completeFlush, int propagation=-1, bool blocking=true)
  {return ChannelFlush(DEFAULT_CHANNEL, completeFlush, propagation, blocking);}
 bool IsolatedFlush(bool hardFlush, bool blocking)
  {((void)(hardFlush)); ((void)(blocking)); ((void)(false)); return false;}
 bool ChannelFlush(const std::string &channel, bool hardFlush, int propagation=-1, bool blocking=true)
 {
  if (hardFlush && !InputBufferIsEmpty())
   throw CannotFlush("Unflushable<T>: this object has buffered input that cannot be flushed");
  else
  {
   BufferedTransformation *attached = this->AttachedTransformation();
   return attached && propagation ? attached->ChannelFlush(channel, hardFlush, propagation-1, blocking) : false;
  }
 }

protected:
 virtual bool InputBufferIsEmpty() const {return false;}
};





template <class T>
class InputRejecting : public T
{
public:
 struct InputRejected : public NotImplemented
  {InputRejected() : NotImplemented("BufferedTransformation: this object doesn't allow input") {}};
# 138 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/simple.h"
 size_t Put2(const byte *inString, size_t length, int messageEnd, bool blocking)
  {((void)(inString)); ((void)(length)); ((void)(messageEnd)); ((void)(blocking)); throw InputRejected();}




 bool IsolatedFlush(bool hardFlush, bool blocking)
  {((void)(hardFlush)); ((void)(blocking)); return false;}
 bool IsolatedMessageSeriesEnd(bool blocking)
  {((void)(blocking)); throw InputRejected();}
 size_t ChannelPut2(const std::string &channel, const byte *inString, size_t length, int messageEnd, bool blocking)
  {((void)(channel)); ((void)(inString)); ((void)(length)); ((void)(messageEnd)); ((void)(blocking)); throw InputRejected();}
 bool ChannelMessageSeriesEnd(const std::string& channel, int messageEnd, bool blocking)
  {((void)(channel)); ((void)(messageEnd)); ((void)(blocking)); throw InputRejected();}

};





template <class T>
class CustomFlushPropagation : public T
{
public:


 virtual bool Flush(bool hardFlush, int propagation=-1, bool blocking=true) =0;


private:
 bool IsolatedFlush(bool hardFlush, bool blocking)
  {((void)(hardFlush)); ((void)(blocking)); ((void)(false)); return false;}
};





template <class T>
class CustomSignalPropagation : public CustomFlushPropagation<T>
{
public:
 virtual void Initialize(const NameValuePairs &parameters=g_nullNameValuePairs, int propagation=-1) =0;

private:
 void IsolatedInitialize(const NameValuePairs &parameters)
  {((void)(parameters)); ((void)(false));}
};





template <class T>
class Multichannel : public CustomFlushPropagation<T>
{
public:
 bool Flush(bool hardFlush, int propagation=-1, bool blocking=true)
  {return this->ChannelFlush(DEFAULT_CHANNEL, hardFlush, propagation, blocking);}
 bool MessageSeriesEnd(int propagation=-1, bool blocking=true)
  {return this->ChannelMessageSeriesEnd(DEFAULT_CHANNEL, propagation, blocking);}
 byte * CreatePutSpace(size_t &size)
  {return this->ChannelCreatePutSpace(DEFAULT_CHANNEL, size);}
 size_t Put2(const byte *inString, size_t length, int messageEnd, bool blocking)
  {return this->ChannelPut2(DEFAULT_CHANNEL, inString, length, messageEnd, blocking);}
 size_t PutModifiable2(byte *inString, size_t length, int messageEnd, bool blocking)
  {return this->ChannelPutModifiable2(DEFAULT_CHANNEL, inString, length, messageEnd, blocking);}



 byte * ChannelCreatePutSpace(const std::string &channel, size_t &size)
  {((void)(channel)); size = 0; return 
# 210 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/simple.h" 3 4
                                             __null
# 210 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/simple.h"
                                                 ;}
 bool ChannelPutModifiable(const std::string &channel, byte *inString, size_t length)
  {this->ChannelPut(channel, inString, length); return false;}

 virtual size_t ChannelPut2(const std::string &channel, const byte *begin, size_t length, int messageEnd, bool blocking) =0;
 size_t ChannelPutModifiable2(const std::string &channel, byte *begin, size_t length, int messageEnd, bool blocking)
  {return ChannelPut2(channel, begin, length, messageEnd, blocking);}

 virtual bool ChannelFlush(const std::string &channel, bool hardFlush, int propagation=-1, bool blocking=true) =0;
};





template <class T>
class AutoSignaling : public T
{
public:
 AutoSignaling(int propagation=-1) : m_autoSignalPropagation(propagation) {}

 void SetAutoSignalPropagation(int propagation)
  {m_autoSignalPropagation = propagation;}
 int GetAutoSignalPropagation() const
  {return m_autoSignalPropagation;}

private:
 int m_autoSignalPropagation;
};





class Store : public AutoSignaling<InputRejecting<BufferedTransformation> >
{
public:

 Store() : m_messageEnd(false) {}

 void IsolatedInitialize(const NameValuePairs &parameters)
 {
  m_messageEnd = false;
  StoreInitialize(parameters);
 }

 unsigned int NumberOfMessages() const {return m_messageEnd ? 0 : 1;}
 bool GetNextMessage();
 unsigned int CopyMessagesTo(BufferedTransformation &target, unsigned int count=
# 258 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/simple.h" 3 4
                                                                               (0x7fffffff * 2U + 1U)
# 258 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/simple.h"
                                                                                       , const std::string &channel=DEFAULT_CHANNEL) const;

protected:
 virtual void StoreInitialize(const NameValuePairs &parameters) =0;

 bool m_messageEnd;
};
# 276 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/simple.h"
class Sink : public BufferedTransformation
{
public:
 size_t TransferTo2(BufferedTransformation &target, lword &transferBytes, const std::string &channel=DEFAULT_CHANNEL, bool blocking=true)
  {((void)(target)); ((void)(transferBytes)); ((void)(channel)); ((void)(blocking)); transferBytes = 0; return 0;}
 size_t CopyRangeTo2(BufferedTransformation &target, lword &begin, lword end=LWORD_MAX, const std::string &channel=DEFAULT_CHANNEL, bool blocking=true) const
  {((void)(target)); ((void)(begin)); ((void)(end)); ((void)(channel)); ((void)(blocking)); return 0;}
};






class BitBucket : public Bufferless<Sink>
{
public:
 std::string AlgorithmName() const {return "BitBucket";}
 void IsolatedInitialize(const NameValuePairs &params)
  {((void)(params));}
 size_t Put2(const byte *inString, size_t length, int messageEnd, bool blocking)
  {((void)(inString)); ((void)(length)); ((void)(messageEnd)); ((void)(blocking)); return 0;}
};

}
# 8 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/iterhash.h" 2

namespace CryptoPP {



class HashInputTooLong : public InvalidDataFormat
{
public:
 explicit HashInputTooLong(const std::string &alg)
  : InvalidDataFormat("IteratedHashBase: input data exceeds maximum allowed by hash function " + alg) {}
};







template <class T, class BASE>
class IteratedHashBase : public BASE
{
public:
 typedef T HashWordType;


 IteratedHashBase() : m_countLo(0), m_countHi(0) {}






 unsigned int OptimalBlockSize() const {return this->BlockSize();}




 unsigned int OptimalDataAlignment() const {return GetAlignmentOf<T>();}




 void Update(const byte *input, size_t length);
# 60 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/iterhash.h"
 byte * CreateUpdateSpace(size_t &size);



 void Restart();






 void TruncatedFinal(byte *digest, size_t digestSize);

protected:
 inline T GetBitCountHi() const {return (m_countLo >> (8*sizeof(T)-3)) + (m_countHi << 3);}
 inline T GetBitCountLo() const {return m_countLo << 3;}

 void PadLastBlock(unsigned int lastBlockSize, byte padFirst=0x80);
 virtual void Init() =0;

 virtual ByteOrder GetByteOrder() const =0;
 virtual void HashEndianCorrectedBlock(const HashWordType *data) =0;
 virtual size_t HashMultipleBlocks(const T *input, size_t length);
 void HashBlock(const HashWordType *input) {HashMultipleBlocks(input, this->BlockSize());}

 virtual T* DataBuf() =0;
 virtual T* StateBuf() =0;

private:
 T m_countLo, m_countHi;
};
# 100 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/iterhash.h"
template <class T_HashWordType, class T_Endianness, unsigned int T_BlockSize, class T_Base = HashTransformation>
class IteratedHash : public IteratedHashBase<T_HashWordType, T_Base>
{
public:
 typedef T_Endianness ByteOrderClass;
 typedef T_HashWordType HashWordType;


 virtual ~IteratedHash() { }


 static const int BLOCKSIZE = T_BlockSize;

 static CompileAssert<((T_BlockSize & (T_BlockSize - 1)) == 0)> cryptopp_CRYPTOPP_ASSERT_113 __attribute__ ((unused));




 unsigned int BlockSize() const {return T_BlockSize;}





 ByteOrder GetByteOrder() const {return T_Endianness::ToEnum();}






 inline void CorrectEndianess(HashWordType *out, const HashWordType *in, size_t byteCount)
 {
  ConditionalByteReverse(T_Endianness::ToEnum(), out, in, byteCount);
 }

protected:
 T_HashWordType* DataBuf() {return this->m_data;}
 FixedSizeSecBlock<T_HashWordType, T_BlockSize/sizeof(T_HashWordType)> m_data;
};
# 151 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/iterhash.h"
template <class T_HashWordType, class T_Endianness, unsigned int T_BlockSize, unsigned int T_StateSize, class T_Transform, unsigned int T_DigestSize = 0, bool T_StateAligned = false>
class IteratedHashWithStaticTransform
 : public ClonableImpl<T_Transform, AlgorithmImpl<IteratedHash<T_HashWordType, T_Endianness, T_BlockSize>, T_Transform> >
{
public:


 virtual ~IteratedHashWithStaticTransform() { }


 static const int DIGESTSIZE = T_DigestSize ? T_DigestSize : T_StateSize;




 unsigned int DigestSize() const {return DIGESTSIZE;};

protected:
 IteratedHashWithStaticTransform() {this->Init();}
 void HashEndianCorrectedBlock(const T_HashWordType *data) {T_Transform::Transform(this->m_state, data);}
 void Init() {T_Transform::InitState(this->m_state);}

 T_HashWordType* StateBuf() {return this->m_state;}
 FixedSizeAlignedSecBlock<T_HashWordType, T_BlockSize/sizeof(T_HashWordType), T_StateAligned> m_state;
};
# 185 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/iterhash.h"
}
# 12 "/home/pany/tls-diff-testing/cryptopp/../cryptopp/sha.h" 2







namespace CryptoPP {


class SHA1 : public IteratedHashWithStaticTransform<word32, BigEndian, 64, 20, SHA1>
{
public:
 static void InitState(HashWordType *state);
 static void Transform(word32 *digest, const word32 *data);
 static const char * StaticAlgorithmName() {return "SHA-1";}
};

typedef SHA1 SHA;


class SHA256 : public IteratedHashWithStaticTransform<word32, BigEndian, 64, 32, SHA256, 32, true>
{
public:

 size_t HashMultipleBlocks(const word32 *input, size_t length);

 static void InitState(HashWordType *state);
 static void Transform(word32 *digest, const word32 *data);
 static const char * StaticAlgorithmName() {return "SHA-256";}
};


class SHA224 : public IteratedHashWithStaticTransform<word32, BigEndian, 64, 32, SHA224, 28, true>
{
public:

 size_t HashMultipleBlocks(const word32 *input, size_t length);

 static void InitState(HashWordType *state);
 static void Transform(word32 *digest, const word32 *data) {SHA256::Transform(digest, data);}
 static const char * StaticAlgorithmName() {return "SHA-224";}
};


class SHA512 : public IteratedHashWithStaticTransform<word64, BigEndian, 128, 64, SHA512, 64, (0|0)>
{
public:
 static void InitState(HashWordType *state);
 static void Transform(word64 *digest, const word64 *data);
 static const char * StaticAlgorithmName() {return "SHA-512";}
};


class SHA384 : public IteratedHashWithStaticTransform<word64, BigEndian, 128, 64, SHA384, 48, (0|0)>
{
public:
 static void InitState(HashWordType *state);
 static void Transform(word64 *digest, const word64 *data) {SHA512::Transform(digest, data);}
 static const char * StaticAlgorithmName() {return "SHA-384";}
};

}
# 44 "/home/pany/tls-diff-testing/tls-diff-testing/cryptoman/inc/SHA256.h" 2

class BufferReader;
class BufferWriter;
# 55 "/home/pany/tls-diff-testing/tls-diff-testing/cryptoman/inc/SHA256.h"
class SHA256 : public MessageDigest {

private:

 CryptoPP::SHA256 sha256_;

 static BC digestSize_;
 static BC blockSize_;


public:

 SHA256();

 virtual const BC& getDigestSize() const;
 virtual const BC& getBlockSize() const;

 virtual void reset();
 virtual void update(const BufferReader& message);
 virtual void finish(BufferWriter& hash);

 virtual ~SHA256();

};
# 41 "src/generate.h" 2
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/TCPBatchClientSocket.h" 1
# 42 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/TCPBatchClientSocket.h"
# 1 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/TCPClientSocket.h" 1
# 43 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/TCPBatchClientSocket.h" 2
# 51 "/home/pany/tls-diff-testing/tls-diff-testing/middleman/inc/TCPBatchClientSocket.h"
class TCPBatchClientSocket {

private:


 typedef std::vector<TCPClientSocket*> socket_vector_type_t;



 socket_vector_type_t sockets_;


public:


 TCPBatchClientSocket();



 bool addServer(const string& hostAndPort);


 bool addServer(const string& host, int port);


 inline size_t getNServer() const {

  return sockets_.size();
 }



 size_t connect();


 bool disconnect();


 bool close();


 bool allConnected() const;



 bool setNonBlocking(bool nonBlocking);


 void setTimeout(size_t seconds);



 const TCPBatchClientSocket& operator<<(const BufferReader& reader);



 inline TCPClientSocket& operator[](size_t index) {

  return *sockets_[index];
 }



 virtual ~TCPBatchClientSocket();

};
# 42 "src/generate.h" 2

int test_servers(string inputRandomFile, string outputFile, size_t N, size_t nMaxOp, const vector<bool>& opEnable);

int mutate(string inputRandomFile,uint8_t* CurrentUnitData,size_t size);


void writeToFile(const string& filename, const string& text, bool append = false);
# 38 "src/generate.cpp" 2

using namespace std;
# 90 "src/generate.cpp"
class GlobalFilter : public DataUnitFilter {

public:

 bool apply(const DataUnit& dataUnit) const {

  return dataUnit.getDistanceToRoot() > 1 && dataUnit.getName() != "CipherSuite";
 }

};





class MyFilter3 : public DataUnitFilter {

public:

 bool apply(const DataUnit& dataUnit) const {

  return (dataUnit.hasParent() && dataUnit.getParent()->containsType(VectorDataUnit::typeDescriptor())) ||
    !dataUnit.hasNext();
 }

};






class VectorElementFilter : public DataUnitFilter {

public:

 bool apply(const DataUnit& dataUnit) const {

  return dataUnit.hasParent() && dataUnit.getParent()->containsType(VectorDataUnit::typeDescriptor());
 }

};





class DynamicLengthFilter : public DataUnitFilter {

public:

 bool apply(const DataUnit& dataUnit) const {

  int dynlen = 0;
  dataUnit.propGet<int>("_dynlen", dynlen);
  return dynlen > 0;
 }

};





class GeneratingFuzzOpFilter : public DataUnitFilter {

public:

 bool apply(const DataUnit& dataUnit) const {

        bool accept = false;

        if (dataUnit.isOfType(TStruct_Extension::typeDescriptor())) {
            accept = true;
        } else if (dataUnit.isOfType(TStruct_ClientHello_extensions::typeDescriptor())) {
            accept = true;
        } else if (dataUnit.isOfType(TStruct_ClientHello_cipher_suites::typeDescriptor())) {
            accept = true;
        }

        return accept;
 }

};





size_t applyOperators(DecisionReader& decisionReader, DataUnit& operand, string& summary, int nMaxOp, const vector<bool>& opEnable) {

 size_t nOp = 0;

 VoidingOperator voidOp;
 DuplicatingOperator duplOp;
 DeletingOperator delOp;
 FuzzIntOperator fuzzIntOp(decisionReader);
 TruncationFuzzOperator truncFuzzOp(decisionReader);
 FuzzDataOperator fuzzDataOp(decisionReader, true);
 AppendingFuzzOperator appFuzzOp(decisionReader);
 GeneratingFuzzOperator genFuzzOp(decisionReader);

 DynamicLengthFilter dynLenFilter;
 VectorElementFilter vecItemFilter;
    GeneratingFuzzOpFilter genFuzzOpFilter;

 vector<DataUnitOperator*> operators;
 vector<DataUnitFilter*> filters;

    if (opEnable.size() <= 0 || opEnable[0]) {
     operators.push_back(&voidOp);
     filters.push_back(&dynLenFilter);
    }
    if (opEnable.size() <= 1 || opEnable[1]) {
     operators.push_back(&duplOp);
     filters.push_back(&vecItemFilter);
    }
    if (opEnable.size() <= 2 || opEnable[2]) {
     operators.push_back(&delOp);
     filters.push_back(&vecItemFilter);
    }
    if (opEnable.size() <= 3 || opEnable[3]) {
     operators.push_back(&fuzzIntOp);
     filters.push_back(0);
    }
    if (opEnable.size() <= 4 || opEnable[4]) {
     operators.push_back(&truncFuzzOp);
     filters.push_back(&dynLenFilter);
    }
    if (opEnable.size() <= 5 || opEnable[5]) {
     operators.push_back(&fuzzDataOp);
     filters.push_back(0);
    }
    if (opEnable.size() <= 6 || opEnable[6]) {
     operators.push_back(&appFuzzOp);
     filters.push_back(&dynLenFilter);
    }
    if (opEnable.size() <= 7 || opEnable[7]) {
     operators.push_back(&genFuzzOp);
     filters.push_back(&genFuzzOpFilter);
    }


 GlobalFilter globalFilter;


    do {


        if (operators.size() == 0) {
            cout << "No operators" << endl;
            break;
        }
     size_t iOp = decisionReader.readUIntUniform(operators.size());
     DataUnitOperator* op = operators[iOp];
     DataUnitFilter* opFilter = filters[iOp];


     ConjunctionDataUnitFilter filter(globalFilter,
       op->getApplicationFilter(), *opFilter);

     String line;

     DataUnitCursor cursor(operand);

     size_t nDu = cursor.count(filter);
        if (nDu == 0) {
            continue;
        }

     bool applyRecursive = false;

  size_t iDu = decisionReader.readUIntUniform(nDu);
  cursor.seekByIndex(iDu, filter);

  if (op->apply(cursor)) {


      String path = cursor.getCurrent().getPath();


   PropertyNode& opLog = op->getLastOperationLog();
   string opType = "unknown";
   opLog.propGet<string>("operator.type", opType);

      line = String::format("%s@%s: ", opType.c_str(), path.c_str());

   bool repair = true;

   if (opType == "VoidingOperator") {

    line.append("voided");

   } else if (opType == "DuplicatingOperator") {

    line.append("duplicated");
    applyRecursive = true;

   } else if (opType == "DeletingOperator") {

    line.append("deleted");

   } else if (opType == "TruncationFuzzOperator") {

    line.appendFormat("truncated %s -> %s",
      opLog.propGet<string>("operand.length").c_str(),
      opLog.propGet<string>("operand.length.after").c_str());

   } else if (opType == "FuzzDataOperator") {

    repair = false;
    line.appendFormat("random content -> %s",
      opLog.propGet<string>("operand.length.after").c_str());

   } else if (opType == "FuzzIntOperator") {

    repair = false;
    line.appendFormat("%s --> %s",
      opLog.propGetDefault<string>("int.before", "##").c_str(),
      opLog.propGet<string>("int.after").c_str());

   } else if (opType == "AppendingFuzzOperator") {

    line.append("AppendingFuzzOperator");

   } else if (opType == "GeneratingFuzzOperator") {

    line.append("GeneratingFuzzOperator");
    applyRecursive = true;

   } else if (opType == "unknown") {

    line.append("unknown operator");

   }

   if (repair) {
    RepairingFuzzOperator repOp(decisionReader);
    repOp.apply(cursor);
    line.append(" ");
    line.append(repOp.getLastOperationLog().propGet<string>("operator.repairtrace"));
   }

   nOp += 1;
      if (summary.length() > 0) {
       summary.append("\n");
      }
      summary.append(line);

            if (decisionReader.readBoolUniform()
                    && cursor.valid()
                    && applyRecursive
                    && ((nMaxOp < 0) || (nOp < (size_t)nMaxOp))) {

             nOp += applyOperators(decisionReader, cursor.getCurrent(),
                        summary, nMaxOp < 0 ? nMaxOp : nMaxOp - nOp, opEnable);
            }
  }

    } while (((nMaxOp < 0) || (nOp < (size_t)nMaxOp))

            && decisionReader.readBoolUniform());

 return nOp;
}



int test_servers(string inputRandomFile, string outputFile, size_t N, size_t nMaxOp, const vector<bool>& opEnable) {

    cout << "Generating " << N << " inputs." << endl;


 VectorBuffer outBuf;
 outBuf.appendFromString(
   "160301012c01000128030340c70e243001b96d8c63687738696432d3e6f949"
   "107aabad8450cdffd6a266e4000092c030c02cc028c024c014c00a00a3009f"
   "006b006a0039003800880087c032c02ec02ac026c00fc005009d003d003500"
   "84c02fc02bc027c023c013c00900a2009e0067004000330032009a00990045"
   "0044c031c02dc029c025c00ec004009c003c002f00960041c011c007c00cc0"
   "0200050004c012c00800160013c00dc003000a001500120009001400110008"
   "0006000300ff0100006d000b000403000102000a00340032000e000d001900"
   "0b000c00180009000a00160017000800060007001400150004000500120013"
   "000100020003000f0010001100230000000d0020001e060106020603050105"
   "020503040104020403030103020303020102020203000f000101");


 TVector_MainType printRec;
 printRec.dissector().dissectFromBuffer(outBuf);
 printRec.print();


 FileStreamReader ctrlStream(inputRandomFile);
 DecisionReader selector(ctrlStream);


 String line;
 std::map<string, bool> hashMap;
    size_t nDuplicates = 0;

 for (size_t n = 0; n < N;) {

  TVector_MainType outRec;
  outRec.dissector().dissectFromBuffer(outBuf);

        size_t nOp = 0;
  String summary;
        VectorBuffer outBuf;

  if (n == 0) {

   summary.append("No change");

  } else {

            nOp = applyOperators(selector, outRec, summary, nMaxOp, opEnable);
   if (nOp == 0) {
    continue;
   }

            if (outRec[0] != 0) {


            }
  }

        outRec.copyTo(outBuf);


  VectorBuffer hash;
  SHA256 sha256;
  sha256.digest(outBuf, hash);
  string hashString = hash.toHexString();
  if (hashMap.count(hashString) > 0) {
            nDuplicates++;
   continue;
  }
  hashMap[hashString] = true;


        if (outputFile != "-") {

            time_t rawtime;
            struct tm* timeinfo;
            char timebuf[80];
            time(&rawtime);
            timeinfo = localtime(&rawtime);
            strftime(timebuf, 80, "%Y%m%d-%H%M%S", timeinfo);

      String clientDataStr;
      clientDataStr.append(outBuf.toHexString());
            clientDataStr.appendFormat(":ID=%u;nOp=%u;time=%s", n, nOp, timebuf);
      writeToFile(outputFile, clientDataStr, true);
        }


  line = String::format("[%09u] ", n);
  size_t nLines = summary.countLines();
  line.appendRepeated("\n            ", nLines);
  line.appendColumn(summary);

  cout << line << endl;

        ++n;
 }

 cout << "Random stream used: ";
 selector.getAccumulator().print();

    cout << "Hash map size: " << hashMap.size() << endl;

    cout << "Number of rejected duplicates: " << nDuplicates << endl;

 return 0;
}

int mutate(string inputRandomFile,uint8_t* CurrentUnitData,size_t size) {
 vector<bool> opEnable;

 for (size_t ic = 0; ic < 8; ic++) {
  opEnable.push_back(true);
 }
 String tmp;
        for(size_t i = 0;i < size; i++)
 {
  char buf[3];
  sprintf(buf,"%x",CurrentUnitData[i]);
  tmp.append(buf);
 }


 VectorBuffer outBuf;
 outBuf.appendFromString(tmp);


 TVector_MainType printRec;
 printRec.dissector().dissectFromBuffer(outBuf);
 printRec.print();


 FileStreamReader ctrlStream(inputRandomFile);
 DecisionReader selector(ctrlStream);


 String line;
 std::map<string, bool> hashMap;
        size_t nDuplicates = 0;


 TVector_MainType outRec;
 outRec.dissector().dissectFromBuffer(outBuf);

        size_t nOp = 0;
 String summary;

            nOp = applyOperators(selector, outRec, summary, 100, opEnable);

        outRec.copyTo(outBuf);
 String clientDataStr;
 clientDataStr.append(outBuf.toBitString());
 return clientDataStr.length();
}


void writeToFile(const string& filename, const string& text, bool append) {

 ios_base::openmode mode = std::ofstream::out;
 if (append) {
  mode |= std::ios_base::app;
 }

 std::ofstream ofs(filename.data(), mode);
 if (ofs.is_open()) {
  ofs << text << endl;
  ofs.close();
 }
}
